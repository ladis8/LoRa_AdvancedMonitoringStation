
sx1272mb2das.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08007da8  08007da8  00017da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080080ac  080080ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  080080b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005a0  2000009c  08008150  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000063c  08008150  0002063c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002589d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005761  00000000  00000000  00045961  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a358  00000000  00000000  0004b0c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001090  00000000  00000000  00055420  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001238  00000000  00000000  000564b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001d805  00000000  00000000  000576e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00015404  00000000  00000000  00074eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000999f5  00000000  00000000  0008a2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00123ce6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000341c  00000000  00000000  00123d64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007d90 	.word	0x08007d90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	08007d90 	.word	0x08007d90

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 f813 	bl	8001444 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ff6d 	bl	8001308 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f805 	bl	8001444 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fffb 	bl	8001444 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff8d 	bl	800137c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ff83 	bl	800137c <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_uldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d10f      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 800048c:	2900      	cmp	r1, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_uldivmod+0xe>
 8000490:	2800      	cmp	r0, #0
 8000492:	d002      	beq.n	800049a <__aeabi_uldivmod+0x16>
 8000494:	2100      	movs	r1, #0
 8000496:	43c9      	mvns	r1, r1
 8000498:	1c08      	adds	r0, r1, #0
 800049a:	b407      	push	{r0, r1, r2}
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <__aeabi_uldivmod+0x24>)
 800049e:	a102      	add	r1, pc, #8	; (adr r1, 80004a8 <__aeabi_uldivmod+0x24>)
 80004a0:	1840      	adds	r0, r0, r1
 80004a2:	9002      	str	r0, [sp, #8]
 80004a4:	bd03      	pop	{r0, r1, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	ffffff5d 	.word	0xffffff5d
 80004ac:	b403      	push	{r0, r1}
 80004ae:	4668      	mov	r0, sp
 80004b0:	b501      	push	{r0, lr}
 80004b2:	9802      	ldr	r0, [sp, #8]
 80004b4:	f000 f824 	bl	8000500 <__udivmoddi4>
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	469e      	mov	lr, r3
 80004bc:	b002      	add	sp, #8
 80004be:	bc0c      	pop	{r2, r3}
 80004c0:	4770      	bx	lr
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_d2uiz>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	2200      	movs	r2, #0
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <__aeabi_d2uiz+0x38>)
 80004ca:	0004      	movs	r4, r0
 80004cc:	000d      	movs	r5, r1
 80004ce:	f7ff ffcf 	bl	8000470 <__aeabi_dcmpge>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d104      	bne.n	80004e0 <__aeabi_d2uiz+0x1c>
 80004d6:	0020      	movs	r0, r4
 80004d8:	0029      	movs	r1, r5
 80004da:	f001 fdab 	bl	8002034 <__aeabi_d2iz>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <__aeabi_d2uiz+0x38>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	0020      	movs	r0, r4
 80004e6:	0029      	movs	r1, r5
 80004e8:	f001 fa8e 	bl	8001a08 <__aeabi_dsub>
 80004ec:	f001 fda2 	bl	8002034 <__aeabi_d2iz>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	061b      	lsls	r3, r3, #24
 80004f4:	469c      	mov	ip, r3
 80004f6:	4460      	add	r0, ip
 80004f8:	e7f1      	b.n	80004de <__aeabi_d2uiz+0x1a>
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	41e00000 	.word	0x41e00000

08000500 <__udivmoddi4>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4657      	mov	r7, sl
 8000504:	464e      	mov	r6, r9
 8000506:	4645      	mov	r5, r8
 8000508:	46de      	mov	lr, fp
 800050a:	b5e0      	push	{r5, r6, r7, lr}
 800050c:	0004      	movs	r4, r0
 800050e:	b083      	sub	sp, #12
 8000510:	000d      	movs	r5, r1
 8000512:	4692      	mov	sl, r2
 8000514:	4699      	mov	r9, r3
 8000516:	428b      	cmp	r3, r1
 8000518:	d82f      	bhi.n	800057a <__udivmoddi4+0x7a>
 800051a:	d02c      	beq.n	8000576 <__udivmoddi4+0x76>
 800051c:	4649      	mov	r1, r9
 800051e:	4650      	mov	r0, sl
 8000520:	f001 fe54 	bl	80021cc <__clzdi2>
 8000524:	0029      	movs	r1, r5
 8000526:	0006      	movs	r6, r0
 8000528:	0020      	movs	r0, r4
 800052a:	f001 fe4f 	bl	80021cc <__clzdi2>
 800052e:	1a33      	subs	r3, r6, r0
 8000530:	4698      	mov	r8, r3
 8000532:	3b20      	subs	r3, #32
 8000534:	469b      	mov	fp, r3
 8000536:	d500      	bpl.n	800053a <__udivmoddi4+0x3a>
 8000538:	e074      	b.n	8000624 <__udivmoddi4+0x124>
 800053a:	4653      	mov	r3, sl
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	001f      	movs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	001e      	movs	r6, r3
 800054a:	42af      	cmp	r7, r5
 800054c:	d829      	bhi.n	80005a2 <__udivmoddi4+0xa2>
 800054e:	d026      	beq.n	800059e <__udivmoddi4+0x9e>
 8000550:	465b      	mov	r3, fp
 8000552:	1ba4      	subs	r4, r4, r6
 8000554:	41bd      	sbcs	r5, r7
 8000556:	2b00      	cmp	r3, #0
 8000558:	da00      	bge.n	800055c <__udivmoddi4+0x5c>
 800055a:	e079      	b.n	8000650 <__udivmoddi4+0x150>
 800055c:	2200      	movs	r2, #0
 800055e:	2300      	movs	r3, #0
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	2301      	movs	r3, #1
 8000566:	465a      	mov	r2, fp
 8000568:	4093      	lsls	r3, r2
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2301      	movs	r3, #1
 800056e:	4642      	mov	r2, r8
 8000570:	4093      	lsls	r3, r2
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	e019      	b.n	80005aa <__udivmoddi4+0xaa>
 8000576:	4282      	cmp	r2, r0
 8000578:	d9d0      	bls.n	800051c <__udivmoddi4+0x1c>
 800057a:	2200      	movs	r2, #0
 800057c:	2300      	movs	r3, #0
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <__udivmoddi4+0x8c>
 8000588:	601c      	str	r4, [r3, #0]
 800058a:	605d      	str	r5, [r3, #4]
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	b003      	add	sp, #12
 8000592:	bc3c      	pop	{r2, r3, r4, r5}
 8000594:	4690      	mov	r8, r2
 8000596:	4699      	mov	r9, r3
 8000598:	46a2      	mov	sl, r4
 800059a:	46ab      	mov	fp, r5
 800059c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d9d6      	bls.n	8000550 <__udivmoddi4+0x50>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	4643      	mov	r3, r8
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0e8      	beq.n	8000582 <__udivmoddi4+0x82>
 80005b0:	07fb      	lsls	r3, r7, #31
 80005b2:	0872      	lsrs	r2, r6, #1
 80005b4:	431a      	orrs	r2, r3
 80005b6:	4646      	mov	r6, r8
 80005b8:	087b      	lsrs	r3, r7, #1
 80005ba:	e00e      	b.n	80005da <__udivmoddi4+0xda>
 80005bc:	42ab      	cmp	r3, r5
 80005be:	d101      	bne.n	80005c4 <__udivmoddi4+0xc4>
 80005c0:	42a2      	cmp	r2, r4
 80005c2:	d80c      	bhi.n	80005de <__udivmoddi4+0xde>
 80005c4:	1aa4      	subs	r4, r4, r2
 80005c6:	419d      	sbcs	r5, r3
 80005c8:	2001      	movs	r0, #1
 80005ca:	1924      	adds	r4, r4, r4
 80005cc:	416d      	adcs	r5, r5
 80005ce:	2100      	movs	r1, #0
 80005d0:	3e01      	subs	r6, #1
 80005d2:	1824      	adds	r4, r4, r0
 80005d4:	414d      	adcs	r5, r1
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d006      	beq.n	80005e8 <__udivmoddi4+0xe8>
 80005da:	42ab      	cmp	r3, r5
 80005dc:	d9ee      	bls.n	80005bc <__udivmoddi4+0xbc>
 80005de:	3e01      	subs	r6, #1
 80005e0:	1924      	adds	r4, r4, r4
 80005e2:	416d      	adcs	r5, r5
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d1f8      	bne.n	80005da <__udivmoddi4+0xda>
 80005e8:	465b      	mov	r3, fp
 80005ea:	9800      	ldr	r0, [sp, #0]
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	1900      	adds	r0, r0, r4
 80005f0:	4169      	adcs	r1, r5
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db22      	blt.n	800063c <__udivmoddi4+0x13c>
 80005f6:	002b      	movs	r3, r5
 80005f8:	465a      	mov	r2, fp
 80005fa:	40d3      	lsrs	r3, r2
 80005fc:	002a      	movs	r2, r5
 80005fe:	4644      	mov	r4, r8
 8000600:	40e2      	lsrs	r2, r4
 8000602:	001c      	movs	r4, r3
 8000604:	465b      	mov	r3, fp
 8000606:	0015      	movs	r5, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	db2c      	blt.n	8000666 <__udivmoddi4+0x166>
 800060c:	0026      	movs	r6, r4
 800060e:	409e      	lsls	r6, r3
 8000610:	0033      	movs	r3, r6
 8000612:	0026      	movs	r6, r4
 8000614:	4647      	mov	r7, r8
 8000616:	40be      	lsls	r6, r7
 8000618:	0032      	movs	r2, r6
 800061a:	1a80      	subs	r0, r0, r2
 800061c:	4199      	sbcs	r1, r3
 800061e:	9000      	str	r0, [sp, #0]
 8000620:	9101      	str	r1, [sp, #4]
 8000622:	e7ae      	b.n	8000582 <__udivmoddi4+0x82>
 8000624:	4642      	mov	r2, r8
 8000626:	2320      	movs	r3, #32
 8000628:	1a9b      	subs	r3, r3, r2
 800062a:	4652      	mov	r2, sl
 800062c:	40da      	lsrs	r2, r3
 800062e:	4641      	mov	r1, r8
 8000630:	0013      	movs	r3, r2
 8000632:	464a      	mov	r2, r9
 8000634:	408a      	lsls	r2, r1
 8000636:	0017      	movs	r7, r2
 8000638:	431f      	orrs	r7, r3
 800063a:	e782      	b.n	8000542 <__udivmoddi4+0x42>
 800063c:	4642      	mov	r2, r8
 800063e:	2320      	movs	r3, #32
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	002a      	movs	r2, r5
 8000644:	4646      	mov	r6, r8
 8000646:	409a      	lsls	r2, r3
 8000648:	0023      	movs	r3, r4
 800064a:	40f3      	lsrs	r3, r6
 800064c:	4313      	orrs	r3, r2
 800064e:	e7d5      	b.n	80005fc <__udivmoddi4+0xfc>
 8000650:	4642      	mov	r2, r8
 8000652:	2320      	movs	r3, #32
 8000654:	2100      	movs	r1, #0
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	2200      	movs	r2, #0
 800065a:	9100      	str	r1, [sp, #0]
 800065c:	9201      	str	r2, [sp, #4]
 800065e:	2201      	movs	r2, #1
 8000660:	40da      	lsrs	r2, r3
 8000662:	9201      	str	r2, [sp, #4]
 8000664:	e782      	b.n	800056c <__udivmoddi4+0x6c>
 8000666:	4642      	mov	r2, r8
 8000668:	2320      	movs	r3, #32
 800066a:	0026      	movs	r6, r4
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	40de      	lsrs	r6, r3
 8000670:	002f      	movs	r7, r5
 8000672:	46b4      	mov	ip, r6
 8000674:	4097      	lsls	r7, r2
 8000676:	4666      	mov	r6, ip
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7c9      	b.n	8000612 <__udivmoddi4+0x112>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_dadd>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	4645      	mov	r5, r8
 8000684:	46de      	mov	lr, fp
 8000686:	4657      	mov	r7, sl
 8000688:	464e      	mov	r6, r9
 800068a:	030c      	lsls	r4, r1, #12
 800068c:	b5e0      	push	{r5, r6, r7, lr}
 800068e:	004e      	lsls	r6, r1, #1
 8000690:	0fc9      	lsrs	r1, r1, #31
 8000692:	4688      	mov	r8, r1
 8000694:	000d      	movs	r5, r1
 8000696:	0a61      	lsrs	r1, r4, #9
 8000698:	0f44      	lsrs	r4, r0, #29
 800069a:	430c      	orrs	r4, r1
 800069c:	00c7      	lsls	r7, r0, #3
 800069e:	0319      	lsls	r1, r3, #12
 80006a0:	0058      	lsls	r0, r3, #1
 80006a2:	0fdb      	lsrs	r3, r3, #31
 80006a4:	469b      	mov	fp, r3
 80006a6:	0a4b      	lsrs	r3, r1, #9
 80006a8:	0f51      	lsrs	r1, r2, #29
 80006aa:	430b      	orrs	r3, r1
 80006ac:	0d76      	lsrs	r6, r6, #21
 80006ae:	0d40      	lsrs	r0, r0, #21
 80006b0:	0019      	movs	r1, r3
 80006b2:	00d2      	lsls	r2, r2, #3
 80006b4:	45d8      	cmp	r8, fp
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3a>
 80006b8:	e0ae      	b.n	8000818 <__aeabi_dadd+0x198>
 80006ba:	1a35      	subs	r5, r6, r0
 80006bc:	2d00      	cmp	r5, #0
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_dadd+0x42>
 80006c0:	e0f6      	b.n	80008b0 <__aeabi_dadd+0x230>
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d10f      	bne.n	80006e6 <__aeabi_dadd+0x66>
 80006c6:	4313      	orrs	r3, r2
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x4c>
 80006ca:	e0db      	b.n	8000884 <__aeabi_dadd+0x204>
 80006cc:	1e6b      	subs	r3, r5, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d000      	beq.n	80006d4 <__aeabi_dadd+0x54>
 80006d2:	e137      	b.n	8000944 <__aeabi_dadd+0x2c4>
 80006d4:	1aba      	subs	r2, r7, r2
 80006d6:	4297      	cmp	r7, r2
 80006d8:	41bf      	sbcs	r7, r7
 80006da:	1a64      	subs	r4, r4, r1
 80006dc:	427f      	negs	r7, r7
 80006de:	1be4      	subs	r4, r4, r7
 80006e0:	2601      	movs	r6, #1
 80006e2:	0017      	movs	r7, r2
 80006e4:	e024      	b.n	8000730 <__aeabi_dadd+0xb0>
 80006e6:	4bc6      	ldr	r3, [pc, #792]	; (8000a00 <__aeabi_dadd+0x380>)
 80006e8:	429e      	cmp	r6, r3
 80006ea:	d04d      	beq.n	8000788 <__aeabi_dadd+0x108>
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	041b      	lsls	r3, r3, #16
 80006f0:	4319      	orrs	r1, r3
 80006f2:	2d38      	cmp	r5, #56	; 0x38
 80006f4:	dd00      	ble.n	80006f8 <__aeabi_dadd+0x78>
 80006f6:	e107      	b.n	8000908 <__aeabi_dadd+0x288>
 80006f8:	2d1f      	cmp	r5, #31
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x7e>
 80006fc:	e138      	b.n	8000970 <__aeabi_dadd+0x2f0>
 80006fe:	2020      	movs	r0, #32
 8000700:	1b43      	subs	r3, r0, r5
 8000702:	469a      	mov	sl, r3
 8000704:	000b      	movs	r3, r1
 8000706:	4650      	mov	r0, sl
 8000708:	4083      	lsls	r3, r0
 800070a:	4699      	mov	r9, r3
 800070c:	0013      	movs	r3, r2
 800070e:	4648      	mov	r0, r9
 8000710:	40eb      	lsrs	r3, r5
 8000712:	4318      	orrs	r0, r3
 8000714:	0003      	movs	r3, r0
 8000716:	4650      	mov	r0, sl
 8000718:	4082      	lsls	r2, r0
 800071a:	1e50      	subs	r0, r2, #1
 800071c:	4182      	sbcs	r2, r0
 800071e:	40e9      	lsrs	r1, r5
 8000720:	431a      	orrs	r2, r3
 8000722:	1aba      	subs	r2, r7, r2
 8000724:	1a61      	subs	r1, r4, r1
 8000726:	4297      	cmp	r7, r2
 8000728:	41a4      	sbcs	r4, r4
 800072a:	0017      	movs	r7, r2
 800072c:	4264      	negs	r4, r4
 800072e:	1b0c      	subs	r4, r1, r4
 8000730:	0223      	lsls	r3, r4, #8
 8000732:	d562      	bpl.n	80007fa <__aeabi_dadd+0x17a>
 8000734:	0264      	lsls	r4, r4, #9
 8000736:	0a65      	lsrs	r5, r4, #9
 8000738:	2d00      	cmp	r5, #0
 800073a:	d100      	bne.n	800073e <__aeabi_dadd+0xbe>
 800073c:	e0df      	b.n	80008fe <__aeabi_dadd+0x27e>
 800073e:	0028      	movs	r0, r5
 8000740:	f001 fd26 	bl	8002190 <__clzsi2>
 8000744:	0003      	movs	r3, r0
 8000746:	3b08      	subs	r3, #8
 8000748:	2b1f      	cmp	r3, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0xce>
 800074c:	e0d2      	b.n	80008f4 <__aeabi_dadd+0x274>
 800074e:	2220      	movs	r2, #32
 8000750:	003c      	movs	r4, r7
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	409d      	lsls	r5, r3
 8000756:	40d4      	lsrs	r4, r2
 8000758:	409f      	lsls	r7, r3
 800075a:	4325      	orrs	r5, r4
 800075c:	429e      	cmp	r6, r3
 800075e:	dd00      	ble.n	8000762 <__aeabi_dadd+0xe2>
 8000760:	e0c4      	b.n	80008ec <__aeabi_dadd+0x26c>
 8000762:	1b9e      	subs	r6, r3, r6
 8000764:	1c73      	adds	r3, r6, #1
 8000766:	2b1f      	cmp	r3, #31
 8000768:	dd00      	ble.n	800076c <__aeabi_dadd+0xec>
 800076a:	e0f1      	b.n	8000950 <__aeabi_dadd+0x2d0>
 800076c:	2220      	movs	r2, #32
 800076e:	0038      	movs	r0, r7
 8000770:	0029      	movs	r1, r5
 8000772:	1ad2      	subs	r2, r2, r3
 8000774:	40d8      	lsrs	r0, r3
 8000776:	4091      	lsls	r1, r2
 8000778:	4097      	lsls	r7, r2
 800077a:	002c      	movs	r4, r5
 800077c:	4301      	orrs	r1, r0
 800077e:	1e78      	subs	r0, r7, #1
 8000780:	4187      	sbcs	r7, r0
 8000782:	40dc      	lsrs	r4, r3
 8000784:	2600      	movs	r6, #0
 8000786:	430f      	orrs	r7, r1
 8000788:	077b      	lsls	r3, r7, #29
 800078a:	d009      	beq.n	80007a0 <__aeabi_dadd+0x120>
 800078c:	230f      	movs	r3, #15
 800078e:	403b      	ands	r3, r7
 8000790:	2b04      	cmp	r3, #4
 8000792:	d005      	beq.n	80007a0 <__aeabi_dadd+0x120>
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	42bb      	cmp	r3, r7
 8000798:	41bf      	sbcs	r7, r7
 800079a:	427f      	negs	r7, r7
 800079c:	19e4      	adds	r4, r4, r7
 800079e:	001f      	movs	r7, r3
 80007a0:	0223      	lsls	r3, r4, #8
 80007a2:	d52c      	bpl.n	80007fe <__aeabi_dadd+0x17e>
 80007a4:	4b96      	ldr	r3, [pc, #600]	; (8000a00 <__aeabi_dadd+0x380>)
 80007a6:	3601      	adds	r6, #1
 80007a8:	429e      	cmp	r6, r3
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x12e>
 80007ac:	e09a      	b.n	80008e4 <__aeabi_dadd+0x264>
 80007ae:	4645      	mov	r5, r8
 80007b0:	4b94      	ldr	r3, [pc, #592]	; (8000a04 <__aeabi_dadd+0x384>)
 80007b2:	08ff      	lsrs	r7, r7, #3
 80007b4:	401c      	ands	r4, r3
 80007b6:	0760      	lsls	r0, r4, #29
 80007b8:	0576      	lsls	r6, r6, #21
 80007ba:	0264      	lsls	r4, r4, #9
 80007bc:	4307      	orrs	r7, r0
 80007be:	0b24      	lsrs	r4, r4, #12
 80007c0:	0d76      	lsrs	r6, r6, #21
 80007c2:	2100      	movs	r1, #0
 80007c4:	0324      	lsls	r4, r4, #12
 80007c6:	0b23      	lsrs	r3, r4, #12
 80007c8:	0d0c      	lsrs	r4, r1, #20
 80007ca:	4a8f      	ldr	r2, [pc, #572]	; (8000a08 <__aeabi_dadd+0x388>)
 80007cc:	0524      	lsls	r4, r4, #20
 80007ce:	431c      	orrs	r4, r3
 80007d0:	4014      	ands	r4, r2
 80007d2:	0533      	lsls	r3, r6, #20
 80007d4:	4323      	orrs	r3, r4
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	07ed      	lsls	r5, r5, #31
 80007da:	085b      	lsrs	r3, r3, #1
 80007dc:	432b      	orrs	r3, r5
 80007de:	0038      	movs	r0, r7
 80007e0:	0019      	movs	r1, r3
 80007e2:	bc3c      	pop	{r2, r3, r4, r5}
 80007e4:	4690      	mov	r8, r2
 80007e6:	4699      	mov	r9, r3
 80007e8:	46a2      	mov	sl, r4
 80007ea:	46ab      	mov	fp, r5
 80007ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ee:	4664      	mov	r4, ip
 80007f0:	4304      	orrs	r4, r0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x176>
 80007f4:	e211      	b.n	8000c1a <__aeabi_dadd+0x59a>
 80007f6:	0004      	movs	r4, r0
 80007f8:	4667      	mov	r7, ip
 80007fa:	077b      	lsls	r3, r7, #29
 80007fc:	d1c6      	bne.n	800078c <__aeabi_dadd+0x10c>
 80007fe:	4645      	mov	r5, r8
 8000800:	0760      	lsls	r0, r4, #29
 8000802:	08ff      	lsrs	r7, r7, #3
 8000804:	4307      	orrs	r7, r0
 8000806:	08e4      	lsrs	r4, r4, #3
 8000808:	4b7d      	ldr	r3, [pc, #500]	; (8000a00 <__aeabi_dadd+0x380>)
 800080a:	429e      	cmp	r6, r3
 800080c:	d030      	beq.n	8000870 <__aeabi_dadd+0x1f0>
 800080e:	0324      	lsls	r4, r4, #12
 8000810:	0576      	lsls	r6, r6, #21
 8000812:	0b24      	lsrs	r4, r4, #12
 8000814:	0d76      	lsrs	r6, r6, #21
 8000816:	e7d4      	b.n	80007c2 <__aeabi_dadd+0x142>
 8000818:	1a33      	subs	r3, r6, r0
 800081a:	469a      	mov	sl, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	dd78      	ble.n	8000912 <__aeabi_dadd+0x292>
 8000820:	2800      	cmp	r0, #0
 8000822:	d031      	beq.n	8000888 <__aeabi_dadd+0x208>
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <__aeabi_dadd+0x380>)
 8000826:	4286      	cmp	r6, r0
 8000828:	d0ae      	beq.n	8000788 <__aeabi_dadd+0x108>
 800082a:	2080      	movs	r0, #128	; 0x80
 800082c:	0400      	lsls	r0, r0, #16
 800082e:	4301      	orrs	r1, r0
 8000830:	4653      	mov	r3, sl
 8000832:	2b38      	cmp	r3, #56	; 0x38
 8000834:	dc00      	bgt.n	8000838 <__aeabi_dadd+0x1b8>
 8000836:	e0e9      	b.n	8000a0c <__aeabi_dadd+0x38c>
 8000838:	430a      	orrs	r2, r1
 800083a:	1e51      	subs	r1, r2, #1
 800083c:	418a      	sbcs	r2, r1
 800083e:	2100      	movs	r1, #0
 8000840:	19d2      	adds	r2, r2, r7
 8000842:	42ba      	cmp	r2, r7
 8000844:	41bf      	sbcs	r7, r7
 8000846:	1909      	adds	r1, r1, r4
 8000848:	427c      	negs	r4, r7
 800084a:	0017      	movs	r7, r2
 800084c:	190c      	adds	r4, r1, r4
 800084e:	0223      	lsls	r3, r4, #8
 8000850:	d5d3      	bpl.n	80007fa <__aeabi_dadd+0x17a>
 8000852:	4b6b      	ldr	r3, [pc, #428]	; (8000a00 <__aeabi_dadd+0x380>)
 8000854:	3601      	adds	r6, #1
 8000856:	429e      	cmp	r6, r3
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1dc>
 800085a:	e13a      	b.n	8000ad2 <__aeabi_dadd+0x452>
 800085c:	2001      	movs	r0, #1
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <__aeabi_dadd+0x384>)
 8000860:	401c      	ands	r4, r3
 8000862:	087b      	lsrs	r3, r7, #1
 8000864:	4007      	ands	r7, r0
 8000866:	431f      	orrs	r7, r3
 8000868:	07e0      	lsls	r0, r4, #31
 800086a:	4307      	orrs	r7, r0
 800086c:	0864      	lsrs	r4, r4, #1
 800086e:	e78b      	b.n	8000788 <__aeabi_dadd+0x108>
 8000870:	0023      	movs	r3, r4
 8000872:	433b      	orrs	r3, r7
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x1f8>
 8000876:	e1cb      	b.n	8000c10 <__aeabi_dadd+0x590>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0312      	lsls	r2, r2, #12
 800087c:	4314      	orrs	r4, r2
 800087e:	0324      	lsls	r4, r4, #12
 8000880:	0b24      	lsrs	r4, r4, #12
 8000882:	e79e      	b.n	80007c2 <__aeabi_dadd+0x142>
 8000884:	002e      	movs	r6, r5
 8000886:	e77f      	b.n	8000788 <__aeabi_dadd+0x108>
 8000888:	0008      	movs	r0, r1
 800088a:	4310      	orrs	r0, r2
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x210>
 800088e:	e0b4      	b.n	80009fa <__aeabi_dadd+0x37a>
 8000890:	1e58      	subs	r0, r3, #1
 8000892:	2800      	cmp	r0, #0
 8000894:	d000      	beq.n	8000898 <__aeabi_dadd+0x218>
 8000896:	e0de      	b.n	8000a56 <__aeabi_dadd+0x3d6>
 8000898:	18ba      	adds	r2, r7, r2
 800089a:	42ba      	cmp	r2, r7
 800089c:	419b      	sbcs	r3, r3
 800089e:	1864      	adds	r4, r4, r1
 80008a0:	425b      	negs	r3, r3
 80008a2:	18e4      	adds	r4, r4, r3
 80008a4:	0017      	movs	r7, r2
 80008a6:	2601      	movs	r6, #1
 80008a8:	0223      	lsls	r3, r4, #8
 80008aa:	d5a6      	bpl.n	80007fa <__aeabi_dadd+0x17a>
 80008ac:	2602      	movs	r6, #2
 80008ae:	e7d5      	b.n	800085c <__aeabi_dadd+0x1dc>
 80008b0:	2d00      	cmp	r5, #0
 80008b2:	d16e      	bne.n	8000992 <__aeabi_dadd+0x312>
 80008b4:	1c70      	adds	r0, r6, #1
 80008b6:	0540      	lsls	r0, r0, #21
 80008b8:	0d40      	lsrs	r0, r0, #21
 80008ba:	2801      	cmp	r0, #1
 80008bc:	dc00      	bgt.n	80008c0 <__aeabi_dadd+0x240>
 80008be:	e0f9      	b.n	8000ab4 <__aeabi_dadd+0x434>
 80008c0:	1ab8      	subs	r0, r7, r2
 80008c2:	4684      	mov	ip, r0
 80008c4:	4287      	cmp	r7, r0
 80008c6:	4180      	sbcs	r0, r0
 80008c8:	1ae5      	subs	r5, r4, r3
 80008ca:	4240      	negs	r0, r0
 80008cc:	1a2d      	subs	r5, r5, r0
 80008ce:	0228      	lsls	r0, r5, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x254>
 80008d2:	e089      	b.n	80009e8 <__aeabi_dadd+0x368>
 80008d4:	1bd7      	subs	r7, r2, r7
 80008d6:	42ba      	cmp	r2, r7
 80008d8:	4192      	sbcs	r2, r2
 80008da:	1b1c      	subs	r4, r3, r4
 80008dc:	4252      	negs	r2, r2
 80008de:	1aa5      	subs	r5, r4, r2
 80008e0:	46d8      	mov	r8, fp
 80008e2:	e729      	b.n	8000738 <__aeabi_dadd+0xb8>
 80008e4:	4645      	mov	r5, r8
 80008e6:	2400      	movs	r4, #0
 80008e8:	2700      	movs	r7, #0
 80008ea:	e76a      	b.n	80007c2 <__aeabi_dadd+0x142>
 80008ec:	4c45      	ldr	r4, [pc, #276]	; (8000a04 <__aeabi_dadd+0x384>)
 80008ee:	1af6      	subs	r6, r6, r3
 80008f0:	402c      	ands	r4, r5
 80008f2:	e749      	b.n	8000788 <__aeabi_dadd+0x108>
 80008f4:	003d      	movs	r5, r7
 80008f6:	3828      	subs	r0, #40	; 0x28
 80008f8:	4085      	lsls	r5, r0
 80008fa:	2700      	movs	r7, #0
 80008fc:	e72e      	b.n	800075c <__aeabi_dadd+0xdc>
 80008fe:	0038      	movs	r0, r7
 8000900:	f001 fc46 	bl	8002190 <__clzsi2>
 8000904:	3020      	adds	r0, #32
 8000906:	e71d      	b.n	8000744 <__aeabi_dadd+0xc4>
 8000908:	430a      	orrs	r2, r1
 800090a:	1e51      	subs	r1, r2, #1
 800090c:	418a      	sbcs	r2, r1
 800090e:	2100      	movs	r1, #0
 8000910:	e707      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000912:	2b00      	cmp	r3, #0
 8000914:	d000      	beq.n	8000918 <__aeabi_dadd+0x298>
 8000916:	e0f3      	b.n	8000b00 <__aeabi_dadd+0x480>
 8000918:	1c70      	adds	r0, r6, #1
 800091a:	0543      	lsls	r3, r0, #21
 800091c:	0d5b      	lsrs	r3, r3, #21
 800091e:	2b01      	cmp	r3, #1
 8000920:	dc00      	bgt.n	8000924 <__aeabi_dadd+0x2a4>
 8000922:	e0ad      	b.n	8000a80 <__aeabi_dadd+0x400>
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <__aeabi_dadd+0x380>)
 8000926:	4298      	cmp	r0, r3
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x2ac>
 800092a:	e0d1      	b.n	8000ad0 <__aeabi_dadd+0x450>
 800092c:	18ba      	adds	r2, r7, r2
 800092e:	42ba      	cmp	r2, r7
 8000930:	41bf      	sbcs	r7, r7
 8000932:	1864      	adds	r4, r4, r1
 8000934:	427f      	negs	r7, r7
 8000936:	19e4      	adds	r4, r4, r7
 8000938:	07e7      	lsls	r7, r4, #31
 800093a:	0852      	lsrs	r2, r2, #1
 800093c:	4317      	orrs	r7, r2
 800093e:	0864      	lsrs	r4, r4, #1
 8000940:	0006      	movs	r6, r0
 8000942:	e721      	b.n	8000788 <__aeabi_dadd+0x108>
 8000944:	482e      	ldr	r0, [pc, #184]	; (8000a00 <__aeabi_dadd+0x380>)
 8000946:	4285      	cmp	r5, r0
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x2cc>
 800094a:	e093      	b.n	8000a74 <__aeabi_dadd+0x3f4>
 800094c:	001d      	movs	r5, r3
 800094e:	e6d0      	b.n	80006f2 <__aeabi_dadd+0x72>
 8000950:	0029      	movs	r1, r5
 8000952:	3e1f      	subs	r6, #31
 8000954:	40f1      	lsrs	r1, r6
 8000956:	2b20      	cmp	r3, #32
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x2dc>
 800095a:	e08d      	b.n	8000a78 <__aeabi_dadd+0x3f8>
 800095c:	2240      	movs	r2, #64	; 0x40
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	409d      	lsls	r5, r3
 8000962:	432f      	orrs	r7, r5
 8000964:	1e7d      	subs	r5, r7, #1
 8000966:	41af      	sbcs	r7, r5
 8000968:	2400      	movs	r4, #0
 800096a:	430f      	orrs	r7, r1
 800096c:	2600      	movs	r6, #0
 800096e:	e744      	b.n	80007fa <__aeabi_dadd+0x17a>
 8000970:	002b      	movs	r3, r5
 8000972:	0008      	movs	r0, r1
 8000974:	3b20      	subs	r3, #32
 8000976:	40d8      	lsrs	r0, r3
 8000978:	0003      	movs	r3, r0
 800097a:	2d20      	cmp	r5, #32
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x300>
 800097e:	e07d      	b.n	8000a7c <__aeabi_dadd+0x3fc>
 8000980:	2040      	movs	r0, #64	; 0x40
 8000982:	1b45      	subs	r5, r0, r5
 8000984:	40a9      	lsls	r1, r5
 8000986:	430a      	orrs	r2, r1
 8000988:	1e51      	subs	r1, r2, #1
 800098a:	418a      	sbcs	r2, r1
 800098c:	2100      	movs	r1, #0
 800098e:	431a      	orrs	r2, r3
 8000990:	e6c7      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000992:	2e00      	cmp	r6, #0
 8000994:	d050      	beq.n	8000a38 <__aeabi_dadd+0x3b8>
 8000996:	4e1a      	ldr	r6, [pc, #104]	; (8000a00 <__aeabi_dadd+0x380>)
 8000998:	42b0      	cmp	r0, r6
 800099a:	d057      	beq.n	8000a4c <__aeabi_dadd+0x3cc>
 800099c:	2680      	movs	r6, #128	; 0x80
 800099e:	426b      	negs	r3, r5
 80009a0:	4699      	mov	r9, r3
 80009a2:	0436      	lsls	r6, r6, #16
 80009a4:	4334      	orrs	r4, r6
 80009a6:	464b      	mov	r3, r9
 80009a8:	2b38      	cmp	r3, #56	; 0x38
 80009aa:	dd00      	ble.n	80009ae <__aeabi_dadd+0x32e>
 80009ac:	e0d6      	b.n	8000b5c <__aeabi_dadd+0x4dc>
 80009ae:	2b1f      	cmp	r3, #31
 80009b0:	dd00      	ble.n	80009b4 <__aeabi_dadd+0x334>
 80009b2:	e135      	b.n	8000c20 <__aeabi_dadd+0x5a0>
 80009b4:	2620      	movs	r6, #32
 80009b6:	1af5      	subs	r5, r6, r3
 80009b8:	0026      	movs	r6, r4
 80009ba:	40ae      	lsls	r6, r5
 80009bc:	46b2      	mov	sl, r6
 80009be:	003e      	movs	r6, r7
 80009c0:	40de      	lsrs	r6, r3
 80009c2:	46ac      	mov	ip, r5
 80009c4:	0035      	movs	r5, r6
 80009c6:	4656      	mov	r6, sl
 80009c8:	432e      	orrs	r6, r5
 80009ca:	4665      	mov	r5, ip
 80009cc:	40af      	lsls	r7, r5
 80009ce:	1e7d      	subs	r5, r7, #1
 80009d0:	41af      	sbcs	r7, r5
 80009d2:	40dc      	lsrs	r4, r3
 80009d4:	4337      	orrs	r7, r6
 80009d6:	1bd7      	subs	r7, r2, r7
 80009d8:	42ba      	cmp	r2, r7
 80009da:	4192      	sbcs	r2, r2
 80009dc:	1b0c      	subs	r4, r1, r4
 80009de:	4252      	negs	r2, r2
 80009e0:	1aa4      	subs	r4, r4, r2
 80009e2:	0006      	movs	r6, r0
 80009e4:	46d8      	mov	r8, fp
 80009e6:	e6a3      	b.n	8000730 <__aeabi_dadd+0xb0>
 80009e8:	4664      	mov	r4, ip
 80009ea:	4667      	mov	r7, ip
 80009ec:	432c      	orrs	r4, r5
 80009ee:	d000      	beq.n	80009f2 <__aeabi_dadd+0x372>
 80009f0:	e6a2      	b.n	8000738 <__aeabi_dadd+0xb8>
 80009f2:	2500      	movs	r5, #0
 80009f4:	2600      	movs	r6, #0
 80009f6:	2700      	movs	r7, #0
 80009f8:	e706      	b.n	8000808 <__aeabi_dadd+0x188>
 80009fa:	001e      	movs	r6, r3
 80009fc:	e6c4      	b.n	8000788 <__aeabi_dadd+0x108>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	000007ff 	.word	0x000007ff
 8000a04:	ff7fffff 	.word	0xff7fffff
 8000a08:	800fffff 	.word	0x800fffff
 8000a0c:	2b1f      	cmp	r3, #31
 8000a0e:	dc63      	bgt.n	8000ad8 <__aeabi_dadd+0x458>
 8000a10:	2020      	movs	r0, #32
 8000a12:	1ac3      	subs	r3, r0, r3
 8000a14:	0008      	movs	r0, r1
 8000a16:	4098      	lsls	r0, r3
 8000a18:	469c      	mov	ip, r3
 8000a1a:	4683      	mov	fp, r0
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	0010      	movs	r0, r2
 8000a20:	40d8      	lsrs	r0, r3
 8000a22:	0003      	movs	r3, r0
 8000a24:	4658      	mov	r0, fp
 8000a26:	4318      	orrs	r0, r3
 8000a28:	4663      	mov	r3, ip
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	1e53      	subs	r3, r2, #1
 8000a2e:	419a      	sbcs	r2, r3
 8000a30:	4653      	mov	r3, sl
 8000a32:	4302      	orrs	r2, r0
 8000a34:	40d9      	lsrs	r1, r3
 8000a36:	e703      	b.n	8000840 <__aeabi_dadd+0x1c0>
 8000a38:	0026      	movs	r6, r4
 8000a3a:	433e      	orrs	r6, r7
 8000a3c:	d006      	beq.n	8000a4c <__aeabi_dadd+0x3cc>
 8000a3e:	43eb      	mvns	r3, r5
 8000a40:	4699      	mov	r9, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0c7      	beq.n	80009d6 <__aeabi_dadd+0x356>
 8000a46:	4e94      	ldr	r6, [pc, #592]	; (8000c98 <__aeabi_dadd+0x618>)
 8000a48:	42b0      	cmp	r0, r6
 8000a4a:	d1ac      	bne.n	80009a6 <__aeabi_dadd+0x326>
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	0017      	movs	r7, r2
 8000a50:	0006      	movs	r6, r0
 8000a52:	46d8      	mov	r8, fp
 8000a54:	e698      	b.n	8000788 <__aeabi_dadd+0x108>
 8000a56:	4b90      	ldr	r3, [pc, #576]	; (8000c98 <__aeabi_dadd+0x618>)
 8000a58:	459a      	cmp	sl, r3
 8000a5a:	d00b      	beq.n	8000a74 <__aeabi_dadd+0x3f4>
 8000a5c:	4682      	mov	sl, r0
 8000a5e:	e6e7      	b.n	8000830 <__aeabi_dadd+0x1b0>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d000      	beq.n	8000a66 <__aeabi_dadd+0x3e6>
 8000a64:	e09e      	b.n	8000ba4 <__aeabi_dadd+0x524>
 8000a66:	0018      	movs	r0, r3
 8000a68:	4310      	orrs	r0, r2
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dadd+0x3ee>
 8000a6c:	e0e9      	b.n	8000c42 <__aeabi_dadd+0x5c2>
 8000a6e:	001c      	movs	r4, r3
 8000a70:	0017      	movs	r7, r2
 8000a72:	46d8      	mov	r8, fp
 8000a74:	4e88      	ldr	r6, [pc, #544]	; (8000c98 <__aeabi_dadd+0x618>)
 8000a76:	e687      	b.n	8000788 <__aeabi_dadd+0x108>
 8000a78:	2500      	movs	r5, #0
 8000a7a:	e772      	b.n	8000962 <__aeabi_dadd+0x2e2>
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	e782      	b.n	8000986 <__aeabi_dadd+0x306>
 8000a80:	0023      	movs	r3, r4
 8000a82:	433b      	orrs	r3, r7
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_dadd+0x40a>
 8000a88:	e0ab      	b.n	8000be2 <__aeabi_dadd+0x562>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x410>
 8000a8e:	e0e7      	b.n	8000c60 <__aeabi_dadd+0x5e0>
 8000a90:	000b      	movs	r3, r1
 8000a92:	4313      	orrs	r3, r2
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x418>
 8000a96:	e677      	b.n	8000788 <__aeabi_dadd+0x108>
 8000a98:	18ba      	adds	r2, r7, r2
 8000a9a:	42ba      	cmp	r2, r7
 8000a9c:	41bf      	sbcs	r7, r7
 8000a9e:	1864      	adds	r4, r4, r1
 8000aa0:	427f      	negs	r7, r7
 8000aa2:	19e4      	adds	r4, r4, r7
 8000aa4:	0223      	lsls	r3, r4, #8
 8000aa6:	d400      	bmi.n	8000aaa <__aeabi_dadd+0x42a>
 8000aa8:	e0f2      	b.n	8000c90 <__aeabi_dadd+0x610>
 8000aaa:	4b7c      	ldr	r3, [pc, #496]	; (8000c9c <__aeabi_dadd+0x61c>)
 8000aac:	0017      	movs	r7, r2
 8000aae:	401c      	ands	r4, r3
 8000ab0:	0006      	movs	r6, r0
 8000ab2:	e669      	b.n	8000788 <__aeabi_dadd+0x108>
 8000ab4:	0020      	movs	r0, r4
 8000ab6:	4338      	orrs	r0, r7
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d1d1      	bne.n	8000a60 <__aeabi_dadd+0x3e0>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	d15b      	bne.n	8000b78 <__aeabi_dadd+0x4f8>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	4314      	orrs	r4, r2
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x448>
 8000ac6:	e0a8      	b.n	8000c1a <__aeabi_dadd+0x59a>
 8000ac8:	001c      	movs	r4, r3
 8000aca:	0017      	movs	r7, r2
 8000acc:	46d8      	mov	r8, fp
 8000ace:	e65b      	b.n	8000788 <__aeabi_dadd+0x108>
 8000ad0:	0006      	movs	r6, r0
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	e697      	b.n	8000808 <__aeabi_dadd+0x188>
 8000ad8:	4650      	mov	r0, sl
 8000ada:	000b      	movs	r3, r1
 8000adc:	3820      	subs	r0, #32
 8000ade:	40c3      	lsrs	r3, r0
 8000ae0:	4699      	mov	r9, r3
 8000ae2:	4653      	mov	r3, sl
 8000ae4:	2b20      	cmp	r3, #32
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dadd+0x46a>
 8000ae8:	e095      	b.n	8000c16 <__aeabi_dadd+0x596>
 8000aea:	2340      	movs	r3, #64	; 0x40
 8000aec:	4650      	mov	r0, sl
 8000aee:	1a1b      	subs	r3, r3, r0
 8000af0:	4099      	lsls	r1, r3
 8000af2:	430a      	orrs	r2, r1
 8000af4:	1e51      	subs	r1, r2, #1
 8000af6:	418a      	sbcs	r2, r1
 8000af8:	464b      	mov	r3, r9
 8000afa:	2100      	movs	r1, #0
 8000afc:	431a      	orrs	r2, r3
 8000afe:	e69f      	b.n	8000840 <__aeabi_dadd+0x1c0>
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d130      	bne.n	8000b66 <__aeabi_dadd+0x4e6>
 8000b04:	0026      	movs	r6, r4
 8000b06:	433e      	orrs	r6, r7
 8000b08:	d067      	beq.n	8000bda <__aeabi_dadd+0x55a>
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d01c      	beq.n	8000b4c <__aeabi_dadd+0x4cc>
 8000b12:	4e61      	ldr	r6, [pc, #388]	; (8000c98 <__aeabi_dadd+0x618>)
 8000b14:	42b0      	cmp	r0, r6
 8000b16:	d060      	beq.n	8000bda <__aeabi_dadd+0x55a>
 8000b18:	4653      	mov	r3, sl
 8000b1a:	2b38      	cmp	r3, #56	; 0x38
 8000b1c:	dd00      	ble.n	8000b20 <__aeabi_dadd+0x4a0>
 8000b1e:	e096      	b.n	8000c4e <__aeabi_dadd+0x5ce>
 8000b20:	2b1f      	cmp	r3, #31
 8000b22:	dd00      	ble.n	8000b26 <__aeabi_dadd+0x4a6>
 8000b24:	e09f      	b.n	8000c66 <__aeabi_dadd+0x5e6>
 8000b26:	2620      	movs	r6, #32
 8000b28:	1af3      	subs	r3, r6, r3
 8000b2a:	0026      	movs	r6, r4
 8000b2c:	409e      	lsls	r6, r3
 8000b2e:	469c      	mov	ip, r3
 8000b30:	46b3      	mov	fp, r6
 8000b32:	4653      	mov	r3, sl
 8000b34:	003e      	movs	r6, r7
 8000b36:	40de      	lsrs	r6, r3
 8000b38:	0033      	movs	r3, r6
 8000b3a:	465e      	mov	r6, fp
 8000b3c:	431e      	orrs	r6, r3
 8000b3e:	4663      	mov	r3, ip
 8000b40:	409f      	lsls	r7, r3
 8000b42:	1e7b      	subs	r3, r7, #1
 8000b44:	419f      	sbcs	r7, r3
 8000b46:	4653      	mov	r3, sl
 8000b48:	40dc      	lsrs	r4, r3
 8000b4a:	4337      	orrs	r7, r6
 8000b4c:	18bf      	adds	r7, r7, r2
 8000b4e:	4297      	cmp	r7, r2
 8000b50:	4192      	sbcs	r2, r2
 8000b52:	1864      	adds	r4, r4, r1
 8000b54:	4252      	negs	r2, r2
 8000b56:	18a4      	adds	r4, r4, r2
 8000b58:	0006      	movs	r6, r0
 8000b5a:	e678      	b.n	800084e <__aeabi_dadd+0x1ce>
 8000b5c:	4327      	orrs	r7, r4
 8000b5e:	1e7c      	subs	r4, r7, #1
 8000b60:	41a7      	sbcs	r7, r4
 8000b62:	2400      	movs	r4, #0
 8000b64:	e737      	b.n	80009d6 <__aeabi_dadd+0x356>
 8000b66:	4e4c      	ldr	r6, [pc, #304]	; (8000c98 <__aeabi_dadd+0x618>)
 8000b68:	42b0      	cmp	r0, r6
 8000b6a:	d036      	beq.n	8000bda <__aeabi_dadd+0x55a>
 8000b6c:	2680      	movs	r6, #128	; 0x80
 8000b6e:	425b      	negs	r3, r3
 8000b70:	0436      	lsls	r6, r6, #16
 8000b72:	469a      	mov	sl, r3
 8000b74:	4334      	orrs	r4, r6
 8000b76:	e7cf      	b.n	8000b18 <__aeabi_dadd+0x498>
 8000b78:	0018      	movs	r0, r3
 8000b7a:	4310      	orrs	r0, r2
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dadd+0x500>
 8000b7e:	e603      	b.n	8000788 <__aeabi_dadd+0x108>
 8000b80:	1ab8      	subs	r0, r7, r2
 8000b82:	4684      	mov	ip, r0
 8000b84:	4567      	cmp	r7, ip
 8000b86:	41ad      	sbcs	r5, r5
 8000b88:	1ae0      	subs	r0, r4, r3
 8000b8a:	426d      	negs	r5, r5
 8000b8c:	1b40      	subs	r0, r0, r5
 8000b8e:	0205      	lsls	r5, r0, #8
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_dadd+0x514>
 8000b92:	e62c      	b.n	80007ee <__aeabi_dadd+0x16e>
 8000b94:	1bd7      	subs	r7, r2, r7
 8000b96:	42ba      	cmp	r2, r7
 8000b98:	4192      	sbcs	r2, r2
 8000b9a:	1b1c      	subs	r4, r3, r4
 8000b9c:	4252      	negs	r2, r2
 8000b9e:	1aa4      	subs	r4, r4, r2
 8000ba0:	46d8      	mov	r8, fp
 8000ba2:	e5f1      	b.n	8000788 <__aeabi_dadd+0x108>
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	4310      	orrs	r0, r2
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x52c>
 8000baa:	e763      	b.n	8000a74 <__aeabi_dadd+0x3f4>
 8000bac:	08f8      	lsrs	r0, r7, #3
 8000bae:	0767      	lsls	r7, r4, #29
 8000bb0:	4307      	orrs	r7, r0
 8000bb2:	2080      	movs	r0, #128	; 0x80
 8000bb4:	08e4      	lsrs	r4, r4, #3
 8000bb6:	0300      	lsls	r0, r0, #12
 8000bb8:	4204      	tst	r4, r0
 8000bba:	d008      	beq.n	8000bce <__aeabi_dadd+0x54e>
 8000bbc:	08dd      	lsrs	r5, r3, #3
 8000bbe:	4205      	tst	r5, r0
 8000bc0:	d105      	bne.n	8000bce <__aeabi_dadd+0x54e>
 8000bc2:	08d2      	lsrs	r2, r2, #3
 8000bc4:	0759      	lsls	r1, r3, #29
 8000bc6:	4311      	orrs	r1, r2
 8000bc8:	000f      	movs	r7, r1
 8000bca:	002c      	movs	r4, r5
 8000bcc:	46d8      	mov	r8, fp
 8000bce:	0f7b      	lsrs	r3, r7, #29
 8000bd0:	00e4      	lsls	r4, r4, #3
 8000bd2:	431c      	orrs	r4, r3
 8000bd4:	00ff      	lsls	r7, r7, #3
 8000bd6:	4e30      	ldr	r6, [pc, #192]	; (8000c98 <__aeabi_dadd+0x618>)
 8000bd8:	e5d6      	b.n	8000788 <__aeabi_dadd+0x108>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	0017      	movs	r7, r2
 8000bde:	0006      	movs	r6, r0
 8000be0:	e5d2      	b.n	8000788 <__aeabi_dadd+0x108>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d038      	beq.n	8000c58 <__aeabi_dadd+0x5d8>
 8000be6:	000b      	movs	r3, r1
 8000be8:	4313      	orrs	r3, r2
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x56e>
 8000bec:	e742      	b.n	8000a74 <__aeabi_dadd+0x3f4>
 8000bee:	08f8      	lsrs	r0, r7, #3
 8000bf0:	0767      	lsls	r7, r4, #29
 8000bf2:	4307      	orrs	r7, r0
 8000bf4:	2080      	movs	r0, #128	; 0x80
 8000bf6:	08e4      	lsrs	r4, r4, #3
 8000bf8:	0300      	lsls	r0, r0, #12
 8000bfa:	4204      	tst	r4, r0
 8000bfc:	d0e7      	beq.n	8000bce <__aeabi_dadd+0x54e>
 8000bfe:	08cb      	lsrs	r3, r1, #3
 8000c00:	4203      	tst	r3, r0
 8000c02:	d1e4      	bne.n	8000bce <__aeabi_dadd+0x54e>
 8000c04:	08d2      	lsrs	r2, r2, #3
 8000c06:	0749      	lsls	r1, r1, #29
 8000c08:	4311      	orrs	r1, r2
 8000c0a:	000f      	movs	r7, r1
 8000c0c:	001c      	movs	r4, r3
 8000c0e:	e7de      	b.n	8000bce <__aeabi_dadd+0x54e>
 8000c10:	2700      	movs	r7, #0
 8000c12:	2400      	movs	r4, #0
 8000c14:	e5d5      	b.n	80007c2 <__aeabi_dadd+0x142>
 8000c16:	2100      	movs	r1, #0
 8000c18:	e76b      	b.n	8000af2 <__aeabi_dadd+0x472>
 8000c1a:	2500      	movs	r5, #0
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	e5f3      	b.n	8000808 <__aeabi_dadd+0x188>
 8000c20:	464e      	mov	r6, r9
 8000c22:	0025      	movs	r5, r4
 8000c24:	3e20      	subs	r6, #32
 8000c26:	40f5      	lsrs	r5, r6
 8000c28:	464b      	mov	r3, r9
 8000c2a:	002e      	movs	r6, r5
 8000c2c:	2b20      	cmp	r3, #32
 8000c2e:	d02d      	beq.n	8000c8c <__aeabi_dadd+0x60c>
 8000c30:	2540      	movs	r5, #64	; 0x40
 8000c32:	1aed      	subs	r5, r5, r3
 8000c34:	40ac      	lsls	r4, r5
 8000c36:	4327      	orrs	r7, r4
 8000c38:	1e7c      	subs	r4, r7, #1
 8000c3a:	41a7      	sbcs	r7, r4
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	4337      	orrs	r7, r6
 8000c40:	e6c9      	b.n	80009d6 <__aeabi_dadd+0x356>
 8000c42:	2480      	movs	r4, #128	; 0x80
 8000c44:	2500      	movs	r5, #0
 8000c46:	0324      	lsls	r4, r4, #12
 8000c48:	4e13      	ldr	r6, [pc, #76]	; (8000c98 <__aeabi_dadd+0x618>)
 8000c4a:	2700      	movs	r7, #0
 8000c4c:	e5dc      	b.n	8000808 <__aeabi_dadd+0x188>
 8000c4e:	4327      	orrs	r7, r4
 8000c50:	1e7c      	subs	r4, r7, #1
 8000c52:	41a7      	sbcs	r7, r4
 8000c54:	2400      	movs	r4, #0
 8000c56:	e779      	b.n	8000b4c <__aeabi_dadd+0x4cc>
 8000c58:	000c      	movs	r4, r1
 8000c5a:	0017      	movs	r7, r2
 8000c5c:	4e0e      	ldr	r6, [pc, #56]	; (8000c98 <__aeabi_dadd+0x618>)
 8000c5e:	e593      	b.n	8000788 <__aeabi_dadd+0x108>
 8000c60:	000c      	movs	r4, r1
 8000c62:	0017      	movs	r7, r2
 8000c64:	e590      	b.n	8000788 <__aeabi_dadd+0x108>
 8000c66:	4656      	mov	r6, sl
 8000c68:	0023      	movs	r3, r4
 8000c6a:	3e20      	subs	r6, #32
 8000c6c:	40f3      	lsrs	r3, r6
 8000c6e:	4699      	mov	r9, r3
 8000c70:	4653      	mov	r3, sl
 8000c72:	2b20      	cmp	r3, #32
 8000c74:	d00e      	beq.n	8000c94 <__aeabi_dadd+0x614>
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	4656      	mov	r6, sl
 8000c7a:	1b9b      	subs	r3, r3, r6
 8000c7c:	409c      	lsls	r4, r3
 8000c7e:	4327      	orrs	r7, r4
 8000c80:	1e7c      	subs	r4, r7, #1
 8000c82:	41a7      	sbcs	r7, r4
 8000c84:	464b      	mov	r3, r9
 8000c86:	2400      	movs	r4, #0
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e75f      	b.n	8000b4c <__aeabi_dadd+0x4cc>
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	e7d2      	b.n	8000c36 <__aeabi_dadd+0x5b6>
 8000c90:	0017      	movs	r7, r2
 8000c92:	e5b2      	b.n	80007fa <__aeabi_dadd+0x17a>
 8000c94:	2400      	movs	r4, #0
 8000c96:	e7f2      	b.n	8000c7e <__aeabi_dadd+0x5fe>
 8000c98:	000007ff 	.word	0x000007ff
 8000c9c:	ff7fffff 	.word	0xff7fffff

08000ca0 <__aeabi_ddiv>:
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca2:	4657      	mov	r7, sl
 8000ca4:	4645      	mov	r5, r8
 8000ca6:	46de      	mov	lr, fp
 8000ca8:	464e      	mov	r6, r9
 8000caa:	b5e0      	push	{r5, r6, r7, lr}
 8000cac:	004c      	lsls	r4, r1, #1
 8000cae:	030e      	lsls	r6, r1, #12
 8000cb0:	b087      	sub	sp, #28
 8000cb2:	4683      	mov	fp, r0
 8000cb4:	4692      	mov	sl, r2
 8000cb6:	001d      	movs	r5, r3
 8000cb8:	4680      	mov	r8, r0
 8000cba:	0b36      	lsrs	r6, r6, #12
 8000cbc:	0d64      	lsrs	r4, r4, #21
 8000cbe:	0fcf      	lsrs	r7, r1, #31
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d04f      	beq.n	8000d64 <__aeabi_ddiv+0xc4>
 8000cc4:	4b6f      	ldr	r3, [pc, #444]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000cc6:	429c      	cmp	r4, r3
 8000cc8:	d035      	beq.n	8000d36 <__aeabi_ddiv+0x96>
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	0f42      	lsrs	r2, r0, #29
 8000cce:	041b      	lsls	r3, r3, #16
 8000cd0:	00f6      	lsls	r6, r6, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	4333      	orrs	r3, r6
 8000cd6:	4699      	mov	r9, r3
 8000cd8:	00c3      	lsls	r3, r0, #3
 8000cda:	4698      	mov	r8, r3
 8000cdc:	4b6a      	ldr	r3, [pc, #424]	; (8000e88 <__aeabi_ddiv+0x1e8>)
 8000cde:	2600      	movs	r6, #0
 8000ce0:	469c      	mov	ip, r3
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	4464      	add	r4, ip
 8000ce6:	9303      	str	r3, [sp, #12]
 8000ce8:	032b      	lsls	r3, r5, #12
 8000cea:	0b1b      	lsrs	r3, r3, #12
 8000cec:	469b      	mov	fp, r3
 8000cee:	006b      	lsls	r3, r5, #1
 8000cf0:	0fed      	lsrs	r5, r5, #31
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	0d5b      	lsrs	r3, r3, #21
 8000cf6:	9501      	str	r5, [sp, #4]
 8000cf8:	d05e      	beq.n	8000db8 <__aeabi_ddiv+0x118>
 8000cfa:	4a62      	ldr	r2, [pc, #392]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d053      	beq.n	8000da8 <__aeabi_ddiv+0x108>
 8000d00:	465a      	mov	r2, fp
 8000d02:	00d1      	lsls	r1, r2, #3
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	0f40      	lsrs	r0, r0, #29
 8000d08:	0412      	lsls	r2, r2, #16
 8000d0a:	4302      	orrs	r2, r0
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	4693      	mov	fp, r2
 8000d10:	4652      	mov	r2, sl
 8000d12:	00d1      	lsls	r1, r2, #3
 8000d14:	4a5c      	ldr	r2, [pc, #368]	; (8000e88 <__aeabi_ddiv+0x1e8>)
 8000d16:	4694      	mov	ip, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4463      	add	r3, ip
 8000d1c:	0038      	movs	r0, r7
 8000d1e:	4068      	eors	r0, r5
 8000d20:	4684      	mov	ip, r0
 8000d22:	9002      	str	r0, [sp, #8]
 8000d24:	1ae4      	subs	r4, r4, r3
 8000d26:	4316      	orrs	r6, r2
 8000d28:	2e0f      	cmp	r6, #15
 8000d2a:	d900      	bls.n	8000d2e <__aeabi_ddiv+0x8e>
 8000d2c:	e0b4      	b.n	8000e98 <__aeabi_ddiv+0x1f8>
 8000d2e:	4b57      	ldr	r3, [pc, #348]	; (8000e8c <__aeabi_ddiv+0x1ec>)
 8000d30:	00b6      	lsls	r6, r6, #2
 8000d32:	599b      	ldr	r3, [r3, r6]
 8000d34:	469f      	mov	pc, r3
 8000d36:	0003      	movs	r3, r0
 8000d38:	4333      	orrs	r3, r6
 8000d3a:	4699      	mov	r9, r3
 8000d3c:	d16c      	bne.n	8000e18 <__aeabi_ddiv+0x178>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	4698      	mov	r8, r3
 8000d42:	3302      	adds	r3, #2
 8000d44:	2608      	movs	r6, #8
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	e7ce      	b.n	8000ce8 <__aeabi_ddiv+0x48>
 8000d4a:	46cb      	mov	fp, r9
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	9a03      	ldr	r2, [sp, #12]
 8000d50:	9701      	str	r7, [sp, #4]
 8000d52:	2a02      	cmp	r2, #2
 8000d54:	d165      	bne.n	8000e22 <__aeabi_ddiv+0x182>
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	4c4a      	ldr	r4, [pc, #296]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000d5a:	469c      	mov	ip, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4698      	mov	r8, r3
 8000d62:	e06b      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 8000d64:	0003      	movs	r3, r0
 8000d66:	4333      	orrs	r3, r6
 8000d68:	4699      	mov	r9, r3
 8000d6a:	d04e      	beq.n	8000e0a <__aeabi_ddiv+0x16a>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_ddiv+0xd2>
 8000d70:	e1bc      	b.n	80010ec <__aeabi_ddiv+0x44c>
 8000d72:	0030      	movs	r0, r6
 8000d74:	f001 fa0c 	bl	8002190 <__clzsi2>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	3b0b      	subs	r3, #11
 8000d7c:	2b1c      	cmp	r3, #28
 8000d7e:	dd00      	ble.n	8000d82 <__aeabi_ddiv+0xe2>
 8000d80:	e1ac      	b.n	80010dc <__aeabi_ddiv+0x43c>
 8000d82:	221d      	movs	r2, #29
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	465a      	mov	r2, fp
 8000d88:	0001      	movs	r1, r0
 8000d8a:	40da      	lsrs	r2, r3
 8000d8c:	3908      	subs	r1, #8
 8000d8e:	408e      	lsls	r6, r1
 8000d90:	0013      	movs	r3, r2
 8000d92:	4333      	orrs	r3, r6
 8000d94:	4699      	mov	r9, r3
 8000d96:	465b      	mov	r3, fp
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	4698      	mov	r8, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4c3c      	ldr	r4, [pc, #240]	; (8000e90 <__aeabi_ddiv+0x1f0>)
 8000da0:	2600      	movs	r6, #0
 8000da2:	1a24      	subs	r4, r4, r0
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	e79f      	b.n	8000ce8 <__aeabi_ddiv+0x48>
 8000da8:	4651      	mov	r1, sl
 8000daa:	465a      	mov	r2, fp
 8000dac:	4311      	orrs	r1, r2
 8000dae:	d129      	bne.n	8000e04 <__aeabi_ddiv+0x164>
 8000db0:	2200      	movs	r2, #0
 8000db2:	4693      	mov	fp, r2
 8000db4:	3202      	adds	r2, #2
 8000db6:	e7b1      	b.n	8000d1c <__aeabi_ddiv+0x7c>
 8000db8:	4659      	mov	r1, fp
 8000dba:	4301      	orrs	r1, r0
 8000dbc:	d01e      	beq.n	8000dfc <__aeabi_ddiv+0x15c>
 8000dbe:	465b      	mov	r3, fp
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x126>
 8000dc4:	e19e      	b.n	8001104 <__aeabi_ddiv+0x464>
 8000dc6:	4658      	mov	r0, fp
 8000dc8:	f001 f9e2 	bl	8002190 <__clzsi2>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	3b0b      	subs	r3, #11
 8000dd0:	2b1c      	cmp	r3, #28
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_ddiv+0x136>
 8000dd4:	e18f      	b.n	80010f6 <__aeabi_ddiv+0x456>
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	4659      	mov	r1, fp
 8000dda:	3a08      	subs	r2, #8
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	468b      	mov	fp, r1
 8000de0:	211d      	movs	r1, #29
 8000de2:	1acb      	subs	r3, r1, r3
 8000de4:	4651      	mov	r1, sl
 8000de6:	40d9      	lsrs	r1, r3
 8000de8:	000b      	movs	r3, r1
 8000dea:	4659      	mov	r1, fp
 8000dec:	430b      	orrs	r3, r1
 8000dee:	4651      	mov	r1, sl
 8000df0:	469b      	mov	fp, r3
 8000df2:	4091      	lsls	r1, r2
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <__aeabi_ddiv+0x1f0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	1a1b      	subs	r3, r3, r0
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_ddiv+0x7c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2201      	movs	r2, #1
 8000e00:	469b      	mov	fp, r3
 8000e02:	e78b      	b.n	8000d1c <__aeabi_ddiv+0x7c>
 8000e04:	4651      	mov	r1, sl
 8000e06:	2203      	movs	r2, #3
 8000e08:	e788      	b.n	8000d1c <__aeabi_ddiv+0x7c>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4698      	mov	r8, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	2604      	movs	r6, #4
 8000e12:	2400      	movs	r4, #0
 8000e14:	9303      	str	r3, [sp, #12]
 8000e16:	e767      	b.n	8000ce8 <__aeabi_ddiv+0x48>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	46b1      	mov	r9, r6
 8000e1c:	9303      	str	r3, [sp, #12]
 8000e1e:	260c      	movs	r6, #12
 8000e20:	e762      	b.n	8000ce8 <__aeabi_ddiv+0x48>
 8000e22:	2a03      	cmp	r2, #3
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x188>
 8000e26:	e25c      	b.n	80012e2 <__aeabi_ddiv+0x642>
 8000e28:	9b01      	ldr	r3, [sp, #4]
 8000e2a:	2a01      	cmp	r2, #1
 8000e2c:	d000      	beq.n	8000e30 <__aeabi_ddiv+0x190>
 8000e2e:	e1e4      	b.n	80011fa <__aeabi_ddiv+0x55a>
 8000e30:	4013      	ands	r3, r2
 8000e32:	469c      	mov	ip, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	2400      	movs	r4, #0
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	0312      	lsls	r2, r2, #12
 8000e40:	0b13      	lsrs	r3, r2, #12
 8000e42:	0d0a      	lsrs	r2, r1, #20
 8000e44:	0512      	lsls	r2, r2, #20
 8000e46:	431a      	orrs	r2, r3
 8000e48:	0523      	lsls	r3, r4, #20
 8000e4a:	4c12      	ldr	r4, [pc, #72]	; (8000e94 <__aeabi_ddiv+0x1f4>)
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	4022      	ands	r2, r4
 8000e50:	4313      	orrs	r3, r2
 8000e52:	4662      	mov	r2, ip
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	07d2      	lsls	r2, r2, #31
 8000e58:	085b      	lsrs	r3, r3, #1
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	b007      	add	sp, #28
 8000e60:	bc3c      	pop	{r2, r3, r4, r5}
 8000e62:	4690      	mov	r8, r2
 8000e64:	4699      	mov	r9, r3
 8000e66:	46a2      	mov	sl, r4
 8000e68:	46ab      	mov	fp, r5
 8000e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	469c      	mov	ip, r3
 8000e72:	0312      	lsls	r2, r2, #12
 8000e74:	4698      	mov	r8, r3
 8000e76:	4c03      	ldr	r4, [pc, #12]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000e78:	e7e0      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	4c01      	ldr	r4, [pc, #4]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4698      	mov	r8, r3
 8000e82:	e7db      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 8000e84:	000007ff 	.word	0x000007ff
 8000e88:	fffffc01 	.word	0xfffffc01
 8000e8c:	08007f6c 	.word	0x08007f6c
 8000e90:	fffffc0d 	.word	0xfffffc0d
 8000e94:	800fffff 	.word	0x800fffff
 8000e98:	45d9      	cmp	r9, fp
 8000e9a:	d900      	bls.n	8000e9e <__aeabi_ddiv+0x1fe>
 8000e9c:	e139      	b.n	8001112 <__aeabi_ddiv+0x472>
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x202>
 8000ea0:	e134      	b.n	800110c <__aeabi_ddiv+0x46c>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	4646      	mov	r6, r8
 8000ea6:	464d      	mov	r5, r9
 8000ea8:	469a      	mov	sl, r3
 8000eaa:	3c01      	subs	r4, #1
 8000eac:	465b      	mov	r3, fp
 8000eae:	0e0a      	lsrs	r2, r1, #24
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	020b      	lsls	r3, r1, #8
 8000eb6:	0c17      	lsrs	r7, r2, #16
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	0413      	lsls	r3, r2, #16
 8000ebc:	0c1b      	lsrs	r3, r3, #16
 8000ebe:	0039      	movs	r1, r7
 8000ec0:	0028      	movs	r0, r5
 8000ec2:	4690      	mov	r8, r2
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	f7ff f929 	bl	800011c <__udivsi3>
 8000eca:	0002      	movs	r2, r0
 8000ecc:	9b01      	ldr	r3, [sp, #4]
 8000ece:	4683      	mov	fp, r0
 8000ed0:	435a      	muls	r2, r3
 8000ed2:	0028      	movs	r0, r5
 8000ed4:	0039      	movs	r1, r7
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	f7ff f9a6 	bl	8000228 <__aeabi_uidivmod>
 8000edc:	0c35      	lsrs	r5, r6, #16
 8000ede:	0409      	lsls	r1, r1, #16
 8000ee0:	430d      	orrs	r5, r1
 8000ee2:	45a9      	cmp	r9, r5
 8000ee4:	d90d      	bls.n	8000f02 <__aeabi_ddiv+0x262>
 8000ee6:	465b      	mov	r3, fp
 8000ee8:	4445      	add	r5, r8
 8000eea:	3b01      	subs	r3, #1
 8000eec:	45a8      	cmp	r8, r5
 8000eee:	d900      	bls.n	8000ef2 <__aeabi_ddiv+0x252>
 8000ef0:	e13a      	b.n	8001168 <__aeabi_ddiv+0x4c8>
 8000ef2:	45a9      	cmp	r9, r5
 8000ef4:	d800      	bhi.n	8000ef8 <__aeabi_ddiv+0x258>
 8000ef6:	e137      	b.n	8001168 <__aeabi_ddiv+0x4c8>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	425b      	negs	r3, r3
 8000efc:	469c      	mov	ip, r3
 8000efe:	4445      	add	r5, r8
 8000f00:	44e3      	add	fp, ip
 8000f02:	464b      	mov	r3, r9
 8000f04:	1aeb      	subs	r3, r5, r3
 8000f06:	0039      	movs	r1, r7
 8000f08:	0018      	movs	r0, r3
 8000f0a:	9304      	str	r3, [sp, #16]
 8000f0c:	f7ff f906 	bl	800011c <__udivsi3>
 8000f10:	9b01      	ldr	r3, [sp, #4]
 8000f12:	0005      	movs	r5, r0
 8000f14:	4343      	muls	r3, r0
 8000f16:	0039      	movs	r1, r7
 8000f18:	9804      	ldr	r0, [sp, #16]
 8000f1a:	4699      	mov	r9, r3
 8000f1c:	f7ff f984 	bl	8000228 <__aeabi_uidivmod>
 8000f20:	0433      	lsls	r3, r6, #16
 8000f22:	0409      	lsls	r1, r1, #16
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	430b      	orrs	r3, r1
 8000f28:	4599      	cmp	r9, r3
 8000f2a:	d909      	bls.n	8000f40 <__aeabi_ddiv+0x2a0>
 8000f2c:	4443      	add	r3, r8
 8000f2e:	1e6a      	subs	r2, r5, #1
 8000f30:	4598      	cmp	r8, r3
 8000f32:	d900      	bls.n	8000f36 <__aeabi_ddiv+0x296>
 8000f34:	e11a      	b.n	800116c <__aeabi_ddiv+0x4cc>
 8000f36:	4599      	cmp	r9, r3
 8000f38:	d800      	bhi.n	8000f3c <__aeabi_ddiv+0x29c>
 8000f3a:	e117      	b.n	800116c <__aeabi_ddiv+0x4cc>
 8000f3c:	3d02      	subs	r5, #2
 8000f3e:	4443      	add	r3, r8
 8000f40:	464a      	mov	r2, r9
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	465a      	mov	r2, fp
 8000f46:	0412      	lsls	r2, r2, #16
 8000f48:	432a      	orrs	r2, r5
 8000f4a:	9903      	ldr	r1, [sp, #12]
 8000f4c:	4693      	mov	fp, r2
 8000f4e:	0c10      	lsrs	r0, r2, #16
 8000f50:	0c0a      	lsrs	r2, r1, #16
 8000f52:	4691      	mov	r9, r2
 8000f54:	0409      	lsls	r1, r1, #16
 8000f56:	465a      	mov	r2, fp
 8000f58:	0c09      	lsrs	r1, r1, #16
 8000f5a:	464e      	mov	r6, r9
 8000f5c:	000d      	movs	r5, r1
 8000f5e:	0412      	lsls	r2, r2, #16
 8000f60:	0c12      	lsrs	r2, r2, #16
 8000f62:	4345      	muls	r5, r0
 8000f64:	9105      	str	r1, [sp, #20]
 8000f66:	4351      	muls	r1, r2
 8000f68:	4372      	muls	r2, r6
 8000f6a:	4370      	muls	r0, r6
 8000f6c:	1952      	adds	r2, r2, r5
 8000f6e:	0c0e      	lsrs	r6, r1, #16
 8000f70:	18b2      	adds	r2, r6, r2
 8000f72:	4295      	cmp	r5, r2
 8000f74:	d903      	bls.n	8000f7e <__aeabi_ddiv+0x2de>
 8000f76:	2580      	movs	r5, #128	; 0x80
 8000f78:	026d      	lsls	r5, r5, #9
 8000f7a:	46ac      	mov	ip, r5
 8000f7c:	4460      	add	r0, ip
 8000f7e:	0c15      	lsrs	r5, r2, #16
 8000f80:	0409      	lsls	r1, r1, #16
 8000f82:	0412      	lsls	r2, r2, #16
 8000f84:	0c09      	lsrs	r1, r1, #16
 8000f86:	1828      	adds	r0, r5, r0
 8000f88:	1852      	adds	r2, r2, r1
 8000f8a:	4283      	cmp	r3, r0
 8000f8c:	d200      	bcs.n	8000f90 <__aeabi_ddiv+0x2f0>
 8000f8e:	e0ce      	b.n	800112e <__aeabi_ddiv+0x48e>
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x2f4>
 8000f92:	e0c8      	b.n	8001126 <__aeabi_ddiv+0x486>
 8000f94:	1a1d      	subs	r5, r3, r0
 8000f96:	4653      	mov	r3, sl
 8000f98:	1a9e      	subs	r6, r3, r2
 8000f9a:	45b2      	cmp	sl, r6
 8000f9c:	4192      	sbcs	r2, r2
 8000f9e:	4252      	negs	r2, r2
 8000fa0:	1aab      	subs	r3, r5, r2
 8000fa2:	469a      	mov	sl, r3
 8000fa4:	4598      	cmp	r8, r3
 8000fa6:	d100      	bne.n	8000faa <__aeabi_ddiv+0x30a>
 8000fa8:	e117      	b.n	80011da <__aeabi_ddiv+0x53a>
 8000faa:	0039      	movs	r1, r7
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff f8b5 	bl	800011c <__udivsi3>
 8000fb2:	9b01      	ldr	r3, [sp, #4]
 8000fb4:	0005      	movs	r5, r0
 8000fb6:	4343      	muls	r3, r0
 8000fb8:	0039      	movs	r1, r7
 8000fba:	4650      	mov	r0, sl
 8000fbc:	9304      	str	r3, [sp, #16]
 8000fbe:	f7ff f933 	bl	8000228 <__aeabi_uidivmod>
 8000fc2:	9804      	ldr	r0, [sp, #16]
 8000fc4:	040b      	lsls	r3, r1, #16
 8000fc6:	0c31      	lsrs	r1, r6, #16
 8000fc8:	4319      	orrs	r1, r3
 8000fca:	4288      	cmp	r0, r1
 8000fcc:	d909      	bls.n	8000fe2 <__aeabi_ddiv+0x342>
 8000fce:	4441      	add	r1, r8
 8000fd0:	1e6b      	subs	r3, r5, #1
 8000fd2:	4588      	cmp	r8, r1
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x338>
 8000fd6:	e107      	b.n	80011e8 <__aeabi_ddiv+0x548>
 8000fd8:	4288      	cmp	r0, r1
 8000fda:	d800      	bhi.n	8000fde <__aeabi_ddiv+0x33e>
 8000fdc:	e104      	b.n	80011e8 <__aeabi_ddiv+0x548>
 8000fde:	3d02      	subs	r5, #2
 8000fe0:	4441      	add	r1, r8
 8000fe2:	9b04      	ldr	r3, [sp, #16]
 8000fe4:	1acb      	subs	r3, r1, r3
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	0039      	movs	r1, r7
 8000fea:	9304      	str	r3, [sp, #16]
 8000fec:	f7ff f896 	bl	800011c <__udivsi3>
 8000ff0:	9b01      	ldr	r3, [sp, #4]
 8000ff2:	4682      	mov	sl, r0
 8000ff4:	4343      	muls	r3, r0
 8000ff6:	0039      	movs	r1, r7
 8000ff8:	9804      	ldr	r0, [sp, #16]
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f7ff f914 	bl	8000228 <__aeabi_uidivmod>
 8001000:	9801      	ldr	r0, [sp, #4]
 8001002:	040b      	lsls	r3, r1, #16
 8001004:	0431      	lsls	r1, r6, #16
 8001006:	0c09      	lsrs	r1, r1, #16
 8001008:	4319      	orrs	r1, r3
 800100a:	4288      	cmp	r0, r1
 800100c:	d90d      	bls.n	800102a <__aeabi_ddiv+0x38a>
 800100e:	4653      	mov	r3, sl
 8001010:	4441      	add	r1, r8
 8001012:	3b01      	subs	r3, #1
 8001014:	4588      	cmp	r8, r1
 8001016:	d900      	bls.n	800101a <__aeabi_ddiv+0x37a>
 8001018:	e0e8      	b.n	80011ec <__aeabi_ddiv+0x54c>
 800101a:	4288      	cmp	r0, r1
 800101c:	d800      	bhi.n	8001020 <__aeabi_ddiv+0x380>
 800101e:	e0e5      	b.n	80011ec <__aeabi_ddiv+0x54c>
 8001020:	2302      	movs	r3, #2
 8001022:	425b      	negs	r3, r3
 8001024:	469c      	mov	ip, r3
 8001026:	4441      	add	r1, r8
 8001028:	44e2      	add	sl, ip
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	042d      	lsls	r5, r5, #16
 800102e:	1ace      	subs	r6, r1, r3
 8001030:	4651      	mov	r1, sl
 8001032:	4329      	orrs	r1, r5
 8001034:	9d05      	ldr	r5, [sp, #20]
 8001036:	464f      	mov	r7, r9
 8001038:	002a      	movs	r2, r5
 800103a:	040b      	lsls	r3, r1, #16
 800103c:	0c08      	lsrs	r0, r1, #16
 800103e:	0c1b      	lsrs	r3, r3, #16
 8001040:	435a      	muls	r2, r3
 8001042:	4345      	muls	r5, r0
 8001044:	437b      	muls	r3, r7
 8001046:	4378      	muls	r0, r7
 8001048:	195b      	adds	r3, r3, r5
 800104a:	0c17      	lsrs	r7, r2, #16
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	429d      	cmp	r5, r3
 8001050:	d903      	bls.n	800105a <__aeabi_ddiv+0x3ba>
 8001052:	2580      	movs	r5, #128	; 0x80
 8001054:	026d      	lsls	r5, r5, #9
 8001056:	46ac      	mov	ip, r5
 8001058:	4460      	add	r0, ip
 800105a:	0c1d      	lsrs	r5, r3, #16
 800105c:	0412      	lsls	r2, r2, #16
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	0c12      	lsrs	r2, r2, #16
 8001062:	1828      	adds	r0, r5, r0
 8001064:	189b      	adds	r3, r3, r2
 8001066:	4286      	cmp	r6, r0
 8001068:	d200      	bcs.n	800106c <__aeabi_ddiv+0x3cc>
 800106a:	e093      	b.n	8001194 <__aeabi_ddiv+0x4f4>
 800106c:	d100      	bne.n	8001070 <__aeabi_ddiv+0x3d0>
 800106e:	e08e      	b.n	800118e <__aeabi_ddiv+0x4ee>
 8001070:	2301      	movs	r3, #1
 8001072:	4319      	orrs	r1, r3
 8001074:	4ba0      	ldr	r3, [pc, #640]	; (80012f8 <__aeabi_ddiv+0x658>)
 8001076:	18e3      	adds	r3, r4, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	dc00      	bgt.n	800107e <__aeabi_ddiv+0x3de>
 800107c:	e099      	b.n	80011b2 <__aeabi_ddiv+0x512>
 800107e:	074a      	lsls	r2, r1, #29
 8001080:	d000      	beq.n	8001084 <__aeabi_ddiv+0x3e4>
 8001082:	e09e      	b.n	80011c2 <__aeabi_ddiv+0x522>
 8001084:	465a      	mov	r2, fp
 8001086:	01d2      	lsls	r2, r2, #7
 8001088:	d506      	bpl.n	8001098 <__aeabi_ddiv+0x3f8>
 800108a:	465a      	mov	r2, fp
 800108c:	4b9b      	ldr	r3, [pc, #620]	; (80012fc <__aeabi_ddiv+0x65c>)
 800108e:	401a      	ands	r2, r3
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	4693      	mov	fp, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	18e3      	adds	r3, r4, r3
 8001098:	4a99      	ldr	r2, [pc, #612]	; (8001300 <__aeabi_ddiv+0x660>)
 800109a:	4293      	cmp	r3, r2
 800109c:	dd68      	ble.n	8001170 <__aeabi_ddiv+0x4d0>
 800109e:	2301      	movs	r3, #1
 80010a0:	9a02      	ldr	r2, [sp, #8]
 80010a2:	4c98      	ldr	r4, [pc, #608]	; (8001304 <__aeabi_ddiv+0x664>)
 80010a4:	401a      	ands	r2, r3
 80010a6:	2300      	movs	r3, #0
 80010a8:	4694      	mov	ip, r2
 80010aa:	4698      	mov	r8, r3
 80010ac:	2200      	movs	r2, #0
 80010ae:	e6c5      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	464b      	mov	r3, r9
 80010b4:	0312      	lsls	r2, r2, #12
 80010b6:	4213      	tst	r3, r2
 80010b8:	d00a      	beq.n	80010d0 <__aeabi_ddiv+0x430>
 80010ba:	465b      	mov	r3, fp
 80010bc:	4213      	tst	r3, r2
 80010be:	d106      	bne.n	80010ce <__aeabi_ddiv+0x42e>
 80010c0:	431a      	orrs	r2, r3
 80010c2:	0312      	lsls	r2, r2, #12
 80010c4:	0b12      	lsrs	r2, r2, #12
 80010c6:	46ac      	mov	ip, r5
 80010c8:	4688      	mov	r8, r1
 80010ca:	4c8e      	ldr	r4, [pc, #568]	; (8001304 <__aeabi_ddiv+0x664>)
 80010cc:	e6b6      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80010ce:	464b      	mov	r3, r9
 80010d0:	431a      	orrs	r2, r3
 80010d2:	0312      	lsls	r2, r2, #12
 80010d4:	0b12      	lsrs	r2, r2, #12
 80010d6:	46bc      	mov	ip, r7
 80010d8:	4c8a      	ldr	r4, [pc, #552]	; (8001304 <__aeabi_ddiv+0x664>)
 80010da:	e6af      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80010dc:	0003      	movs	r3, r0
 80010de:	465a      	mov	r2, fp
 80010e0:	3b28      	subs	r3, #40	; 0x28
 80010e2:	409a      	lsls	r2, r3
 80010e4:	2300      	movs	r3, #0
 80010e6:	4691      	mov	r9, r2
 80010e8:	4698      	mov	r8, r3
 80010ea:	e657      	b.n	8000d9c <__aeabi_ddiv+0xfc>
 80010ec:	4658      	mov	r0, fp
 80010ee:	f001 f84f 	bl	8002190 <__clzsi2>
 80010f2:	3020      	adds	r0, #32
 80010f4:	e640      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 80010f6:	0003      	movs	r3, r0
 80010f8:	4652      	mov	r2, sl
 80010fa:	3b28      	subs	r3, #40	; 0x28
 80010fc:	409a      	lsls	r2, r3
 80010fe:	2100      	movs	r1, #0
 8001100:	4693      	mov	fp, r2
 8001102:	e677      	b.n	8000df4 <__aeabi_ddiv+0x154>
 8001104:	f001 f844 	bl	8002190 <__clzsi2>
 8001108:	3020      	adds	r0, #32
 800110a:	e65f      	b.n	8000dcc <__aeabi_ddiv+0x12c>
 800110c:	4588      	cmp	r8, r1
 800110e:	d200      	bcs.n	8001112 <__aeabi_ddiv+0x472>
 8001110:	e6c7      	b.n	8000ea2 <__aeabi_ddiv+0x202>
 8001112:	464b      	mov	r3, r9
 8001114:	07de      	lsls	r6, r3, #31
 8001116:	085d      	lsrs	r5, r3, #1
 8001118:	4643      	mov	r3, r8
 800111a:	085b      	lsrs	r3, r3, #1
 800111c:	431e      	orrs	r6, r3
 800111e:	4643      	mov	r3, r8
 8001120:	07db      	lsls	r3, r3, #31
 8001122:	469a      	mov	sl, r3
 8001124:	e6c2      	b.n	8000eac <__aeabi_ddiv+0x20c>
 8001126:	2500      	movs	r5, #0
 8001128:	4592      	cmp	sl, r2
 800112a:	d300      	bcc.n	800112e <__aeabi_ddiv+0x48e>
 800112c:	e733      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 800112e:	9e03      	ldr	r6, [sp, #12]
 8001130:	4659      	mov	r1, fp
 8001132:	46b4      	mov	ip, r6
 8001134:	44e2      	add	sl, ip
 8001136:	45b2      	cmp	sl, r6
 8001138:	41ad      	sbcs	r5, r5
 800113a:	426d      	negs	r5, r5
 800113c:	4445      	add	r5, r8
 800113e:	18eb      	adds	r3, r5, r3
 8001140:	3901      	subs	r1, #1
 8001142:	4598      	cmp	r8, r3
 8001144:	d207      	bcs.n	8001156 <__aeabi_ddiv+0x4b6>
 8001146:	4298      	cmp	r0, r3
 8001148:	d900      	bls.n	800114c <__aeabi_ddiv+0x4ac>
 800114a:	e07f      	b.n	800124c <__aeabi_ddiv+0x5ac>
 800114c:	d100      	bne.n	8001150 <__aeabi_ddiv+0x4b0>
 800114e:	e0bc      	b.n	80012ca <__aeabi_ddiv+0x62a>
 8001150:	1a1d      	subs	r5, r3, r0
 8001152:	468b      	mov	fp, r1
 8001154:	e71f      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 8001156:	4598      	cmp	r8, r3
 8001158:	d1fa      	bne.n	8001150 <__aeabi_ddiv+0x4b0>
 800115a:	9d03      	ldr	r5, [sp, #12]
 800115c:	4555      	cmp	r5, sl
 800115e:	d9f2      	bls.n	8001146 <__aeabi_ddiv+0x4a6>
 8001160:	4643      	mov	r3, r8
 8001162:	468b      	mov	fp, r1
 8001164:	1a1d      	subs	r5, r3, r0
 8001166:	e716      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 8001168:	469b      	mov	fp, r3
 800116a:	e6ca      	b.n	8000f02 <__aeabi_ddiv+0x262>
 800116c:	0015      	movs	r5, r2
 800116e:	e6e7      	b.n	8000f40 <__aeabi_ddiv+0x2a0>
 8001170:	465a      	mov	r2, fp
 8001172:	08c9      	lsrs	r1, r1, #3
 8001174:	0752      	lsls	r2, r2, #29
 8001176:	430a      	orrs	r2, r1
 8001178:	055b      	lsls	r3, r3, #21
 800117a:	4690      	mov	r8, r2
 800117c:	0d5c      	lsrs	r4, r3, #21
 800117e:	465a      	mov	r2, fp
 8001180:	2301      	movs	r3, #1
 8001182:	9902      	ldr	r1, [sp, #8]
 8001184:	0252      	lsls	r2, r2, #9
 8001186:	4019      	ands	r1, r3
 8001188:	0b12      	lsrs	r2, r2, #12
 800118a:	468c      	mov	ip, r1
 800118c:	e656      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x4f4>
 8001192:	e76f      	b.n	8001074 <__aeabi_ddiv+0x3d4>
 8001194:	4446      	add	r6, r8
 8001196:	1e4a      	subs	r2, r1, #1
 8001198:	45b0      	cmp	r8, r6
 800119a:	d929      	bls.n	80011f0 <__aeabi_ddiv+0x550>
 800119c:	0011      	movs	r1, r2
 800119e:	4286      	cmp	r6, r0
 80011a0:	d000      	beq.n	80011a4 <__aeabi_ddiv+0x504>
 80011a2:	e765      	b.n	8001070 <__aeabi_ddiv+0x3d0>
 80011a4:	9a03      	ldr	r2, [sp, #12]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d000      	beq.n	80011ac <__aeabi_ddiv+0x50c>
 80011aa:	e761      	b.n	8001070 <__aeabi_ddiv+0x3d0>
 80011ac:	e762      	b.n	8001074 <__aeabi_ddiv+0x3d4>
 80011ae:	2101      	movs	r1, #1
 80011b0:	4249      	negs	r1, r1
 80011b2:	2001      	movs	r0, #1
 80011b4:	1ac2      	subs	r2, r0, r3
 80011b6:	2a38      	cmp	r2, #56	; 0x38
 80011b8:	dd21      	ble.n	80011fe <__aeabi_ddiv+0x55e>
 80011ba:	9b02      	ldr	r3, [sp, #8]
 80011bc:	4003      	ands	r3, r0
 80011be:	469c      	mov	ip, r3
 80011c0:	e638      	b.n	8000e34 <__aeabi_ddiv+0x194>
 80011c2:	220f      	movs	r2, #15
 80011c4:	400a      	ands	r2, r1
 80011c6:	2a04      	cmp	r2, #4
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x52c>
 80011ca:	e75b      	b.n	8001084 <__aeabi_ddiv+0x3e4>
 80011cc:	000a      	movs	r2, r1
 80011ce:	1d11      	adds	r1, r2, #4
 80011d0:	4291      	cmp	r1, r2
 80011d2:	4192      	sbcs	r2, r2
 80011d4:	4252      	negs	r2, r2
 80011d6:	4493      	add	fp, r2
 80011d8:	e754      	b.n	8001084 <__aeabi_ddiv+0x3e4>
 80011da:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <__aeabi_ddiv+0x658>)
 80011dc:	18e3      	adds	r3, r4, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dde5      	ble.n	80011ae <__aeabi_ddiv+0x50e>
 80011e2:	2201      	movs	r2, #1
 80011e4:	4252      	negs	r2, r2
 80011e6:	e7f2      	b.n	80011ce <__aeabi_ddiv+0x52e>
 80011e8:	001d      	movs	r5, r3
 80011ea:	e6fa      	b.n	8000fe2 <__aeabi_ddiv+0x342>
 80011ec:	469a      	mov	sl, r3
 80011ee:	e71c      	b.n	800102a <__aeabi_ddiv+0x38a>
 80011f0:	42b0      	cmp	r0, r6
 80011f2:	d839      	bhi.n	8001268 <__aeabi_ddiv+0x5c8>
 80011f4:	d06e      	beq.n	80012d4 <__aeabi_ddiv+0x634>
 80011f6:	0011      	movs	r1, r2
 80011f8:	e73a      	b.n	8001070 <__aeabi_ddiv+0x3d0>
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	e73a      	b.n	8001074 <__aeabi_ddiv+0x3d4>
 80011fe:	2a1f      	cmp	r2, #31
 8001200:	dc3c      	bgt.n	800127c <__aeabi_ddiv+0x5dc>
 8001202:	2320      	movs	r3, #32
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	000c      	movs	r4, r1
 8001208:	4658      	mov	r0, fp
 800120a:	4099      	lsls	r1, r3
 800120c:	4098      	lsls	r0, r3
 800120e:	1e4b      	subs	r3, r1, #1
 8001210:	4199      	sbcs	r1, r3
 8001212:	465b      	mov	r3, fp
 8001214:	40d4      	lsrs	r4, r2
 8001216:	40d3      	lsrs	r3, r2
 8001218:	4320      	orrs	r0, r4
 800121a:	4308      	orrs	r0, r1
 800121c:	001a      	movs	r2, r3
 800121e:	0743      	lsls	r3, r0, #29
 8001220:	d009      	beq.n	8001236 <__aeabi_ddiv+0x596>
 8001222:	230f      	movs	r3, #15
 8001224:	4003      	ands	r3, r0
 8001226:	2b04      	cmp	r3, #4
 8001228:	d005      	beq.n	8001236 <__aeabi_ddiv+0x596>
 800122a:	0001      	movs	r1, r0
 800122c:	1d08      	adds	r0, r1, #4
 800122e:	4288      	cmp	r0, r1
 8001230:	419b      	sbcs	r3, r3
 8001232:	425b      	negs	r3, r3
 8001234:	18d2      	adds	r2, r2, r3
 8001236:	0213      	lsls	r3, r2, #8
 8001238:	d53a      	bpl.n	80012b0 <__aeabi_ddiv+0x610>
 800123a:	2301      	movs	r3, #1
 800123c:	9a02      	ldr	r2, [sp, #8]
 800123e:	2401      	movs	r4, #1
 8001240:	401a      	ands	r2, r3
 8001242:	2300      	movs	r3, #0
 8001244:	4694      	mov	ip, r2
 8001246:	4698      	mov	r8, r3
 8001248:	2200      	movs	r2, #0
 800124a:	e5f7      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 800124c:	2102      	movs	r1, #2
 800124e:	4249      	negs	r1, r1
 8001250:	468c      	mov	ip, r1
 8001252:	9d03      	ldr	r5, [sp, #12]
 8001254:	44e3      	add	fp, ip
 8001256:	46ac      	mov	ip, r5
 8001258:	44e2      	add	sl, ip
 800125a:	45aa      	cmp	sl, r5
 800125c:	41ad      	sbcs	r5, r5
 800125e:	426d      	negs	r5, r5
 8001260:	4445      	add	r5, r8
 8001262:	18ed      	adds	r5, r5, r3
 8001264:	1a2d      	subs	r5, r5, r0
 8001266:	e696      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 8001268:	1e8a      	subs	r2, r1, #2
 800126a:	9903      	ldr	r1, [sp, #12]
 800126c:	004d      	lsls	r5, r1, #1
 800126e:	428d      	cmp	r5, r1
 8001270:	4189      	sbcs	r1, r1
 8001272:	4249      	negs	r1, r1
 8001274:	4441      	add	r1, r8
 8001276:	1876      	adds	r6, r6, r1
 8001278:	9503      	str	r5, [sp, #12]
 800127a:	e78f      	b.n	800119c <__aeabi_ddiv+0x4fc>
 800127c:	201f      	movs	r0, #31
 800127e:	4240      	negs	r0, r0
 8001280:	1ac3      	subs	r3, r0, r3
 8001282:	4658      	mov	r0, fp
 8001284:	40d8      	lsrs	r0, r3
 8001286:	0003      	movs	r3, r0
 8001288:	2a20      	cmp	r2, #32
 800128a:	d028      	beq.n	80012de <__aeabi_ddiv+0x63e>
 800128c:	2040      	movs	r0, #64	; 0x40
 800128e:	465d      	mov	r5, fp
 8001290:	1a82      	subs	r2, r0, r2
 8001292:	4095      	lsls	r5, r2
 8001294:	4329      	orrs	r1, r5
 8001296:	1e4a      	subs	r2, r1, #1
 8001298:	4191      	sbcs	r1, r2
 800129a:	4319      	orrs	r1, r3
 800129c:	2307      	movs	r3, #7
 800129e:	2200      	movs	r2, #0
 80012a0:	400b      	ands	r3, r1
 80012a2:	d009      	beq.n	80012b8 <__aeabi_ddiv+0x618>
 80012a4:	230f      	movs	r3, #15
 80012a6:	2200      	movs	r2, #0
 80012a8:	400b      	ands	r3, r1
 80012aa:	0008      	movs	r0, r1
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d1bd      	bne.n	800122c <__aeabi_ddiv+0x58c>
 80012b0:	0001      	movs	r1, r0
 80012b2:	0753      	lsls	r3, r2, #29
 80012b4:	0252      	lsls	r2, r2, #9
 80012b6:	0b12      	lsrs	r2, r2, #12
 80012b8:	08c9      	lsrs	r1, r1, #3
 80012ba:	4319      	orrs	r1, r3
 80012bc:	2301      	movs	r3, #1
 80012be:	4688      	mov	r8, r1
 80012c0:	9902      	ldr	r1, [sp, #8]
 80012c2:	2400      	movs	r4, #0
 80012c4:	4019      	ands	r1, r3
 80012c6:	468c      	mov	ip, r1
 80012c8:	e5b8      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80012ca:	4552      	cmp	r2, sl
 80012cc:	d8be      	bhi.n	800124c <__aeabi_ddiv+0x5ac>
 80012ce:	468b      	mov	fp, r1
 80012d0:	2500      	movs	r5, #0
 80012d2:	e660      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 80012d4:	9d03      	ldr	r5, [sp, #12]
 80012d6:	429d      	cmp	r5, r3
 80012d8:	d3c6      	bcc.n	8001268 <__aeabi_ddiv+0x5c8>
 80012da:	0011      	movs	r1, r2
 80012dc:	e762      	b.n	80011a4 <__aeabi_ddiv+0x504>
 80012de:	2500      	movs	r5, #0
 80012e0:	e7d8      	b.n	8001294 <__aeabi_ddiv+0x5f4>
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	465b      	mov	r3, fp
 80012e6:	0312      	lsls	r2, r2, #12
 80012e8:	431a      	orrs	r2, r3
 80012ea:	9b01      	ldr	r3, [sp, #4]
 80012ec:	0312      	lsls	r2, r2, #12
 80012ee:	0b12      	lsrs	r2, r2, #12
 80012f0:	469c      	mov	ip, r3
 80012f2:	4688      	mov	r8, r1
 80012f4:	4c03      	ldr	r4, [pc, #12]	; (8001304 <__aeabi_ddiv+0x664>)
 80012f6:	e5a1      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80012f8:	000003ff 	.word	0x000003ff
 80012fc:	feffffff 	.word	0xfeffffff
 8001300:	000007fe 	.word	0x000007fe
 8001304:	000007ff 	.word	0x000007ff

08001308 <__eqdf2>:
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	464f      	mov	r7, r9
 800130c:	4646      	mov	r6, r8
 800130e:	46d6      	mov	lr, sl
 8001310:	005c      	lsls	r4, r3, #1
 8001312:	b5c0      	push	{r6, r7, lr}
 8001314:	031f      	lsls	r7, r3, #12
 8001316:	0fdb      	lsrs	r3, r3, #31
 8001318:	469a      	mov	sl, r3
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <__eqdf2+0x70>)
 800131c:	030e      	lsls	r6, r1, #12
 800131e:	004d      	lsls	r5, r1, #1
 8001320:	4684      	mov	ip, r0
 8001322:	4680      	mov	r8, r0
 8001324:	0b36      	lsrs	r6, r6, #12
 8001326:	0d6d      	lsrs	r5, r5, #21
 8001328:	0fc9      	lsrs	r1, r1, #31
 800132a:	4691      	mov	r9, r2
 800132c:	0b3f      	lsrs	r7, r7, #12
 800132e:	0d64      	lsrs	r4, r4, #21
 8001330:	2001      	movs	r0, #1
 8001332:	429d      	cmp	r5, r3
 8001334:	d008      	beq.n	8001348 <__eqdf2+0x40>
 8001336:	429c      	cmp	r4, r3
 8001338:	d001      	beq.n	800133e <__eqdf2+0x36>
 800133a:	42a5      	cmp	r5, r4
 800133c:	d00b      	beq.n	8001356 <__eqdf2+0x4e>
 800133e:	bc1c      	pop	{r2, r3, r4}
 8001340:	4690      	mov	r8, r2
 8001342:	4699      	mov	r9, r3
 8001344:	46a2      	mov	sl, r4
 8001346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001348:	4663      	mov	r3, ip
 800134a:	4333      	orrs	r3, r6
 800134c:	d1f7      	bne.n	800133e <__eqdf2+0x36>
 800134e:	42ac      	cmp	r4, r5
 8001350:	d1f5      	bne.n	800133e <__eqdf2+0x36>
 8001352:	433a      	orrs	r2, r7
 8001354:	d1f3      	bne.n	800133e <__eqdf2+0x36>
 8001356:	2001      	movs	r0, #1
 8001358:	42be      	cmp	r6, r7
 800135a:	d1f0      	bne.n	800133e <__eqdf2+0x36>
 800135c:	45c8      	cmp	r8, r9
 800135e:	d1ee      	bne.n	800133e <__eqdf2+0x36>
 8001360:	4551      	cmp	r1, sl
 8001362:	d007      	beq.n	8001374 <__eqdf2+0x6c>
 8001364:	2d00      	cmp	r5, #0
 8001366:	d1ea      	bne.n	800133e <__eqdf2+0x36>
 8001368:	4663      	mov	r3, ip
 800136a:	431e      	orrs	r6, r3
 800136c:	0030      	movs	r0, r6
 800136e:	1e46      	subs	r6, r0, #1
 8001370:	41b0      	sbcs	r0, r6
 8001372:	e7e4      	b.n	800133e <__eqdf2+0x36>
 8001374:	2000      	movs	r0, #0
 8001376:	e7e2      	b.n	800133e <__eqdf2+0x36>
 8001378:	000007ff 	.word	0x000007ff

0800137c <__gedf2>:
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	4645      	mov	r5, r8
 8001380:	46de      	mov	lr, fp
 8001382:	4657      	mov	r7, sl
 8001384:	464e      	mov	r6, r9
 8001386:	b5e0      	push	{r5, r6, r7, lr}
 8001388:	031f      	lsls	r7, r3, #12
 800138a:	0b3d      	lsrs	r5, r7, #12
 800138c:	4f2c      	ldr	r7, [pc, #176]	; (8001440 <__gedf2+0xc4>)
 800138e:	030e      	lsls	r6, r1, #12
 8001390:	004c      	lsls	r4, r1, #1
 8001392:	46ab      	mov	fp, r5
 8001394:	005d      	lsls	r5, r3, #1
 8001396:	4684      	mov	ip, r0
 8001398:	0b36      	lsrs	r6, r6, #12
 800139a:	0d64      	lsrs	r4, r4, #21
 800139c:	0fc9      	lsrs	r1, r1, #31
 800139e:	4690      	mov	r8, r2
 80013a0:	0d6d      	lsrs	r5, r5, #21
 80013a2:	0fdb      	lsrs	r3, r3, #31
 80013a4:	42bc      	cmp	r4, r7
 80013a6:	d02a      	beq.n	80013fe <__gedf2+0x82>
 80013a8:	4f25      	ldr	r7, [pc, #148]	; (8001440 <__gedf2+0xc4>)
 80013aa:	42bd      	cmp	r5, r7
 80013ac:	d02d      	beq.n	800140a <__gedf2+0x8e>
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d10f      	bne.n	80013d2 <__gedf2+0x56>
 80013b2:	4330      	orrs	r0, r6
 80013b4:	0007      	movs	r7, r0
 80013b6:	4681      	mov	r9, r0
 80013b8:	4278      	negs	r0, r7
 80013ba:	4178      	adcs	r0, r7
 80013bc:	b2c0      	uxtb	r0, r0
 80013be:	2d00      	cmp	r5, #0
 80013c0:	d117      	bne.n	80013f2 <__gedf2+0x76>
 80013c2:	465f      	mov	r7, fp
 80013c4:	433a      	orrs	r2, r7
 80013c6:	d114      	bne.n	80013f2 <__gedf2+0x76>
 80013c8:	464b      	mov	r3, r9
 80013ca:	2000      	movs	r0, #0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00a      	beq.n	80013e6 <__gedf2+0x6a>
 80013d0:	e006      	b.n	80013e0 <__gedf2+0x64>
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	d102      	bne.n	80013dc <__gedf2+0x60>
 80013d6:	4658      	mov	r0, fp
 80013d8:	4302      	orrs	r2, r0
 80013da:	d001      	beq.n	80013e0 <__gedf2+0x64>
 80013dc:	4299      	cmp	r1, r3
 80013de:	d018      	beq.n	8001412 <__gedf2+0x96>
 80013e0:	4248      	negs	r0, r1
 80013e2:	2101      	movs	r1, #1
 80013e4:	4308      	orrs	r0, r1
 80013e6:	bc3c      	pop	{r2, r3, r4, r5}
 80013e8:	4690      	mov	r8, r2
 80013ea:	4699      	mov	r9, r3
 80013ec:	46a2      	mov	sl, r4
 80013ee:	46ab      	mov	fp, r5
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f2:	2800      	cmp	r0, #0
 80013f4:	d0f2      	beq.n	80013dc <__gedf2+0x60>
 80013f6:	2001      	movs	r0, #1
 80013f8:	3b01      	subs	r3, #1
 80013fa:	4318      	orrs	r0, r3
 80013fc:	e7f3      	b.n	80013e6 <__gedf2+0x6a>
 80013fe:	0037      	movs	r7, r6
 8001400:	4307      	orrs	r7, r0
 8001402:	d0d1      	beq.n	80013a8 <__gedf2+0x2c>
 8001404:	2002      	movs	r0, #2
 8001406:	4240      	negs	r0, r0
 8001408:	e7ed      	b.n	80013e6 <__gedf2+0x6a>
 800140a:	465f      	mov	r7, fp
 800140c:	4317      	orrs	r7, r2
 800140e:	d0ce      	beq.n	80013ae <__gedf2+0x32>
 8001410:	e7f8      	b.n	8001404 <__gedf2+0x88>
 8001412:	42ac      	cmp	r4, r5
 8001414:	dce4      	bgt.n	80013e0 <__gedf2+0x64>
 8001416:	da03      	bge.n	8001420 <__gedf2+0xa4>
 8001418:	1e48      	subs	r0, r1, #1
 800141a:	2101      	movs	r1, #1
 800141c:	4308      	orrs	r0, r1
 800141e:	e7e2      	b.n	80013e6 <__gedf2+0x6a>
 8001420:	455e      	cmp	r6, fp
 8001422:	d8dd      	bhi.n	80013e0 <__gedf2+0x64>
 8001424:	d006      	beq.n	8001434 <__gedf2+0xb8>
 8001426:	2000      	movs	r0, #0
 8001428:	455e      	cmp	r6, fp
 800142a:	d2dc      	bcs.n	80013e6 <__gedf2+0x6a>
 800142c:	2301      	movs	r3, #1
 800142e:	1e48      	subs	r0, r1, #1
 8001430:	4318      	orrs	r0, r3
 8001432:	e7d8      	b.n	80013e6 <__gedf2+0x6a>
 8001434:	45c4      	cmp	ip, r8
 8001436:	d8d3      	bhi.n	80013e0 <__gedf2+0x64>
 8001438:	2000      	movs	r0, #0
 800143a:	45c4      	cmp	ip, r8
 800143c:	d3f6      	bcc.n	800142c <__gedf2+0xb0>
 800143e:	e7d2      	b.n	80013e6 <__gedf2+0x6a>
 8001440:	000007ff 	.word	0x000007ff

08001444 <__ledf2>:
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	464e      	mov	r6, r9
 8001448:	4645      	mov	r5, r8
 800144a:	46de      	mov	lr, fp
 800144c:	4657      	mov	r7, sl
 800144e:	005c      	lsls	r4, r3, #1
 8001450:	b5e0      	push	{r5, r6, r7, lr}
 8001452:	031f      	lsls	r7, r3, #12
 8001454:	0fdb      	lsrs	r3, r3, #31
 8001456:	4699      	mov	r9, r3
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <__ledf2+0xc0>)
 800145a:	030e      	lsls	r6, r1, #12
 800145c:	004d      	lsls	r5, r1, #1
 800145e:	0fc9      	lsrs	r1, r1, #31
 8001460:	4684      	mov	ip, r0
 8001462:	0b36      	lsrs	r6, r6, #12
 8001464:	0d6d      	lsrs	r5, r5, #21
 8001466:	468b      	mov	fp, r1
 8001468:	4690      	mov	r8, r2
 800146a:	0b3f      	lsrs	r7, r7, #12
 800146c:	0d64      	lsrs	r4, r4, #21
 800146e:	429d      	cmp	r5, r3
 8001470:	d020      	beq.n	80014b4 <__ledf2+0x70>
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <__ledf2+0xc0>)
 8001474:	429c      	cmp	r4, r3
 8001476:	d022      	beq.n	80014be <__ledf2+0x7a>
 8001478:	2d00      	cmp	r5, #0
 800147a:	d112      	bne.n	80014a2 <__ledf2+0x5e>
 800147c:	4330      	orrs	r0, r6
 800147e:	4243      	negs	r3, r0
 8001480:	4143      	adcs	r3, r0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2c00      	cmp	r4, #0
 8001486:	d01f      	beq.n	80014c8 <__ledf2+0x84>
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00c      	beq.n	80014a6 <__ledf2+0x62>
 800148c:	464b      	mov	r3, r9
 800148e:	2001      	movs	r0, #1
 8001490:	3b01      	subs	r3, #1
 8001492:	4303      	orrs	r3, r0
 8001494:	0018      	movs	r0, r3
 8001496:	bc3c      	pop	{r2, r3, r4, r5}
 8001498:	4690      	mov	r8, r2
 800149a:	4699      	mov	r9, r3
 800149c:	46a2      	mov	sl, r4
 800149e:	46ab      	mov	fp, r5
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d016      	beq.n	80014d4 <__ledf2+0x90>
 80014a6:	45cb      	cmp	fp, r9
 80014a8:	d017      	beq.n	80014da <__ledf2+0x96>
 80014aa:	465b      	mov	r3, fp
 80014ac:	4259      	negs	r1, r3
 80014ae:	2301      	movs	r3, #1
 80014b0:	430b      	orrs	r3, r1
 80014b2:	e7ef      	b.n	8001494 <__ledf2+0x50>
 80014b4:	0031      	movs	r1, r6
 80014b6:	2302      	movs	r3, #2
 80014b8:	4301      	orrs	r1, r0
 80014ba:	d1eb      	bne.n	8001494 <__ledf2+0x50>
 80014bc:	e7d9      	b.n	8001472 <__ledf2+0x2e>
 80014be:	0039      	movs	r1, r7
 80014c0:	2302      	movs	r3, #2
 80014c2:	4311      	orrs	r1, r2
 80014c4:	d1e6      	bne.n	8001494 <__ledf2+0x50>
 80014c6:	e7d7      	b.n	8001478 <__ledf2+0x34>
 80014c8:	433a      	orrs	r2, r7
 80014ca:	d1dd      	bne.n	8001488 <__ledf2+0x44>
 80014cc:	2300      	movs	r3, #0
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d0e0      	beq.n	8001494 <__ledf2+0x50>
 80014d2:	e7ea      	b.n	80014aa <__ledf2+0x66>
 80014d4:	433a      	orrs	r2, r7
 80014d6:	d1e6      	bne.n	80014a6 <__ledf2+0x62>
 80014d8:	e7e7      	b.n	80014aa <__ledf2+0x66>
 80014da:	42a5      	cmp	r5, r4
 80014dc:	dce5      	bgt.n	80014aa <__ledf2+0x66>
 80014de:	db05      	blt.n	80014ec <__ledf2+0xa8>
 80014e0:	42be      	cmp	r6, r7
 80014e2:	d8e2      	bhi.n	80014aa <__ledf2+0x66>
 80014e4:	d007      	beq.n	80014f6 <__ledf2+0xb2>
 80014e6:	2300      	movs	r3, #0
 80014e8:	42be      	cmp	r6, r7
 80014ea:	d2d3      	bcs.n	8001494 <__ledf2+0x50>
 80014ec:	4659      	mov	r1, fp
 80014ee:	2301      	movs	r3, #1
 80014f0:	3901      	subs	r1, #1
 80014f2:	430b      	orrs	r3, r1
 80014f4:	e7ce      	b.n	8001494 <__ledf2+0x50>
 80014f6:	45c4      	cmp	ip, r8
 80014f8:	d8d7      	bhi.n	80014aa <__ledf2+0x66>
 80014fa:	2300      	movs	r3, #0
 80014fc:	45c4      	cmp	ip, r8
 80014fe:	d3f5      	bcc.n	80014ec <__ledf2+0xa8>
 8001500:	e7c8      	b.n	8001494 <__ledf2+0x50>
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	000007ff 	.word	0x000007ff

08001508 <__aeabi_dmul>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	4645      	mov	r5, r8
 800150e:	46de      	mov	lr, fp
 8001510:	464e      	mov	r6, r9
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	030c      	lsls	r4, r1, #12
 8001516:	4698      	mov	r8, r3
 8001518:	004e      	lsls	r6, r1, #1
 800151a:	0b23      	lsrs	r3, r4, #12
 800151c:	b087      	sub	sp, #28
 800151e:	0007      	movs	r7, r0
 8001520:	4692      	mov	sl, r2
 8001522:	469b      	mov	fp, r3
 8001524:	0d76      	lsrs	r6, r6, #21
 8001526:	0fcd      	lsrs	r5, r1, #31
 8001528:	2e00      	cmp	r6, #0
 800152a:	d06b      	beq.n	8001604 <__aeabi_dmul+0xfc>
 800152c:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <__aeabi_dmul+0x1dc>)
 800152e:	429e      	cmp	r6, r3
 8001530:	d035      	beq.n	800159e <__aeabi_dmul+0x96>
 8001532:	2480      	movs	r4, #128	; 0x80
 8001534:	465b      	mov	r3, fp
 8001536:	0f42      	lsrs	r2, r0, #29
 8001538:	0424      	lsls	r4, r4, #16
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4314      	orrs	r4, r2
 800153e:	431c      	orrs	r4, r3
 8001540:	00c3      	lsls	r3, r0, #3
 8001542:	4699      	mov	r9, r3
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <__aeabi_dmul+0x1e0>)
 8001546:	46a3      	mov	fp, r4
 8001548:	469c      	mov	ip, r3
 800154a:	2300      	movs	r3, #0
 800154c:	2700      	movs	r7, #0
 800154e:	4466      	add	r6, ip
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	4643      	mov	r3, r8
 8001554:	031c      	lsls	r4, r3, #12
 8001556:	005a      	lsls	r2, r3, #1
 8001558:	0fdb      	lsrs	r3, r3, #31
 800155a:	4650      	mov	r0, sl
 800155c:	0b24      	lsrs	r4, r4, #12
 800155e:	0d52      	lsrs	r2, r2, #21
 8001560:	4698      	mov	r8, r3
 8001562:	d100      	bne.n	8001566 <__aeabi_dmul+0x5e>
 8001564:	e076      	b.n	8001654 <__aeabi_dmul+0x14c>
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <__aeabi_dmul+0x1dc>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d06d      	beq.n	8001648 <__aeabi_dmul+0x140>
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	0f41      	lsrs	r1, r0, #29
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	430b      	orrs	r3, r1
 8001574:	495c      	ldr	r1, [pc, #368]	; (80016e8 <__aeabi_dmul+0x1e0>)
 8001576:	00e4      	lsls	r4, r4, #3
 8001578:	468c      	mov	ip, r1
 800157a:	431c      	orrs	r4, r3
 800157c:	00c3      	lsls	r3, r0, #3
 800157e:	2000      	movs	r0, #0
 8001580:	4462      	add	r2, ip
 8001582:	4641      	mov	r1, r8
 8001584:	18b6      	adds	r6, r6, r2
 8001586:	4069      	eors	r1, r5
 8001588:	1c72      	adds	r2, r6, #1
 800158a:	9101      	str	r1, [sp, #4]
 800158c:	4694      	mov	ip, r2
 800158e:	4307      	orrs	r7, r0
 8001590:	2f0f      	cmp	r7, #15
 8001592:	d900      	bls.n	8001596 <__aeabi_dmul+0x8e>
 8001594:	e0b0      	b.n	80016f8 <__aeabi_dmul+0x1f0>
 8001596:	4a55      	ldr	r2, [pc, #340]	; (80016ec <__aeabi_dmul+0x1e4>)
 8001598:	00bf      	lsls	r7, r7, #2
 800159a:	59d2      	ldr	r2, [r2, r7]
 800159c:	4697      	mov	pc, r2
 800159e:	465b      	mov	r3, fp
 80015a0:	4303      	orrs	r3, r0
 80015a2:	4699      	mov	r9, r3
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dmul+0xa0>
 80015a6:	e087      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 80015a8:	2300      	movs	r3, #0
 80015aa:	469b      	mov	fp, r3
 80015ac:	3302      	adds	r3, #2
 80015ae:	2708      	movs	r7, #8
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	e7ce      	b.n	8001552 <__aeabi_dmul+0x4a>
 80015b4:	4642      	mov	r2, r8
 80015b6:	9201      	str	r2, [sp, #4]
 80015b8:	2802      	cmp	r0, #2
 80015ba:	d067      	beq.n	800168c <__aeabi_dmul+0x184>
 80015bc:	2803      	cmp	r0, #3
 80015be:	d100      	bne.n	80015c2 <__aeabi_dmul+0xba>
 80015c0:	e20e      	b.n	80019e0 <__aeabi_dmul+0x4d8>
 80015c2:	2801      	cmp	r0, #1
 80015c4:	d000      	beq.n	80015c8 <__aeabi_dmul+0xc0>
 80015c6:	e162      	b.n	800188e <__aeabi_dmul+0x386>
 80015c8:	2300      	movs	r3, #0
 80015ca:	2400      	movs	r4, #0
 80015cc:	2200      	movs	r2, #0
 80015ce:	4699      	mov	r9, r3
 80015d0:	9901      	ldr	r1, [sp, #4]
 80015d2:	4001      	ands	r1, r0
 80015d4:	b2cd      	uxtb	r5, r1
 80015d6:	2100      	movs	r1, #0
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	0d0b      	lsrs	r3, r1, #20
 80015dc:	0b12      	lsrs	r2, r2, #12
 80015de:	051b      	lsls	r3, r3, #20
 80015e0:	4313      	orrs	r3, r2
 80015e2:	4a43      	ldr	r2, [pc, #268]	; (80016f0 <__aeabi_dmul+0x1e8>)
 80015e4:	0524      	lsls	r4, r4, #20
 80015e6:	4013      	ands	r3, r2
 80015e8:	431c      	orrs	r4, r3
 80015ea:	0064      	lsls	r4, r4, #1
 80015ec:	07ed      	lsls	r5, r5, #31
 80015ee:	0864      	lsrs	r4, r4, #1
 80015f0:	432c      	orrs	r4, r5
 80015f2:	4648      	mov	r0, r9
 80015f4:	0021      	movs	r1, r4
 80015f6:	b007      	add	sp, #28
 80015f8:	bc3c      	pop	{r2, r3, r4, r5}
 80015fa:	4690      	mov	r8, r2
 80015fc:	4699      	mov	r9, r3
 80015fe:	46a2      	mov	sl, r4
 8001600:	46ab      	mov	fp, r5
 8001602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001604:	4303      	orrs	r3, r0
 8001606:	4699      	mov	r9, r3
 8001608:	d04f      	beq.n	80016aa <__aeabi_dmul+0x1a2>
 800160a:	465b      	mov	r3, fp
 800160c:	2b00      	cmp	r3, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dmul+0x10a>
 8001610:	e189      	b.n	8001926 <__aeabi_dmul+0x41e>
 8001612:	4658      	mov	r0, fp
 8001614:	f000 fdbc 	bl	8002190 <__clzsi2>
 8001618:	0003      	movs	r3, r0
 800161a:	3b0b      	subs	r3, #11
 800161c:	2b1c      	cmp	r3, #28
 800161e:	dd00      	ble.n	8001622 <__aeabi_dmul+0x11a>
 8001620:	e17a      	b.n	8001918 <__aeabi_dmul+0x410>
 8001622:	221d      	movs	r2, #29
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	003a      	movs	r2, r7
 8001628:	0001      	movs	r1, r0
 800162a:	465c      	mov	r4, fp
 800162c:	40da      	lsrs	r2, r3
 800162e:	3908      	subs	r1, #8
 8001630:	408c      	lsls	r4, r1
 8001632:	0013      	movs	r3, r2
 8001634:	408f      	lsls	r7, r1
 8001636:	4323      	orrs	r3, r4
 8001638:	469b      	mov	fp, r3
 800163a:	46b9      	mov	r9, r7
 800163c:	2300      	movs	r3, #0
 800163e:	4e2d      	ldr	r6, [pc, #180]	; (80016f4 <__aeabi_dmul+0x1ec>)
 8001640:	2700      	movs	r7, #0
 8001642:	1a36      	subs	r6, r6, r0
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	e784      	b.n	8001552 <__aeabi_dmul+0x4a>
 8001648:	4653      	mov	r3, sl
 800164a:	4323      	orrs	r3, r4
 800164c:	d12a      	bne.n	80016a4 <__aeabi_dmul+0x19c>
 800164e:	2400      	movs	r4, #0
 8001650:	2002      	movs	r0, #2
 8001652:	e796      	b.n	8001582 <__aeabi_dmul+0x7a>
 8001654:	4653      	mov	r3, sl
 8001656:	4323      	orrs	r3, r4
 8001658:	d020      	beq.n	800169c <__aeabi_dmul+0x194>
 800165a:	2c00      	cmp	r4, #0
 800165c:	d100      	bne.n	8001660 <__aeabi_dmul+0x158>
 800165e:	e157      	b.n	8001910 <__aeabi_dmul+0x408>
 8001660:	0020      	movs	r0, r4
 8001662:	f000 fd95 	bl	8002190 <__clzsi2>
 8001666:	0003      	movs	r3, r0
 8001668:	3b0b      	subs	r3, #11
 800166a:	2b1c      	cmp	r3, #28
 800166c:	dd00      	ble.n	8001670 <__aeabi_dmul+0x168>
 800166e:	e149      	b.n	8001904 <__aeabi_dmul+0x3fc>
 8001670:	211d      	movs	r1, #29
 8001672:	1acb      	subs	r3, r1, r3
 8001674:	4651      	mov	r1, sl
 8001676:	0002      	movs	r2, r0
 8001678:	40d9      	lsrs	r1, r3
 800167a:	4653      	mov	r3, sl
 800167c:	3a08      	subs	r2, #8
 800167e:	4094      	lsls	r4, r2
 8001680:	4093      	lsls	r3, r2
 8001682:	430c      	orrs	r4, r1
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <__aeabi_dmul+0x1ec>)
 8001686:	1a12      	subs	r2, r2, r0
 8001688:	2000      	movs	r0, #0
 800168a:	e77a      	b.n	8001582 <__aeabi_dmul+0x7a>
 800168c:	2501      	movs	r5, #1
 800168e:	9b01      	ldr	r3, [sp, #4]
 8001690:	4c14      	ldr	r4, [pc, #80]	; (80016e4 <__aeabi_dmul+0x1dc>)
 8001692:	401d      	ands	r5, r3
 8001694:	2300      	movs	r3, #0
 8001696:	2200      	movs	r2, #0
 8001698:	4699      	mov	r9, r3
 800169a:	e79c      	b.n	80015d6 <__aeabi_dmul+0xce>
 800169c:	2400      	movs	r4, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	2001      	movs	r0, #1
 80016a2:	e76e      	b.n	8001582 <__aeabi_dmul+0x7a>
 80016a4:	4653      	mov	r3, sl
 80016a6:	2003      	movs	r0, #3
 80016a8:	e76b      	b.n	8001582 <__aeabi_dmul+0x7a>
 80016aa:	2300      	movs	r3, #0
 80016ac:	469b      	mov	fp, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	2704      	movs	r7, #4
 80016b2:	2600      	movs	r6, #0
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	e74c      	b.n	8001552 <__aeabi_dmul+0x4a>
 80016b8:	2303      	movs	r3, #3
 80016ba:	4681      	mov	r9, r0
 80016bc:	270c      	movs	r7, #12
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	e747      	b.n	8001552 <__aeabi_dmul+0x4a>
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	2300      	movs	r3, #0
 80016c6:	2500      	movs	r5, #0
 80016c8:	0312      	lsls	r2, r2, #12
 80016ca:	4699      	mov	r9, r3
 80016cc:	4c05      	ldr	r4, [pc, #20]	; (80016e4 <__aeabi_dmul+0x1dc>)
 80016ce:	e782      	b.n	80015d6 <__aeabi_dmul+0xce>
 80016d0:	465c      	mov	r4, fp
 80016d2:	464b      	mov	r3, r9
 80016d4:	9802      	ldr	r0, [sp, #8]
 80016d6:	e76f      	b.n	80015b8 <__aeabi_dmul+0xb0>
 80016d8:	465c      	mov	r4, fp
 80016da:	464b      	mov	r3, r9
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9802      	ldr	r0, [sp, #8]
 80016e0:	e76a      	b.n	80015b8 <__aeabi_dmul+0xb0>
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	000007ff 	.word	0x000007ff
 80016e8:	fffffc01 	.word	0xfffffc01
 80016ec:	08007fac 	.word	0x08007fac
 80016f0:	800fffff 	.word	0x800fffff
 80016f4:	fffffc0d 	.word	0xfffffc0d
 80016f8:	464a      	mov	r2, r9
 80016fa:	4649      	mov	r1, r9
 80016fc:	0c17      	lsrs	r7, r2, #16
 80016fe:	0c1a      	lsrs	r2, r3, #16
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	0c1b      	lsrs	r3, r3, #16
 8001704:	0408      	lsls	r0, r1, #16
 8001706:	0019      	movs	r1, r3
 8001708:	0c00      	lsrs	r0, r0, #16
 800170a:	4341      	muls	r1, r0
 800170c:	0015      	movs	r5, r2
 800170e:	4688      	mov	r8, r1
 8001710:	0019      	movs	r1, r3
 8001712:	437d      	muls	r5, r7
 8001714:	4379      	muls	r1, r7
 8001716:	9503      	str	r5, [sp, #12]
 8001718:	4689      	mov	r9, r1
 800171a:	0029      	movs	r1, r5
 800171c:	0015      	movs	r5, r2
 800171e:	4345      	muls	r5, r0
 8001720:	444d      	add	r5, r9
 8001722:	9502      	str	r5, [sp, #8]
 8001724:	4645      	mov	r5, r8
 8001726:	0c2d      	lsrs	r5, r5, #16
 8001728:	46aa      	mov	sl, r5
 800172a:	9d02      	ldr	r5, [sp, #8]
 800172c:	4455      	add	r5, sl
 800172e:	45a9      	cmp	r9, r5
 8001730:	d906      	bls.n	8001740 <__aeabi_dmul+0x238>
 8001732:	468a      	mov	sl, r1
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	0249      	lsls	r1, r1, #9
 8001738:	4689      	mov	r9, r1
 800173a:	44ca      	add	sl, r9
 800173c:	4651      	mov	r1, sl
 800173e:	9103      	str	r1, [sp, #12]
 8001740:	0c29      	lsrs	r1, r5, #16
 8001742:	9104      	str	r1, [sp, #16]
 8001744:	4641      	mov	r1, r8
 8001746:	0409      	lsls	r1, r1, #16
 8001748:	042d      	lsls	r5, r5, #16
 800174a:	0c09      	lsrs	r1, r1, #16
 800174c:	4688      	mov	r8, r1
 800174e:	0029      	movs	r1, r5
 8001750:	0c25      	lsrs	r5, r4, #16
 8001752:	0424      	lsls	r4, r4, #16
 8001754:	4441      	add	r1, r8
 8001756:	0c24      	lsrs	r4, r4, #16
 8001758:	9105      	str	r1, [sp, #20]
 800175a:	0021      	movs	r1, r4
 800175c:	4341      	muls	r1, r0
 800175e:	4688      	mov	r8, r1
 8001760:	0021      	movs	r1, r4
 8001762:	4379      	muls	r1, r7
 8001764:	468a      	mov	sl, r1
 8001766:	4368      	muls	r0, r5
 8001768:	4641      	mov	r1, r8
 800176a:	4450      	add	r0, sl
 800176c:	4681      	mov	r9, r0
 800176e:	0c08      	lsrs	r0, r1, #16
 8001770:	4448      	add	r0, r9
 8001772:	436f      	muls	r7, r5
 8001774:	4582      	cmp	sl, r0
 8001776:	d903      	bls.n	8001780 <__aeabi_dmul+0x278>
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	0249      	lsls	r1, r1, #9
 800177c:	4689      	mov	r9, r1
 800177e:	444f      	add	r7, r9
 8001780:	0c01      	lsrs	r1, r0, #16
 8001782:	4689      	mov	r9, r1
 8001784:	0039      	movs	r1, r7
 8001786:	4449      	add	r1, r9
 8001788:	9102      	str	r1, [sp, #8]
 800178a:	4641      	mov	r1, r8
 800178c:	040f      	lsls	r7, r1, #16
 800178e:	9904      	ldr	r1, [sp, #16]
 8001790:	0c3f      	lsrs	r7, r7, #16
 8001792:	4688      	mov	r8, r1
 8001794:	0400      	lsls	r0, r0, #16
 8001796:	19c0      	adds	r0, r0, r7
 8001798:	4480      	add	r8, r0
 800179a:	4641      	mov	r1, r8
 800179c:	9104      	str	r1, [sp, #16]
 800179e:	4659      	mov	r1, fp
 80017a0:	0c0f      	lsrs	r7, r1, #16
 80017a2:	0409      	lsls	r1, r1, #16
 80017a4:	0c09      	lsrs	r1, r1, #16
 80017a6:	4688      	mov	r8, r1
 80017a8:	4359      	muls	r1, r3
 80017aa:	468a      	mov	sl, r1
 80017ac:	0039      	movs	r1, r7
 80017ae:	4351      	muls	r1, r2
 80017b0:	4689      	mov	r9, r1
 80017b2:	4641      	mov	r1, r8
 80017b4:	434a      	muls	r2, r1
 80017b6:	4651      	mov	r1, sl
 80017b8:	0c09      	lsrs	r1, r1, #16
 80017ba:	468b      	mov	fp, r1
 80017bc:	437b      	muls	r3, r7
 80017be:	18d2      	adds	r2, r2, r3
 80017c0:	445a      	add	r2, fp
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d903      	bls.n	80017ce <__aeabi_dmul+0x2c6>
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	469b      	mov	fp, r3
 80017cc:	44d9      	add	r9, fp
 80017ce:	4651      	mov	r1, sl
 80017d0:	0409      	lsls	r1, r1, #16
 80017d2:	0c09      	lsrs	r1, r1, #16
 80017d4:	468a      	mov	sl, r1
 80017d6:	4641      	mov	r1, r8
 80017d8:	4361      	muls	r1, r4
 80017da:	437c      	muls	r4, r7
 80017dc:	0c13      	lsrs	r3, r2, #16
 80017de:	0412      	lsls	r2, r2, #16
 80017e0:	444b      	add	r3, r9
 80017e2:	4452      	add	r2, sl
 80017e4:	46a1      	mov	r9, r4
 80017e6:	468a      	mov	sl, r1
 80017e8:	003c      	movs	r4, r7
 80017ea:	4641      	mov	r1, r8
 80017ec:	436c      	muls	r4, r5
 80017ee:	434d      	muls	r5, r1
 80017f0:	4651      	mov	r1, sl
 80017f2:	444d      	add	r5, r9
 80017f4:	0c0f      	lsrs	r7, r1, #16
 80017f6:	197d      	adds	r5, r7, r5
 80017f8:	45a9      	cmp	r9, r5
 80017fa:	d903      	bls.n	8001804 <__aeabi_dmul+0x2fc>
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0249      	lsls	r1, r1, #9
 8001800:	4688      	mov	r8, r1
 8001802:	4444      	add	r4, r8
 8001804:	9f04      	ldr	r7, [sp, #16]
 8001806:	9903      	ldr	r1, [sp, #12]
 8001808:	46b8      	mov	r8, r7
 800180a:	4441      	add	r1, r8
 800180c:	468b      	mov	fp, r1
 800180e:	4583      	cmp	fp, r0
 8001810:	4180      	sbcs	r0, r0
 8001812:	4241      	negs	r1, r0
 8001814:	4688      	mov	r8, r1
 8001816:	4651      	mov	r1, sl
 8001818:	0408      	lsls	r0, r1, #16
 800181a:	042f      	lsls	r7, r5, #16
 800181c:	0c00      	lsrs	r0, r0, #16
 800181e:	183f      	adds	r7, r7, r0
 8001820:	4658      	mov	r0, fp
 8001822:	9902      	ldr	r1, [sp, #8]
 8001824:	1810      	adds	r0, r2, r0
 8001826:	4689      	mov	r9, r1
 8001828:	4290      	cmp	r0, r2
 800182a:	4192      	sbcs	r2, r2
 800182c:	444f      	add	r7, r9
 800182e:	46ba      	mov	sl, r7
 8001830:	4252      	negs	r2, r2
 8001832:	4699      	mov	r9, r3
 8001834:	4693      	mov	fp, r2
 8001836:	44c2      	add	sl, r8
 8001838:	44d1      	add	r9, sl
 800183a:	44cb      	add	fp, r9
 800183c:	428f      	cmp	r7, r1
 800183e:	41bf      	sbcs	r7, r7
 8001840:	45c2      	cmp	sl, r8
 8001842:	4189      	sbcs	r1, r1
 8001844:	4599      	cmp	r9, r3
 8001846:	419b      	sbcs	r3, r3
 8001848:	4593      	cmp	fp, r2
 800184a:	4192      	sbcs	r2, r2
 800184c:	427f      	negs	r7, r7
 800184e:	4249      	negs	r1, r1
 8001850:	0c2d      	lsrs	r5, r5, #16
 8001852:	4252      	negs	r2, r2
 8001854:	430f      	orrs	r7, r1
 8001856:	425b      	negs	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	197f      	adds	r7, r7, r5
 800185c:	18ff      	adds	r7, r7, r3
 800185e:	465b      	mov	r3, fp
 8001860:	193c      	adds	r4, r7, r4
 8001862:	0ddb      	lsrs	r3, r3, #23
 8001864:	9a05      	ldr	r2, [sp, #20]
 8001866:	0264      	lsls	r4, r4, #9
 8001868:	431c      	orrs	r4, r3
 800186a:	0243      	lsls	r3, r0, #9
 800186c:	4313      	orrs	r3, r2
 800186e:	1e5d      	subs	r5, r3, #1
 8001870:	41ab      	sbcs	r3, r5
 8001872:	465a      	mov	r2, fp
 8001874:	0dc0      	lsrs	r0, r0, #23
 8001876:	4303      	orrs	r3, r0
 8001878:	0252      	lsls	r2, r2, #9
 800187a:	4313      	orrs	r3, r2
 800187c:	01e2      	lsls	r2, r4, #7
 800187e:	d556      	bpl.n	800192e <__aeabi_dmul+0x426>
 8001880:	2001      	movs	r0, #1
 8001882:	085a      	lsrs	r2, r3, #1
 8001884:	4003      	ands	r3, r0
 8001886:	4313      	orrs	r3, r2
 8001888:	07e2      	lsls	r2, r4, #31
 800188a:	4313      	orrs	r3, r2
 800188c:	0864      	lsrs	r4, r4, #1
 800188e:	485a      	ldr	r0, [pc, #360]	; (80019f8 <__aeabi_dmul+0x4f0>)
 8001890:	4460      	add	r0, ip
 8001892:	2800      	cmp	r0, #0
 8001894:	dd4d      	ble.n	8001932 <__aeabi_dmul+0x42a>
 8001896:	075a      	lsls	r2, r3, #29
 8001898:	d009      	beq.n	80018ae <__aeabi_dmul+0x3a6>
 800189a:	220f      	movs	r2, #15
 800189c:	401a      	ands	r2, r3
 800189e:	2a04      	cmp	r2, #4
 80018a0:	d005      	beq.n	80018ae <__aeabi_dmul+0x3a6>
 80018a2:	1d1a      	adds	r2, r3, #4
 80018a4:	429a      	cmp	r2, r3
 80018a6:	419b      	sbcs	r3, r3
 80018a8:	425b      	negs	r3, r3
 80018aa:	18e4      	adds	r4, r4, r3
 80018ac:	0013      	movs	r3, r2
 80018ae:	01e2      	lsls	r2, r4, #7
 80018b0:	d504      	bpl.n	80018bc <__aeabi_dmul+0x3b4>
 80018b2:	2080      	movs	r0, #128	; 0x80
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <__aeabi_dmul+0x4f4>)
 80018b6:	00c0      	lsls	r0, r0, #3
 80018b8:	4014      	ands	r4, r2
 80018ba:	4460      	add	r0, ip
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <__aeabi_dmul+0x4f8>)
 80018be:	4290      	cmp	r0, r2
 80018c0:	dd00      	ble.n	80018c4 <__aeabi_dmul+0x3bc>
 80018c2:	e6e3      	b.n	800168c <__aeabi_dmul+0x184>
 80018c4:	2501      	movs	r5, #1
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	0762      	lsls	r2, r4, #29
 80018ca:	431a      	orrs	r2, r3
 80018cc:	0264      	lsls	r4, r4, #9
 80018ce:	9b01      	ldr	r3, [sp, #4]
 80018d0:	4691      	mov	r9, r2
 80018d2:	0b22      	lsrs	r2, r4, #12
 80018d4:	0544      	lsls	r4, r0, #21
 80018d6:	0d64      	lsrs	r4, r4, #21
 80018d8:	401d      	ands	r5, r3
 80018da:	e67c      	b.n	80015d6 <__aeabi_dmul+0xce>
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	4659      	mov	r1, fp
 80018e0:	0312      	lsls	r2, r2, #12
 80018e2:	4211      	tst	r1, r2
 80018e4:	d008      	beq.n	80018f8 <__aeabi_dmul+0x3f0>
 80018e6:	4214      	tst	r4, r2
 80018e8:	d106      	bne.n	80018f8 <__aeabi_dmul+0x3f0>
 80018ea:	4322      	orrs	r2, r4
 80018ec:	0312      	lsls	r2, r2, #12
 80018ee:	0b12      	lsrs	r2, r2, #12
 80018f0:	4645      	mov	r5, r8
 80018f2:	4699      	mov	r9, r3
 80018f4:	4c43      	ldr	r4, [pc, #268]	; (8001a04 <__aeabi_dmul+0x4fc>)
 80018f6:	e66e      	b.n	80015d6 <__aeabi_dmul+0xce>
 80018f8:	465b      	mov	r3, fp
 80018fa:	431a      	orrs	r2, r3
 80018fc:	0312      	lsls	r2, r2, #12
 80018fe:	0b12      	lsrs	r2, r2, #12
 8001900:	4c40      	ldr	r4, [pc, #256]	; (8001a04 <__aeabi_dmul+0x4fc>)
 8001902:	e668      	b.n	80015d6 <__aeabi_dmul+0xce>
 8001904:	0003      	movs	r3, r0
 8001906:	4654      	mov	r4, sl
 8001908:	3b28      	subs	r3, #40	; 0x28
 800190a:	409c      	lsls	r4, r3
 800190c:	2300      	movs	r3, #0
 800190e:	e6b9      	b.n	8001684 <__aeabi_dmul+0x17c>
 8001910:	f000 fc3e 	bl	8002190 <__clzsi2>
 8001914:	3020      	adds	r0, #32
 8001916:	e6a6      	b.n	8001666 <__aeabi_dmul+0x15e>
 8001918:	0003      	movs	r3, r0
 800191a:	3b28      	subs	r3, #40	; 0x28
 800191c:	409f      	lsls	r7, r3
 800191e:	2300      	movs	r3, #0
 8001920:	46bb      	mov	fp, r7
 8001922:	4699      	mov	r9, r3
 8001924:	e68a      	b.n	800163c <__aeabi_dmul+0x134>
 8001926:	f000 fc33 	bl	8002190 <__clzsi2>
 800192a:	3020      	adds	r0, #32
 800192c:	e674      	b.n	8001618 <__aeabi_dmul+0x110>
 800192e:	46b4      	mov	ip, r6
 8001930:	e7ad      	b.n	800188e <__aeabi_dmul+0x386>
 8001932:	2501      	movs	r5, #1
 8001934:	1a2a      	subs	r2, r5, r0
 8001936:	2a38      	cmp	r2, #56	; 0x38
 8001938:	dd06      	ble.n	8001948 <__aeabi_dmul+0x440>
 800193a:	9b01      	ldr	r3, [sp, #4]
 800193c:	2400      	movs	r4, #0
 800193e:	401d      	ands	r5, r3
 8001940:	2300      	movs	r3, #0
 8001942:	2200      	movs	r2, #0
 8001944:	4699      	mov	r9, r3
 8001946:	e646      	b.n	80015d6 <__aeabi_dmul+0xce>
 8001948:	2a1f      	cmp	r2, #31
 800194a:	dc21      	bgt.n	8001990 <__aeabi_dmul+0x488>
 800194c:	2520      	movs	r5, #32
 800194e:	0020      	movs	r0, r4
 8001950:	1aad      	subs	r5, r5, r2
 8001952:	001e      	movs	r6, r3
 8001954:	40ab      	lsls	r3, r5
 8001956:	40a8      	lsls	r0, r5
 8001958:	40d6      	lsrs	r6, r2
 800195a:	1e5d      	subs	r5, r3, #1
 800195c:	41ab      	sbcs	r3, r5
 800195e:	4330      	orrs	r0, r6
 8001960:	4318      	orrs	r0, r3
 8001962:	40d4      	lsrs	r4, r2
 8001964:	0743      	lsls	r3, r0, #29
 8001966:	d009      	beq.n	800197c <__aeabi_dmul+0x474>
 8001968:	230f      	movs	r3, #15
 800196a:	4003      	ands	r3, r0
 800196c:	2b04      	cmp	r3, #4
 800196e:	d005      	beq.n	800197c <__aeabi_dmul+0x474>
 8001970:	0003      	movs	r3, r0
 8001972:	1d18      	adds	r0, r3, #4
 8001974:	4298      	cmp	r0, r3
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	18e4      	adds	r4, r4, r3
 800197c:	0223      	lsls	r3, r4, #8
 800197e:	d521      	bpl.n	80019c4 <__aeabi_dmul+0x4bc>
 8001980:	2501      	movs	r5, #1
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	2401      	movs	r4, #1
 8001986:	401d      	ands	r5, r3
 8001988:	2300      	movs	r3, #0
 800198a:	2200      	movs	r2, #0
 800198c:	4699      	mov	r9, r3
 800198e:	e622      	b.n	80015d6 <__aeabi_dmul+0xce>
 8001990:	251f      	movs	r5, #31
 8001992:	0021      	movs	r1, r4
 8001994:	426d      	negs	r5, r5
 8001996:	1a28      	subs	r0, r5, r0
 8001998:	40c1      	lsrs	r1, r0
 800199a:	0008      	movs	r0, r1
 800199c:	2a20      	cmp	r2, #32
 800199e:	d01d      	beq.n	80019dc <__aeabi_dmul+0x4d4>
 80019a0:	355f      	adds	r5, #95	; 0x5f
 80019a2:	1aaa      	subs	r2, r5, r2
 80019a4:	4094      	lsls	r4, r2
 80019a6:	4323      	orrs	r3, r4
 80019a8:	1e5c      	subs	r4, r3, #1
 80019aa:	41a3      	sbcs	r3, r4
 80019ac:	2507      	movs	r5, #7
 80019ae:	4303      	orrs	r3, r0
 80019b0:	401d      	ands	r5, r3
 80019b2:	2200      	movs	r2, #0
 80019b4:	2d00      	cmp	r5, #0
 80019b6:	d009      	beq.n	80019cc <__aeabi_dmul+0x4c4>
 80019b8:	220f      	movs	r2, #15
 80019ba:	2400      	movs	r4, #0
 80019bc:	401a      	ands	r2, r3
 80019be:	0018      	movs	r0, r3
 80019c0:	2a04      	cmp	r2, #4
 80019c2:	d1d6      	bne.n	8001972 <__aeabi_dmul+0x46a>
 80019c4:	0003      	movs	r3, r0
 80019c6:	0765      	lsls	r5, r4, #29
 80019c8:	0264      	lsls	r4, r4, #9
 80019ca:	0b22      	lsrs	r2, r4, #12
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	432b      	orrs	r3, r5
 80019d0:	2501      	movs	r5, #1
 80019d2:	4699      	mov	r9, r3
 80019d4:	9b01      	ldr	r3, [sp, #4]
 80019d6:	2400      	movs	r4, #0
 80019d8:	401d      	ands	r5, r3
 80019da:	e5fc      	b.n	80015d6 <__aeabi_dmul+0xce>
 80019dc:	2400      	movs	r4, #0
 80019de:	e7e2      	b.n	80019a6 <__aeabi_dmul+0x49e>
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	2501      	movs	r5, #1
 80019e4:	0312      	lsls	r2, r2, #12
 80019e6:	4322      	orrs	r2, r4
 80019e8:	9901      	ldr	r1, [sp, #4]
 80019ea:	0312      	lsls	r2, r2, #12
 80019ec:	0b12      	lsrs	r2, r2, #12
 80019ee:	400d      	ands	r5, r1
 80019f0:	4699      	mov	r9, r3
 80019f2:	4c04      	ldr	r4, [pc, #16]	; (8001a04 <__aeabi_dmul+0x4fc>)
 80019f4:	e5ef      	b.n	80015d6 <__aeabi_dmul+0xce>
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	000003ff 	.word	0x000003ff
 80019fc:	feffffff 	.word	0xfeffffff
 8001a00:	000007fe 	.word	0x000007fe
 8001a04:	000007ff 	.word	0x000007ff

08001a08 <__aeabi_dsub>:
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0a:	4646      	mov	r6, r8
 8001a0c:	46d6      	mov	lr, sl
 8001a0e:	464f      	mov	r7, r9
 8001a10:	030c      	lsls	r4, r1, #12
 8001a12:	b5c0      	push	{r6, r7, lr}
 8001a14:	0fcd      	lsrs	r5, r1, #31
 8001a16:	004e      	lsls	r6, r1, #1
 8001a18:	0a61      	lsrs	r1, r4, #9
 8001a1a:	0f44      	lsrs	r4, r0, #29
 8001a1c:	430c      	orrs	r4, r1
 8001a1e:	00c1      	lsls	r1, r0, #3
 8001a20:	0058      	lsls	r0, r3, #1
 8001a22:	0d40      	lsrs	r0, r0, #21
 8001a24:	4684      	mov	ip, r0
 8001a26:	468a      	mov	sl, r1
 8001a28:	000f      	movs	r7, r1
 8001a2a:	0319      	lsls	r1, r3, #12
 8001a2c:	0f50      	lsrs	r0, r2, #29
 8001a2e:	0a49      	lsrs	r1, r1, #9
 8001a30:	4301      	orrs	r1, r0
 8001a32:	48c6      	ldr	r0, [pc, #792]	; (8001d4c <__aeabi_dsub+0x344>)
 8001a34:	0d76      	lsrs	r6, r6, #21
 8001a36:	46a8      	mov	r8, r5
 8001a38:	0fdb      	lsrs	r3, r3, #31
 8001a3a:	00d2      	lsls	r2, r2, #3
 8001a3c:	4584      	cmp	ip, r0
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dsub+0x3a>
 8001a40:	e0d8      	b.n	8001bf4 <__aeabi_dsub+0x1ec>
 8001a42:	2001      	movs	r0, #1
 8001a44:	4043      	eors	r3, r0
 8001a46:	42ab      	cmp	r3, r5
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x44>
 8001a4a:	e0a6      	b.n	8001b9a <__aeabi_dsub+0x192>
 8001a4c:	4660      	mov	r0, ip
 8001a4e:	1a35      	subs	r5, r6, r0
 8001a50:	2d00      	cmp	r5, #0
 8001a52:	dc00      	bgt.n	8001a56 <__aeabi_dsub+0x4e>
 8001a54:	e105      	b.n	8001c62 <__aeabi_dsub+0x25a>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d110      	bne.n	8001a7c <__aeabi_dsub+0x74>
 8001a5a:	000b      	movs	r3, r1
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x5a>
 8001a60:	e0d7      	b.n	8001c12 <__aeabi_dsub+0x20a>
 8001a62:	1e6b      	subs	r3, r5, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d000      	beq.n	8001a6a <__aeabi_dsub+0x62>
 8001a68:	e14b      	b.n	8001d02 <__aeabi_dsub+0x2fa>
 8001a6a:	4653      	mov	r3, sl
 8001a6c:	1a9f      	subs	r7, r3, r2
 8001a6e:	45ba      	cmp	sl, r7
 8001a70:	4180      	sbcs	r0, r0
 8001a72:	1a64      	subs	r4, r4, r1
 8001a74:	4240      	negs	r0, r0
 8001a76:	1a24      	subs	r4, r4, r0
 8001a78:	2601      	movs	r6, #1
 8001a7a:	e01e      	b.n	8001aba <__aeabi_dsub+0xb2>
 8001a7c:	4bb3      	ldr	r3, [pc, #716]	; (8001d4c <__aeabi_dsub+0x344>)
 8001a7e:	429e      	cmp	r6, r3
 8001a80:	d048      	beq.n	8001b14 <__aeabi_dsub+0x10c>
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	4319      	orrs	r1, r3
 8001a88:	2d38      	cmp	r5, #56	; 0x38
 8001a8a:	dd00      	ble.n	8001a8e <__aeabi_dsub+0x86>
 8001a8c:	e119      	b.n	8001cc2 <__aeabi_dsub+0x2ba>
 8001a8e:	2d1f      	cmp	r5, #31
 8001a90:	dd00      	ble.n	8001a94 <__aeabi_dsub+0x8c>
 8001a92:	e14c      	b.n	8001d2e <__aeabi_dsub+0x326>
 8001a94:	2320      	movs	r3, #32
 8001a96:	000f      	movs	r7, r1
 8001a98:	1b5b      	subs	r3, r3, r5
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	409f      	lsls	r7, r3
 8001aa0:	40e8      	lsrs	r0, r5
 8001aa2:	1e53      	subs	r3, r2, #1
 8001aa4:	419a      	sbcs	r2, r3
 8001aa6:	40e9      	lsrs	r1, r5
 8001aa8:	4307      	orrs	r7, r0
 8001aaa:	4317      	orrs	r7, r2
 8001aac:	4653      	mov	r3, sl
 8001aae:	1bdf      	subs	r7, r3, r7
 8001ab0:	1a61      	subs	r1, r4, r1
 8001ab2:	45ba      	cmp	sl, r7
 8001ab4:	41a4      	sbcs	r4, r4
 8001ab6:	4264      	negs	r4, r4
 8001ab8:	1b0c      	subs	r4, r1, r4
 8001aba:	0223      	lsls	r3, r4, #8
 8001abc:	d400      	bmi.n	8001ac0 <__aeabi_dsub+0xb8>
 8001abe:	e0c5      	b.n	8001c4c <__aeabi_dsub+0x244>
 8001ac0:	0264      	lsls	r4, r4, #9
 8001ac2:	0a65      	lsrs	r5, r4, #9
 8001ac4:	2d00      	cmp	r5, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0xc2>
 8001ac8:	e0f6      	b.n	8001cb8 <__aeabi_dsub+0x2b0>
 8001aca:	0028      	movs	r0, r5
 8001acc:	f000 fb60 	bl	8002190 <__clzsi2>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	3b08      	subs	r3, #8
 8001ad4:	2b1f      	cmp	r3, #31
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_dsub+0xd2>
 8001ad8:	e0e9      	b.n	8001cae <__aeabi_dsub+0x2a6>
 8001ada:	2220      	movs	r2, #32
 8001adc:	003c      	movs	r4, r7
 8001ade:	1ad2      	subs	r2, r2, r3
 8001ae0:	409d      	lsls	r5, r3
 8001ae2:	40d4      	lsrs	r4, r2
 8001ae4:	409f      	lsls	r7, r3
 8001ae6:	4325      	orrs	r5, r4
 8001ae8:	429e      	cmp	r6, r3
 8001aea:	dd00      	ble.n	8001aee <__aeabi_dsub+0xe6>
 8001aec:	e0db      	b.n	8001ca6 <__aeabi_dsub+0x29e>
 8001aee:	1b9e      	subs	r6, r3, r6
 8001af0:	1c73      	adds	r3, r6, #1
 8001af2:	2b1f      	cmp	r3, #31
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_dsub+0xf0>
 8001af6:	e10a      	b.n	8001d0e <__aeabi_dsub+0x306>
 8001af8:	2220      	movs	r2, #32
 8001afa:	0038      	movs	r0, r7
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	0029      	movs	r1, r5
 8001b00:	4097      	lsls	r7, r2
 8001b02:	002c      	movs	r4, r5
 8001b04:	4091      	lsls	r1, r2
 8001b06:	40d8      	lsrs	r0, r3
 8001b08:	1e7a      	subs	r2, r7, #1
 8001b0a:	4197      	sbcs	r7, r2
 8001b0c:	40dc      	lsrs	r4, r3
 8001b0e:	2600      	movs	r6, #0
 8001b10:	4301      	orrs	r1, r0
 8001b12:	430f      	orrs	r7, r1
 8001b14:	077b      	lsls	r3, r7, #29
 8001b16:	d009      	beq.n	8001b2c <__aeabi_dsub+0x124>
 8001b18:	230f      	movs	r3, #15
 8001b1a:	403b      	ands	r3, r7
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d005      	beq.n	8001b2c <__aeabi_dsub+0x124>
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	42bb      	cmp	r3, r7
 8001b24:	41bf      	sbcs	r7, r7
 8001b26:	427f      	negs	r7, r7
 8001b28:	19e4      	adds	r4, r4, r7
 8001b2a:	001f      	movs	r7, r3
 8001b2c:	0223      	lsls	r3, r4, #8
 8001b2e:	d525      	bpl.n	8001b7c <__aeabi_dsub+0x174>
 8001b30:	4b86      	ldr	r3, [pc, #536]	; (8001d4c <__aeabi_dsub+0x344>)
 8001b32:	3601      	adds	r6, #1
 8001b34:	429e      	cmp	r6, r3
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x132>
 8001b38:	e0af      	b.n	8001c9a <__aeabi_dsub+0x292>
 8001b3a:	4b85      	ldr	r3, [pc, #532]	; (8001d50 <__aeabi_dsub+0x348>)
 8001b3c:	2501      	movs	r5, #1
 8001b3e:	401c      	ands	r4, r3
 8001b40:	4643      	mov	r3, r8
 8001b42:	0762      	lsls	r2, r4, #29
 8001b44:	08ff      	lsrs	r7, r7, #3
 8001b46:	0264      	lsls	r4, r4, #9
 8001b48:	0576      	lsls	r6, r6, #21
 8001b4a:	4317      	orrs	r7, r2
 8001b4c:	0b24      	lsrs	r4, r4, #12
 8001b4e:	0d76      	lsrs	r6, r6, #21
 8001b50:	401d      	ands	r5, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	0324      	lsls	r4, r4, #12
 8001b56:	0b23      	lsrs	r3, r4, #12
 8001b58:	0d0c      	lsrs	r4, r1, #20
 8001b5a:	4a7e      	ldr	r2, [pc, #504]	; (8001d54 <__aeabi_dsub+0x34c>)
 8001b5c:	0524      	lsls	r4, r4, #20
 8001b5e:	431c      	orrs	r4, r3
 8001b60:	4014      	ands	r4, r2
 8001b62:	0533      	lsls	r3, r6, #20
 8001b64:	4323      	orrs	r3, r4
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	07ed      	lsls	r5, r5, #31
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	432b      	orrs	r3, r5
 8001b6e:	0038      	movs	r0, r7
 8001b70:	0019      	movs	r1, r3
 8001b72:	bc1c      	pop	{r2, r3, r4}
 8001b74:	4690      	mov	r8, r2
 8001b76:	4699      	mov	r9, r3
 8001b78:	46a2      	mov	sl, r4
 8001b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b7c:	2501      	movs	r5, #1
 8001b7e:	4643      	mov	r3, r8
 8001b80:	0762      	lsls	r2, r4, #29
 8001b82:	08ff      	lsrs	r7, r7, #3
 8001b84:	4317      	orrs	r7, r2
 8001b86:	08e4      	lsrs	r4, r4, #3
 8001b88:	401d      	ands	r5, r3
 8001b8a:	4b70      	ldr	r3, [pc, #448]	; (8001d4c <__aeabi_dsub+0x344>)
 8001b8c:	429e      	cmp	r6, r3
 8001b8e:	d036      	beq.n	8001bfe <__aeabi_dsub+0x1f6>
 8001b90:	0324      	lsls	r4, r4, #12
 8001b92:	0576      	lsls	r6, r6, #21
 8001b94:	0b24      	lsrs	r4, r4, #12
 8001b96:	0d76      	lsrs	r6, r6, #21
 8001b98:	e7db      	b.n	8001b52 <__aeabi_dsub+0x14a>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	1af3      	subs	r3, r6, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	dc00      	bgt.n	8001ba4 <__aeabi_dsub+0x19c>
 8001ba2:	e094      	b.n	8001cce <__aeabi_dsub+0x2c6>
 8001ba4:	4660      	mov	r0, ip
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d035      	beq.n	8001c16 <__aeabi_dsub+0x20e>
 8001baa:	4868      	ldr	r0, [pc, #416]	; (8001d4c <__aeabi_dsub+0x344>)
 8001bac:	4286      	cmp	r6, r0
 8001bae:	d0b1      	beq.n	8001b14 <__aeabi_dsub+0x10c>
 8001bb0:	2780      	movs	r7, #128	; 0x80
 8001bb2:	043f      	lsls	r7, r7, #16
 8001bb4:	4339      	orrs	r1, r7
 8001bb6:	2b38      	cmp	r3, #56	; 0x38
 8001bb8:	dc00      	bgt.n	8001bbc <__aeabi_dsub+0x1b4>
 8001bba:	e0fd      	b.n	8001db8 <__aeabi_dsub+0x3b0>
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	0017      	movs	r7, r2
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	1e7a      	subs	r2, r7, #1
 8001bc4:	4197      	sbcs	r7, r2
 8001bc6:	4457      	add	r7, sl
 8001bc8:	4557      	cmp	r7, sl
 8001bca:	4180      	sbcs	r0, r0
 8001bcc:	1909      	adds	r1, r1, r4
 8001bce:	4244      	negs	r4, r0
 8001bd0:	190c      	adds	r4, r1, r4
 8001bd2:	0223      	lsls	r3, r4, #8
 8001bd4:	d53a      	bpl.n	8001c4c <__aeabi_dsub+0x244>
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <__aeabi_dsub+0x344>)
 8001bd8:	3601      	adds	r6, #1
 8001bda:	429e      	cmp	r6, r3
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x1d8>
 8001bde:	e14b      	b.n	8001e78 <__aeabi_dsub+0x470>
 8001be0:	2201      	movs	r2, #1
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <__aeabi_dsub+0x348>)
 8001be4:	401c      	ands	r4, r3
 8001be6:	087b      	lsrs	r3, r7, #1
 8001be8:	4017      	ands	r7, r2
 8001bea:	431f      	orrs	r7, r3
 8001bec:	07e2      	lsls	r2, r4, #31
 8001bee:	4317      	orrs	r7, r2
 8001bf0:	0864      	lsrs	r4, r4, #1
 8001bf2:	e78f      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	4310      	orrs	r0, r2
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x1f4>
 8001bfa:	e724      	b.n	8001a46 <__aeabi_dsub+0x3e>
 8001bfc:	e721      	b.n	8001a42 <__aeabi_dsub+0x3a>
 8001bfe:	0023      	movs	r3, r4
 8001c00:	433b      	orrs	r3, r7
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x1fe>
 8001c04:	e1b9      	b.n	8001f7a <__aeabi_dsub+0x572>
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	0312      	lsls	r2, r2, #12
 8001c0a:	4314      	orrs	r4, r2
 8001c0c:	0324      	lsls	r4, r4, #12
 8001c0e:	0b24      	lsrs	r4, r4, #12
 8001c10:	e79f      	b.n	8001b52 <__aeabi_dsub+0x14a>
 8001c12:	002e      	movs	r6, r5
 8001c14:	e77e      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001c16:	0008      	movs	r0, r1
 8001c18:	4310      	orrs	r0, r2
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x216>
 8001c1c:	e0ca      	b.n	8001db4 <__aeabi_dsub+0x3ac>
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	4684      	mov	ip, r0
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d000      	beq.n	8001c28 <__aeabi_dsub+0x220>
 8001c26:	e0e7      	b.n	8001df8 <__aeabi_dsub+0x3f0>
 8001c28:	4452      	add	r2, sl
 8001c2a:	4552      	cmp	r2, sl
 8001c2c:	4180      	sbcs	r0, r0
 8001c2e:	1864      	adds	r4, r4, r1
 8001c30:	4240      	negs	r0, r0
 8001c32:	1824      	adds	r4, r4, r0
 8001c34:	0017      	movs	r7, r2
 8001c36:	2601      	movs	r6, #1
 8001c38:	0223      	lsls	r3, r4, #8
 8001c3a:	d507      	bpl.n	8001c4c <__aeabi_dsub+0x244>
 8001c3c:	2602      	movs	r6, #2
 8001c3e:	e7cf      	b.n	8001be0 <__aeabi_dsub+0x1d8>
 8001c40:	4664      	mov	r4, ip
 8001c42:	432c      	orrs	r4, r5
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dsub+0x240>
 8001c46:	e1b3      	b.n	8001fb0 <__aeabi_dsub+0x5a8>
 8001c48:	002c      	movs	r4, r5
 8001c4a:	4667      	mov	r7, ip
 8001c4c:	077b      	lsls	r3, r7, #29
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_dsub+0x24a>
 8001c50:	e762      	b.n	8001b18 <__aeabi_dsub+0x110>
 8001c52:	0763      	lsls	r3, r4, #29
 8001c54:	08ff      	lsrs	r7, r7, #3
 8001c56:	431f      	orrs	r7, r3
 8001c58:	2501      	movs	r5, #1
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	08e4      	lsrs	r4, r4, #3
 8001c5e:	401d      	ands	r5, r3
 8001c60:	e793      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001c62:	2d00      	cmp	r5, #0
 8001c64:	d178      	bne.n	8001d58 <__aeabi_dsub+0x350>
 8001c66:	1c75      	adds	r5, r6, #1
 8001c68:	056d      	lsls	r5, r5, #21
 8001c6a:	0d6d      	lsrs	r5, r5, #21
 8001c6c:	2d01      	cmp	r5, #1
 8001c6e:	dc00      	bgt.n	8001c72 <__aeabi_dsub+0x26a>
 8001c70:	e0f2      	b.n	8001e58 <__aeabi_dsub+0x450>
 8001c72:	4650      	mov	r0, sl
 8001c74:	1a80      	subs	r0, r0, r2
 8001c76:	4582      	cmp	sl, r0
 8001c78:	41bf      	sbcs	r7, r7
 8001c7a:	1a65      	subs	r5, r4, r1
 8001c7c:	427f      	negs	r7, r7
 8001c7e:	1bed      	subs	r5, r5, r7
 8001c80:	4684      	mov	ip, r0
 8001c82:	0228      	lsls	r0, r5, #8
 8001c84:	d400      	bmi.n	8001c88 <__aeabi_dsub+0x280>
 8001c86:	e08c      	b.n	8001da2 <__aeabi_dsub+0x39a>
 8001c88:	4650      	mov	r0, sl
 8001c8a:	1a17      	subs	r7, r2, r0
 8001c8c:	42ba      	cmp	r2, r7
 8001c8e:	4192      	sbcs	r2, r2
 8001c90:	1b0c      	subs	r4, r1, r4
 8001c92:	4255      	negs	r5, r2
 8001c94:	1b65      	subs	r5, r4, r5
 8001c96:	4698      	mov	r8, r3
 8001c98:	e714      	b.n	8001ac4 <__aeabi_dsub+0xbc>
 8001c9a:	2501      	movs	r5, #1
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	401d      	ands	r5, r3
 8001ca2:	2700      	movs	r7, #0
 8001ca4:	e755      	b.n	8001b52 <__aeabi_dsub+0x14a>
 8001ca6:	4c2a      	ldr	r4, [pc, #168]	; (8001d50 <__aeabi_dsub+0x348>)
 8001ca8:	1af6      	subs	r6, r6, r3
 8001caa:	402c      	ands	r4, r5
 8001cac:	e732      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001cae:	003d      	movs	r5, r7
 8001cb0:	3828      	subs	r0, #40	; 0x28
 8001cb2:	4085      	lsls	r5, r0
 8001cb4:	2700      	movs	r7, #0
 8001cb6:	e717      	b.n	8001ae8 <__aeabi_dsub+0xe0>
 8001cb8:	0038      	movs	r0, r7
 8001cba:	f000 fa69 	bl	8002190 <__clzsi2>
 8001cbe:	3020      	adds	r0, #32
 8001cc0:	e706      	b.n	8001ad0 <__aeabi_dsub+0xc8>
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	0017      	movs	r7, r2
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	1e7a      	subs	r2, r7, #1
 8001cca:	4197      	sbcs	r7, r2
 8001ccc:	e6ee      	b.n	8001aac <__aeabi_dsub+0xa4>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x2cc>
 8001cd2:	e0e5      	b.n	8001ea0 <__aeabi_dsub+0x498>
 8001cd4:	1c73      	adds	r3, r6, #1
 8001cd6:	469c      	mov	ip, r3
 8001cd8:	055b      	lsls	r3, r3, #21
 8001cda:	0d5b      	lsrs	r3, r3, #21
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	dc00      	bgt.n	8001ce2 <__aeabi_dsub+0x2da>
 8001ce0:	e09f      	b.n	8001e22 <__aeabi_dsub+0x41a>
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <__aeabi_dsub+0x344>)
 8001ce4:	459c      	cmp	ip, r3
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x2e2>
 8001ce8:	e0c5      	b.n	8001e76 <__aeabi_dsub+0x46e>
 8001cea:	4452      	add	r2, sl
 8001cec:	4552      	cmp	r2, sl
 8001cee:	4180      	sbcs	r0, r0
 8001cf0:	1864      	adds	r4, r4, r1
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	1824      	adds	r4, r4, r0
 8001cf6:	07e7      	lsls	r7, r4, #31
 8001cf8:	0852      	lsrs	r2, r2, #1
 8001cfa:	4317      	orrs	r7, r2
 8001cfc:	0864      	lsrs	r4, r4, #1
 8001cfe:	4666      	mov	r6, ip
 8001d00:	e708      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001d02:	4812      	ldr	r0, [pc, #72]	; (8001d4c <__aeabi_dsub+0x344>)
 8001d04:	4285      	cmp	r5, r0
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dsub+0x302>
 8001d08:	e085      	b.n	8001e16 <__aeabi_dsub+0x40e>
 8001d0a:	001d      	movs	r5, r3
 8001d0c:	e6bc      	b.n	8001a88 <__aeabi_dsub+0x80>
 8001d0e:	0029      	movs	r1, r5
 8001d10:	3e1f      	subs	r6, #31
 8001d12:	40f1      	lsrs	r1, r6
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d100      	bne.n	8001d1a <__aeabi_dsub+0x312>
 8001d18:	e07f      	b.n	8001e1a <__aeabi_dsub+0x412>
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	409d      	lsls	r5, r3
 8001d20:	432f      	orrs	r7, r5
 8001d22:	1e7d      	subs	r5, r7, #1
 8001d24:	41af      	sbcs	r7, r5
 8001d26:	2400      	movs	r4, #0
 8001d28:	430f      	orrs	r7, r1
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	e78e      	b.n	8001c4c <__aeabi_dsub+0x244>
 8001d2e:	002b      	movs	r3, r5
 8001d30:	000f      	movs	r7, r1
 8001d32:	3b20      	subs	r3, #32
 8001d34:	40df      	lsrs	r7, r3
 8001d36:	2d20      	cmp	r5, #32
 8001d38:	d071      	beq.n	8001e1e <__aeabi_dsub+0x416>
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	1b5d      	subs	r5, r3, r5
 8001d3e:	40a9      	lsls	r1, r5
 8001d40:	430a      	orrs	r2, r1
 8001d42:	1e51      	subs	r1, r2, #1
 8001d44:	418a      	sbcs	r2, r1
 8001d46:	2100      	movs	r1, #0
 8001d48:	4317      	orrs	r7, r2
 8001d4a:	e6af      	b.n	8001aac <__aeabi_dsub+0xa4>
 8001d4c:	000007ff 	.word	0x000007ff
 8001d50:	ff7fffff 	.word	0xff7fffff
 8001d54:	800fffff 	.word	0x800fffff
 8001d58:	2e00      	cmp	r6, #0
 8001d5a:	d03e      	beq.n	8001dda <__aeabi_dsub+0x3d2>
 8001d5c:	4eb3      	ldr	r6, [pc, #716]	; (800202c <__aeabi_dsub+0x624>)
 8001d5e:	45b4      	cmp	ip, r6
 8001d60:	d045      	beq.n	8001dee <__aeabi_dsub+0x3e6>
 8001d62:	2680      	movs	r6, #128	; 0x80
 8001d64:	0436      	lsls	r6, r6, #16
 8001d66:	426d      	negs	r5, r5
 8001d68:	4334      	orrs	r4, r6
 8001d6a:	2d38      	cmp	r5, #56	; 0x38
 8001d6c:	dd00      	ble.n	8001d70 <__aeabi_dsub+0x368>
 8001d6e:	e0a8      	b.n	8001ec2 <__aeabi_dsub+0x4ba>
 8001d70:	2d1f      	cmp	r5, #31
 8001d72:	dd00      	ble.n	8001d76 <__aeabi_dsub+0x36e>
 8001d74:	e11f      	b.n	8001fb6 <__aeabi_dsub+0x5ae>
 8001d76:	2620      	movs	r6, #32
 8001d78:	0027      	movs	r7, r4
 8001d7a:	4650      	mov	r0, sl
 8001d7c:	1b76      	subs	r6, r6, r5
 8001d7e:	40b7      	lsls	r7, r6
 8001d80:	40e8      	lsrs	r0, r5
 8001d82:	4307      	orrs	r7, r0
 8001d84:	4650      	mov	r0, sl
 8001d86:	40b0      	lsls	r0, r6
 8001d88:	1e46      	subs	r6, r0, #1
 8001d8a:	41b0      	sbcs	r0, r6
 8001d8c:	40ec      	lsrs	r4, r5
 8001d8e:	4338      	orrs	r0, r7
 8001d90:	1a17      	subs	r7, r2, r0
 8001d92:	42ba      	cmp	r2, r7
 8001d94:	4192      	sbcs	r2, r2
 8001d96:	1b0c      	subs	r4, r1, r4
 8001d98:	4252      	negs	r2, r2
 8001d9a:	1aa4      	subs	r4, r4, r2
 8001d9c:	4666      	mov	r6, ip
 8001d9e:	4698      	mov	r8, r3
 8001da0:	e68b      	b.n	8001aba <__aeabi_dsub+0xb2>
 8001da2:	4664      	mov	r4, ip
 8001da4:	4667      	mov	r7, ip
 8001da6:	432c      	orrs	r4, r5
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x3a4>
 8001daa:	e68b      	b.n	8001ac4 <__aeabi_dsub+0xbc>
 8001dac:	2500      	movs	r5, #0
 8001dae:	2600      	movs	r6, #0
 8001db0:	2700      	movs	r7, #0
 8001db2:	e6ea      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001db4:	001e      	movs	r6, r3
 8001db6:	e6ad      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001db8:	2b1f      	cmp	r3, #31
 8001dba:	dc60      	bgt.n	8001e7e <__aeabi_dsub+0x476>
 8001dbc:	2720      	movs	r7, #32
 8001dbe:	1af8      	subs	r0, r7, r3
 8001dc0:	000f      	movs	r7, r1
 8001dc2:	4684      	mov	ip, r0
 8001dc4:	4087      	lsls	r7, r0
 8001dc6:	0010      	movs	r0, r2
 8001dc8:	40d8      	lsrs	r0, r3
 8001dca:	4307      	orrs	r7, r0
 8001dcc:	4660      	mov	r0, ip
 8001dce:	4082      	lsls	r2, r0
 8001dd0:	1e50      	subs	r0, r2, #1
 8001dd2:	4182      	sbcs	r2, r0
 8001dd4:	40d9      	lsrs	r1, r3
 8001dd6:	4317      	orrs	r7, r2
 8001dd8:	e6f5      	b.n	8001bc6 <__aeabi_dsub+0x1be>
 8001dda:	0026      	movs	r6, r4
 8001ddc:	4650      	mov	r0, sl
 8001dde:	4306      	orrs	r6, r0
 8001de0:	d005      	beq.n	8001dee <__aeabi_dsub+0x3e6>
 8001de2:	43ed      	mvns	r5, r5
 8001de4:	2d00      	cmp	r5, #0
 8001de6:	d0d3      	beq.n	8001d90 <__aeabi_dsub+0x388>
 8001de8:	4e90      	ldr	r6, [pc, #576]	; (800202c <__aeabi_dsub+0x624>)
 8001dea:	45b4      	cmp	ip, r6
 8001dec:	d1bd      	bne.n	8001d6a <__aeabi_dsub+0x362>
 8001dee:	000c      	movs	r4, r1
 8001df0:	0017      	movs	r7, r2
 8001df2:	4666      	mov	r6, ip
 8001df4:	4698      	mov	r8, r3
 8001df6:	e68d      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001df8:	488c      	ldr	r0, [pc, #560]	; (800202c <__aeabi_dsub+0x624>)
 8001dfa:	4283      	cmp	r3, r0
 8001dfc:	d00b      	beq.n	8001e16 <__aeabi_dsub+0x40e>
 8001dfe:	4663      	mov	r3, ip
 8001e00:	e6d9      	b.n	8001bb6 <__aeabi_dsub+0x1ae>
 8001e02:	2d00      	cmp	r5, #0
 8001e04:	d000      	beq.n	8001e08 <__aeabi_dsub+0x400>
 8001e06:	e096      	b.n	8001f36 <__aeabi_dsub+0x52e>
 8001e08:	0008      	movs	r0, r1
 8001e0a:	4310      	orrs	r0, r2
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x408>
 8001e0e:	e0e2      	b.n	8001fd6 <__aeabi_dsub+0x5ce>
 8001e10:	000c      	movs	r4, r1
 8001e12:	0017      	movs	r7, r2
 8001e14:	4698      	mov	r8, r3
 8001e16:	4e85      	ldr	r6, [pc, #532]	; (800202c <__aeabi_dsub+0x624>)
 8001e18:	e67c      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001e1a:	2500      	movs	r5, #0
 8001e1c:	e780      	b.n	8001d20 <__aeabi_dsub+0x318>
 8001e1e:	2100      	movs	r1, #0
 8001e20:	e78e      	b.n	8001d40 <__aeabi_dsub+0x338>
 8001e22:	0023      	movs	r3, r4
 8001e24:	4650      	mov	r0, sl
 8001e26:	4303      	orrs	r3, r0
 8001e28:	2e00      	cmp	r6, #0
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x426>
 8001e2c:	e0a8      	b.n	8001f80 <__aeabi_dsub+0x578>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x42c>
 8001e32:	e0de      	b.n	8001ff2 <__aeabi_dsub+0x5ea>
 8001e34:	000b      	movs	r3, r1
 8001e36:	4313      	orrs	r3, r2
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x434>
 8001e3a:	e66b      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001e3c:	4452      	add	r2, sl
 8001e3e:	4552      	cmp	r2, sl
 8001e40:	4180      	sbcs	r0, r0
 8001e42:	1864      	adds	r4, r4, r1
 8001e44:	4240      	negs	r0, r0
 8001e46:	1824      	adds	r4, r4, r0
 8001e48:	0017      	movs	r7, r2
 8001e4a:	0223      	lsls	r3, r4, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_dsub+0x448>
 8001e4e:	e6fd      	b.n	8001c4c <__aeabi_dsub+0x244>
 8001e50:	4b77      	ldr	r3, [pc, #476]	; (8002030 <__aeabi_dsub+0x628>)
 8001e52:	4666      	mov	r6, ip
 8001e54:	401c      	ands	r4, r3
 8001e56:	e65d      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001e58:	0025      	movs	r5, r4
 8001e5a:	4650      	mov	r0, sl
 8001e5c:	4305      	orrs	r5, r0
 8001e5e:	2e00      	cmp	r6, #0
 8001e60:	d1cf      	bne.n	8001e02 <__aeabi_dsub+0x3fa>
 8001e62:	2d00      	cmp	r5, #0
 8001e64:	d14f      	bne.n	8001f06 <__aeabi_dsub+0x4fe>
 8001e66:	000c      	movs	r4, r1
 8001e68:	4314      	orrs	r4, r2
 8001e6a:	d100      	bne.n	8001e6e <__aeabi_dsub+0x466>
 8001e6c:	e0a0      	b.n	8001fb0 <__aeabi_dsub+0x5a8>
 8001e6e:	000c      	movs	r4, r1
 8001e70:	0017      	movs	r7, r2
 8001e72:	4698      	mov	r8, r3
 8001e74:	e64e      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001e76:	4666      	mov	r6, ip
 8001e78:	2400      	movs	r4, #0
 8001e7a:	2700      	movs	r7, #0
 8001e7c:	e685      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001e7e:	001f      	movs	r7, r3
 8001e80:	0008      	movs	r0, r1
 8001e82:	3f20      	subs	r7, #32
 8001e84:	40f8      	lsrs	r0, r7
 8001e86:	0007      	movs	r7, r0
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_dsub+0x486>
 8001e8c:	e08e      	b.n	8001fac <__aeabi_dsub+0x5a4>
 8001e8e:	2040      	movs	r0, #64	; 0x40
 8001e90:	1ac3      	subs	r3, r0, r3
 8001e92:	4099      	lsls	r1, r3
 8001e94:	430a      	orrs	r2, r1
 8001e96:	1e51      	subs	r1, r2, #1
 8001e98:	418a      	sbcs	r2, r1
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4317      	orrs	r7, r2
 8001e9e:	e692      	b.n	8001bc6 <__aeabi_dsub+0x1be>
 8001ea0:	2e00      	cmp	r6, #0
 8001ea2:	d114      	bne.n	8001ece <__aeabi_dsub+0x4c6>
 8001ea4:	0026      	movs	r6, r4
 8001ea6:	4650      	mov	r0, sl
 8001ea8:	4306      	orrs	r6, r0
 8001eaa:	d062      	beq.n	8001f72 <__aeabi_dsub+0x56a>
 8001eac:	43db      	mvns	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d15c      	bne.n	8001f6c <__aeabi_dsub+0x564>
 8001eb2:	1887      	adds	r7, r0, r2
 8001eb4:	4297      	cmp	r7, r2
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	1864      	adds	r4, r4, r1
 8001eba:	4252      	negs	r2, r2
 8001ebc:	18a4      	adds	r4, r4, r2
 8001ebe:	4666      	mov	r6, ip
 8001ec0:	e687      	b.n	8001bd2 <__aeabi_dsub+0x1ca>
 8001ec2:	4650      	mov	r0, sl
 8001ec4:	4320      	orrs	r0, r4
 8001ec6:	1e44      	subs	r4, r0, #1
 8001ec8:	41a0      	sbcs	r0, r4
 8001eca:	2400      	movs	r4, #0
 8001ecc:	e760      	b.n	8001d90 <__aeabi_dsub+0x388>
 8001ece:	4e57      	ldr	r6, [pc, #348]	; (800202c <__aeabi_dsub+0x624>)
 8001ed0:	45b4      	cmp	ip, r6
 8001ed2:	d04e      	beq.n	8001f72 <__aeabi_dsub+0x56a>
 8001ed4:	2680      	movs	r6, #128	; 0x80
 8001ed6:	0436      	lsls	r6, r6, #16
 8001ed8:	425b      	negs	r3, r3
 8001eda:	4334      	orrs	r4, r6
 8001edc:	2b38      	cmp	r3, #56	; 0x38
 8001ede:	dd00      	ble.n	8001ee2 <__aeabi_dsub+0x4da>
 8001ee0:	e07f      	b.n	8001fe2 <__aeabi_dsub+0x5da>
 8001ee2:	2b1f      	cmp	r3, #31
 8001ee4:	dd00      	ble.n	8001ee8 <__aeabi_dsub+0x4e0>
 8001ee6:	e08b      	b.n	8002000 <__aeabi_dsub+0x5f8>
 8001ee8:	2620      	movs	r6, #32
 8001eea:	0027      	movs	r7, r4
 8001eec:	4650      	mov	r0, sl
 8001eee:	1af6      	subs	r6, r6, r3
 8001ef0:	40b7      	lsls	r7, r6
 8001ef2:	40d8      	lsrs	r0, r3
 8001ef4:	4307      	orrs	r7, r0
 8001ef6:	4650      	mov	r0, sl
 8001ef8:	40b0      	lsls	r0, r6
 8001efa:	1e46      	subs	r6, r0, #1
 8001efc:	41b0      	sbcs	r0, r6
 8001efe:	4307      	orrs	r7, r0
 8001f00:	40dc      	lsrs	r4, r3
 8001f02:	18bf      	adds	r7, r7, r2
 8001f04:	e7d6      	b.n	8001eb4 <__aeabi_dsub+0x4ac>
 8001f06:	000d      	movs	r5, r1
 8001f08:	4315      	orrs	r5, r2
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dsub+0x506>
 8001f0c:	e602      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001f0e:	4650      	mov	r0, sl
 8001f10:	1a80      	subs	r0, r0, r2
 8001f12:	4582      	cmp	sl, r0
 8001f14:	41bf      	sbcs	r7, r7
 8001f16:	1a65      	subs	r5, r4, r1
 8001f18:	427f      	negs	r7, r7
 8001f1a:	1bed      	subs	r5, r5, r7
 8001f1c:	4684      	mov	ip, r0
 8001f1e:	0228      	lsls	r0, r5, #8
 8001f20:	d400      	bmi.n	8001f24 <__aeabi_dsub+0x51c>
 8001f22:	e68d      	b.n	8001c40 <__aeabi_dsub+0x238>
 8001f24:	4650      	mov	r0, sl
 8001f26:	1a17      	subs	r7, r2, r0
 8001f28:	42ba      	cmp	r2, r7
 8001f2a:	4192      	sbcs	r2, r2
 8001f2c:	1b0c      	subs	r4, r1, r4
 8001f2e:	4252      	negs	r2, r2
 8001f30:	1aa4      	subs	r4, r4, r2
 8001f32:	4698      	mov	r8, r3
 8001f34:	e5ee      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001f36:	000d      	movs	r5, r1
 8001f38:	4315      	orrs	r5, r2
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x536>
 8001f3c:	e76b      	b.n	8001e16 <__aeabi_dsub+0x40e>
 8001f3e:	4650      	mov	r0, sl
 8001f40:	0767      	lsls	r7, r4, #29
 8001f42:	08c0      	lsrs	r0, r0, #3
 8001f44:	4307      	orrs	r7, r0
 8001f46:	2080      	movs	r0, #128	; 0x80
 8001f48:	08e4      	lsrs	r4, r4, #3
 8001f4a:	0300      	lsls	r0, r0, #12
 8001f4c:	4204      	tst	r4, r0
 8001f4e:	d007      	beq.n	8001f60 <__aeabi_dsub+0x558>
 8001f50:	08cd      	lsrs	r5, r1, #3
 8001f52:	4205      	tst	r5, r0
 8001f54:	d104      	bne.n	8001f60 <__aeabi_dsub+0x558>
 8001f56:	002c      	movs	r4, r5
 8001f58:	4698      	mov	r8, r3
 8001f5a:	08d7      	lsrs	r7, r2, #3
 8001f5c:	0749      	lsls	r1, r1, #29
 8001f5e:	430f      	orrs	r7, r1
 8001f60:	0f7b      	lsrs	r3, r7, #29
 8001f62:	00e4      	lsls	r4, r4, #3
 8001f64:	431c      	orrs	r4, r3
 8001f66:	00ff      	lsls	r7, r7, #3
 8001f68:	4e30      	ldr	r6, [pc, #192]	; (800202c <__aeabi_dsub+0x624>)
 8001f6a:	e5d3      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001f6c:	4e2f      	ldr	r6, [pc, #188]	; (800202c <__aeabi_dsub+0x624>)
 8001f6e:	45b4      	cmp	ip, r6
 8001f70:	d1b4      	bne.n	8001edc <__aeabi_dsub+0x4d4>
 8001f72:	000c      	movs	r4, r1
 8001f74:	0017      	movs	r7, r2
 8001f76:	4666      	mov	r6, ip
 8001f78:	e5cc      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001f7a:	2700      	movs	r7, #0
 8001f7c:	2400      	movs	r4, #0
 8001f7e:	e5e8      	b.n	8001b52 <__aeabi_dsub+0x14a>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d039      	beq.n	8001ff8 <__aeabi_dsub+0x5f0>
 8001f84:	000b      	movs	r3, r1
 8001f86:	4313      	orrs	r3, r2
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x584>
 8001f8a:	e744      	b.n	8001e16 <__aeabi_dsub+0x40e>
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	0767      	lsls	r7, r4, #29
 8001f90:	4307      	orrs	r7, r0
 8001f92:	2080      	movs	r0, #128	; 0x80
 8001f94:	08e4      	lsrs	r4, r4, #3
 8001f96:	0300      	lsls	r0, r0, #12
 8001f98:	4204      	tst	r4, r0
 8001f9a:	d0e1      	beq.n	8001f60 <__aeabi_dsub+0x558>
 8001f9c:	08cb      	lsrs	r3, r1, #3
 8001f9e:	4203      	tst	r3, r0
 8001fa0:	d1de      	bne.n	8001f60 <__aeabi_dsub+0x558>
 8001fa2:	08d7      	lsrs	r7, r2, #3
 8001fa4:	0749      	lsls	r1, r1, #29
 8001fa6:	430f      	orrs	r7, r1
 8001fa8:	001c      	movs	r4, r3
 8001faa:	e7d9      	b.n	8001f60 <__aeabi_dsub+0x558>
 8001fac:	2100      	movs	r1, #0
 8001fae:	e771      	b.n	8001e94 <__aeabi_dsub+0x48c>
 8001fb0:	2500      	movs	r5, #0
 8001fb2:	2700      	movs	r7, #0
 8001fb4:	e5e9      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001fb6:	002e      	movs	r6, r5
 8001fb8:	0027      	movs	r7, r4
 8001fba:	3e20      	subs	r6, #32
 8001fbc:	40f7      	lsrs	r7, r6
 8001fbe:	2d20      	cmp	r5, #32
 8001fc0:	d02f      	beq.n	8002022 <__aeabi_dsub+0x61a>
 8001fc2:	2640      	movs	r6, #64	; 0x40
 8001fc4:	1b75      	subs	r5, r6, r5
 8001fc6:	40ac      	lsls	r4, r5
 8001fc8:	4650      	mov	r0, sl
 8001fca:	4320      	orrs	r0, r4
 8001fcc:	1e44      	subs	r4, r0, #1
 8001fce:	41a0      	sbcs	r0, r4
 8001fd0:	2400      	movs	r4, #0
 8001fd2:	4338      	orrs	r0, r7
 8001fd4:	e6dc      	b.n	8001d90 <__aeabi_dsub+0x388>
 8001fd6:	2480      	movs	r4, #128	; 0x80
 8001fd8:	2500      	movs	r5, #0
 8001fda:	0324      	lsls	r4, r4, #12
 8001fdc:	4e13      	ldr	r6, [pc, #76]	; (800202c <__aeabi_dsub+0x624>)
 8001fde:	2700      	movs	r7, #0
 8001fe0:	e5d3      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001fe2:	4650      	mov	r0, sl
 8001fe4:	4320      	orrs	r0, r4
 8001fe6:	0007      	movs	r7, r0
 8001fe8:	1e78      	subs	r0, r7, #1
 8001fea:	4187      	sbcs	r7, r0
 8001fec:	2400      	movs	r4, #0
 8001fee:	18bf      	adds	r7, r7, r2
 8001ff0:	e760      	b.n	8001eb4 <__aeabi_dsub+0x4ac>
 8001ff2:	000c      	movs	r4, r1
 8001ff4:	0017      	movs	r7, r2
 8001ff6:	e58d      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001ff8:	000c      	movs	r4, r1
 8001ffa:	0017      	movs	r7, r2
 8001ffc:	4e0b      	ldr	r6, [pc, #44]	; (800202c <__aeabi_dsub+0x624>)
 8001ffe:	e589      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8002000:	001e      	movs	r6, r3
 8002002:	0027      	movs	r7, r4
 8002004:	3e20      	subs	r6, #32
 8002006:	40f7      	lsrs	r7, r6
 8002008:	2b20      	cmp	r3, #32
 800200a:	d00c      	beq.n	8002026 <__aeabi_dsub+0x61e>
 800200c:	2640      	movs	r6, #64	; 0x40
 800200e:	1af3      	subs	r3, r6, r3
 8002010:	409c      	lsls	r4, r3
 8002012:	4650      	mov	r0, sl
 8002014:	4320      	orrs	r0, r4
 8002016:	1e44      	subs	r4, r0, #1
 8002018:	41a0      	sbcs	r0, r4
 800201a:	4307      	orrs	r7, r0
 800201c:	2400      	movs	r4, #0
 800201e:	18bf      	adds	r7, r7, r2
 8002020:	e748      	b.n	8001eb4 <__aeabi_dsub+0x4ac>
 8002022:	2400      	movs	r4, #0
 8002024:	e7d0      	b.n	8001fc8 <__aeabi_dsub+0x5c0>
 8002026:	2400      	movs	r4, #0
 8002028:	e7f3      	b.n	8002012 <__aeabi_dsub+0x60a>
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	000007ff 	.word	0x000007ff
 8002030:	ff7fffff 	.word	0xff7fffff

08002034 <__aeabi_d2iz>:
 8002034:	b530      	push	{r4, r5, lr}
 8002036:	4d13      	ldr	r5, [pc, #76]	; (8002084 <__aeabi_d2iz+0x50>)
 8002038:	030a      	lsls	r2, r1, #12
 800203a:	004b      	lsls	r3, r1, #1
 800203c:	0b12      	lsrs	r2, r2, #12
 800203e:	0d5b      	lsrs	r3, r3, #21
 8002040:	0fc9      	lsrs	r1, r1, #31
 8002042:	2400      	movs	r4, #0
 8002044:	42ab      	cmp	r3, r5
 8002046:	dd10      	ble.n	800206a <__aeabi_d2iz+0x36>
 8002048:	4c0f      	ldr	r4, [pc, #60]	; (8002088 <__aeabi_d2iz+0x54>)
 800204a:	42a3      	cmp	r3, r4
 800204c:	dc0f      	bgt.n	800206e <__aeabi_d2iz+0x3a>
 800204e:	2480      	movs	r4, #128	; 0x80
 8002050:	4d0e      	ldr	r5, [pc, #56]	; (800208c <__aeabi_d2iz+0x58>)
 8002052:	0364      	lsls	r4, r4, #13
 8002054:	4322      	orrs	r2, r4
 8002056:	1aed      	subs	r5, r5, r3
 8002058:	2d1f      	cmp	r5, #31
 800205a:	dd0b      	ble.n	8002074 <__aeabi_d2iz+0x40>
 800205c:	480c      	ldr	r0, [pc, #48]	; (8002090 <__aeabi_d2iz+0x5c>)
 800205e:	1ac3      	subs	r3, r0, r3
 8002060:	40da      	lsrs	r2, r3
 8002062:	4254      	negs	r4, r2
 8002064:	2900      	cmp	r1, #0
 8002066:	d100      	bne.n	800206a <__aeabi_d2iz+0x36>
 8002068:	0014      	movs	r4, r2
 800206a:	0020      	movs	r0, r4
 800206c:	bd30      	pop	{r4, r5, pc}
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <__aeabi_d2iz+0x60>)
 8002070:	18cc      	adds	r4, r1, r3
 8002072:	e7fa      	b.n	800206a <__aeabi_d2iz+0x36>
 8002074:	4c08      	ldr	r4, [pc, #32]	; (8002098 <__aeabi_d2iz+0x64>)
 8002076:	40e8      	lsrs	r0, r5
 8002078:	46a4      	mov	ip, r4
 800207a:	4463      	add	r3, ip
 800207c:	409a      	lsls	r2, r3
 800207e:	4302      	orrs	r2, r0
 8002080:	e7ef      	b.n	8002062 <__aeabi_d2iz+0x2e>
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	000003fe 	.word	0x000003fe
 8002088:	0000041d 	.word	0x0000041d
 800208c:	00000433 	.word	0x00000433
 8002090:	00000413 	.word	0x00000413
 8002094:	7fffffff 	.word	0x7fffffff
 8002098:	fffffbed 	.word	0xfffffbed

0800209c <__aeabi_i2d>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	2800      	cmp	r0, #0
 80020a0:	d030      	beq.n	8002104 <__aeabi_i2d+0x68>
 80020a2:	17c3      	asrs	r3, r0, #31
 80020a4:	18c4      	adds	r4, r0, r3
 80020a6:	405c      	eors	r4, r3
 80020a8:	0fc5      	lsrs	r5, r0, #31
 80020aa:	0020      	movs	r0, r4
 80020ac:	f000 f870 	bl	8002190 <__clzsi2>
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <__aeabi_i2d+0x74>)
 80020b2:	4a18      	ldr	r2, [pc, #96]	; (8002114 <__aeabi_i2d+0x78>)
 80020b4:	1a1b      	subs	r3, r3, r0
 80020b6:	1ad2      	subs	r2, r2, r3
 80020b8:	2a1f      	cmp	r2, #31
 80020ba:	dd18      	ble.n	80020ee <__aeabi_i2d+0x52>
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <__aeabi_i2d+0x7c>)
 80020be:	1ad2      	subs	r2, r2, r3
 80020c0:	4094      	lsls	r4, r2
 80020c2:	2200      	movs	r2, #0
 80020c4:	0324      	lsls	r4, r4, #12
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	0b24      	lsrs	r4, r4, #12
 80020ca:	0d5b      	lsrs	r3, r3, #21
 80020cc:	2100      	movs	r1, #0
 80020ce:	0010      	movs	r0, r2
 80020d0:	0324      	lsls	r4, r4, #12
 80020d2:	0d0a      	lsrs	r2, r1, #20
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0512      	lsls	r2, r2, #20
 80020d8:	4322      	orrs	r2, r4
 80020da:	4c10      	ldr	r4, [pc, #64]	; (800211c <__aeabi_i2d+0x80>)
 80020dc:	051b      	lsls	r3, r3, #20
 80020de:	4022      	ands	r2, r4
 80020e0:	4313      	orrs	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	07ed      	lsls	r5, r5, #31
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	432b      	orrs	r3, r5
 80020ea:	0019      	movs	r1, r3
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
 80020ee:	0021      	movs	r1, r4
 80020f0:	4091      	lsls	r1, r2
 80020f2:	000a      	movs	r2, r1
 80020f4:	210b      	movs	r1, #11
 80020f6:	1a08      	subs	r0, r1, r0
 80020f8:	40c4      	lsrs	r4, r0
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	0324      	lsls	r4, r4, #12
 80020fe:	0b24      	lsrs	r4, r4, #12
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	e7e3      	b.n	80020cc <__aeabi_i2d+0x30>
 8002104:	2500      	movs	r5, #0
 8002106:	2300      	movs	r3, #0
 8002108:	2400      	movs	r4, #0
 800210a:	2200      	movs	r2, #0
 800210c:	e7de      	b.n	80020cc <__aeabi_i2d+0x30>
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	0000041e 	.word	0x0000041e
 8002114:	00000433 	.word	0x00000433
 8002118:	00000413 	.word	0x00000413
 800211c:	800fffff 	.word	0x800fffff

08002120 <__aeabi_ui2d>:
 8002120:	b510      	push	{r4, lr}
 8002122:	1e04      	subs	r4, r0, #0
 8002124:	d028      	beq.n	8002178 <__aeabi_ui2d+0x58>
 8002126:	f000 f833 	bl	8002190 <__clzsi2>
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <__aeabi_ui2d+0x60>)
 800212c:	4a15      	ldr	r2, [pc, #84]	; (8002184 <__aeabi_ui2d+0x64>)
 800212e:	1a1b      	subs	r3, r3, r0
 8002130:	1ad2      	subs	r2, r2, r3
 8002132:	2a1f      	cmp	r2, #31
 8002134:	dd15      	ble.n	8002162 <__aeabi_ui2d+0x42>
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <__aeabi_ui2d+0x68>)
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	4094      	lsls	r4, r2
 800213c:	2200      	movs	r2, #0
 800213e:	0324      	lsls	r4, r4, #12
 8002140:	055b      	lsls	r3, r3, #21
 8002142:	0b24      	lsrs	r4, r4, #12
 8002144:	0d5b      	lsrs	r3, r3, #21
 8002146:	2100      	movs	r1, #0
 8002148:	0010      	movs	r0, r2
 800214a:	0324      	lsls	r4, r4, #12
 800214c:	0d0a      	lsrs	r2, r1, #20
 800214e:	0b24      	lsrs	r4, r4, #12
 8002150:	0512      	lsls	r2, r2, #20
 8002152:	4322      	orrs	r2, r4
 8002154:	4c0d      	ldr	r4, [pc, #52]	; (800218c <__aeabi_ui2d+0x6c>)
 8002156:	051b      	lsls	r3, r3, #20
 8002158:	4022      	ands	r2, r4
 800215a:	4313      	orrs	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	0859      	lsrs	r1, r3, #1
 8002160:	bd10      	pop	{r4, pc}
 8002162:	0021      	movs	r1, r4
 8002164:	4091      	lsls	r1, r2
 8002166:	000a      	movs	r2, r1
 8002168:	210b      	movs	r1, #11
 800216a:	1a08      	subs	r0, r1, r0
 800216c:	40c4      	lsrs	r4, r0
 800216e:	055b      	lsls	r3, r3, #21
 8002170:	0324      	lsls	r4, r4, #12
 8002172:	0b24      	lsrs	r4, r4, #12
 8002174:	0d5b      	lsrs	r3, r3, #21
 8002176:	e7e6      	b.n	8002146 <__aeabi_ui2d+0x26>
 8002178:	2300      	movs	r3, #0
 800217a:	2400      	movs	r4, #0
 800217c:	2200      	movs	r2, #0
 800217e:	e7e2      	b.n	8002146 <__aeabi_ui2d+0x26>
 8002180:	0000041e 	.word	0x0000041e
 8002184:	00000433 	.word	0x00000433
 8002188:	00000413 	.word	0x00000413
 800218c:	800fffff 	.word	0x800fffff

08002190 <__clzsi2>:
 8002190:	211c      	movs	r1, #28
 8002192:	2301      	movs	r3, #1
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	4298      	cmp	r0, r3
 8002198:	d301      	bcc.n	800219e <__clzsi2+0xe>
 800219a:	0c00      	lsrs	r0, r0, #16
 800219c:	3910      	subs	r1, #16
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	4298      	cmp	r0, r3
 80021a2:	d301      	bcc.n	80021a8 <__clzsi2+0x18>
 80021a4:	0a00      	lsrs	r0, r0, #8
 80021a6:	3908      	subs	r1, #8
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	4298      	cmp	r0, r3
 80021ac:	d301      	bcc.n	80021b2 <__clzsi2+0x22>
 80021ae:	0900      	lsrs	r0, r0, #4
 80021b0:	3904      	subs	r1, #4
 80021b2:	a202      	add	r2, pc, #8	; (adr r2, 80021bc <__clzsi2+0x2c>)
 80021b4:	5c10      	ldrb	r0, [r2, r0]
 80021b6:	1840      	adds	r0, r0, r1
 80021b8:	4770      	bx	lr
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	02020304 	.word	0x02020304
 80021c0:	01010101 	.word	0x01010101
	...

080021cc <__clzdi2>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	2900      	cmp	r1, #0
 80021d0:	d103      	bne.n	80021da <__clzdi2+0xe>
 80021d2:	f7ff ffdd 	bl	8002190 <__clzsi2>
 80021d6:	3020      	adds	r0, #32
 80021d8:	e002      	b.n	80021e0 <__clzdi2+0x14>
 80021da:	1c08      	adds	r0, r1, #0
 80021dc:	f7ff ffd8 	bl	8002190 <__clzsi2>
 80021e0:	bd10      	pop	{r4, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)

080021e4 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80021e4:	2200      	movs	r2, #0
 80021e6:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <GetFskBandwidthRegValue+0x24>)
 80021ea:	00d3      	lsls	r3, r2, #3
 80021ec:	585c      	ldr	r4, [r3, r1]
 80021ee:	4284      	cmp	r4, r0
 80021f0:	d803      	bhi.n	80021fa <GetFskBandwidthRegValue+0x16>
 80021f2:	18cb      	adds	r3, r1, r3
 80021f4:	689c      	ldr	r4, [r3, #8]
 80021f6:	42a0      	cmp	r0, r4
 80021f8:	d303      	bcc.n	8002202 <GetFskBandwidthRegValue+0x1e>
 80021fa:	3201      	adds	r2, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80021fc:	2a15      	cmp	r2, #21
 80021fe:	d1f4      	bne.n	80021ea <GetFskBandwidthRegValue+0x6>
 8002200:	e7fe      	b.n	8002200 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 8002202:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8002204:	bd10      	pop	{r4, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	08007da8 	.word	0x08007da8

0800220c <SX1272OnDio4Irq>:
    }
}

void SX1272OnDio4Irq( void* context )
{
    switch( SX1272.Settings.Modem )
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SX1272OnDio4Irq+0x18>)
 800220e:	795a      	ldrb	r2, [r3, #5]
 8002210:	2a00      	cmp	r2, #0
 8002212:	d105      	bne.n	8002220 <SX1272OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1272.Settings.FskPacketHandler.PreambleDetected == false )
 8002214:	3330      	adds	r3, #48	; 0x30
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	2a00      	cmp	r2, #0
 800221a:	d101      	bne.n	8002220 <SX1272OnDio4Irq+0x14>
            {
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 800221c:	3201      	adds	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8002220:	4770      	bx	lr
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000544 	.word	0x20000544

08002228 <SX1272BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8002228:	4b01      	ldr	r3, [pc, #4]	; (8002230 <SX1272BoardInit+0x8>)
 800222a:	6018      	str	r0, [r3, #0]
}
 800222c:	4770      	bx	lr
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	200000b8 	.word	0x200000b8

08002234 <SX1272GetStatus>:
    return SX1272.Settings.State;
 8002234:	4b01      	ldr	r3, [pc, #4]	; (800223c <SX1272GetStatus+0x8>)
 8002236:	7918      	ldrb	r0, [r3, #4]
}
 8002238:	4770      	bx	lr
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	20000544 	.word	0x20000544

08002240 <SX1272Reset>:
{
 8002240:	b530      	push	{r4, r5, lr}
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002242:	25a0      	movs	r5, #160	; 0xa0
{
 8002244:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002246:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 8002248:	2214      	movs	r2, #20
 800224a:	2100      	movs	r1, #0
 800224c:	a801      	add	r0, sp, #4
 800224e:	f004 fffe 	bl	800724e <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 8002252:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002254:	05ed      	lsls	r5, r5, #23
 8002256:	aa01      	add	r2, sp, #4
 8002258:	0021      	movs	r1, r4
 800225a:	0028      	movs	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 800225c:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800225e:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002260:	f004 f87a 	bl	8006358 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 1 );
 8002264:	0022      	movs	r2, r4
 8002266:	0021      	movs	r1, r4
 8002268:	0028      	movs	r0, r5
 800226a:	f004 f8e9 	bl	8006440 <HW_GPIO_Write>
    DelayMs( 1 );
 800226e:	0020      	movs	r0, r4
 8002270:	f004 fd10 	bl	8006c94 <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002276:	aa01      	add	r2, sp, #4
 8002278:	0021      	movs	r1, r4
 800227a:	0028      	movs	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 800227c:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800227e:	f004 f86b 	bl	8006358 <HW_GPIO_Init>
    DelayMs( 6 );
 8002282:	2006      	movs	r0, #6
 8002284:	f004 fd06 	bl	8006c94 <HAL_Delay>
}
 8002288:	b007      	add	sp, #28
 800228a:	bd30      	pop	{r4, r5, pc}

0800228c <SX1272WriteBuffer>:
{
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	0006      	movs	r6, r0
 8002290:	000c      	movs	r4, r1
 8002292:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002294:	2140      	movs	r1, #64	; 0x40
 8002296:	2200      	movs	r2, #0
 8002298:	480a      	ldr	r0, [pc, #40]	; (80022c4 <SX1272WriteBuffer+0x38>)
 800229a:	f004 f8d1 	bl	8006440 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 800229e:	2080      	movs	r0, #128	; 0x80
 80022a0:	4330      	orrs	r0, r6
 80022a2:	f004 fb45 	bl	8006930 <HW_SPI_InOut>
 80022a6:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 80022a8:	42ac      	cmp	r4, r5
 80022aa:	d105      	bne.n	80022b8 <SX1272WriteBuffer+0x2c>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80022ac:	2201      	movs	r2, #1
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	4804      	ldr	r0, [pc, #16]	; (80022c4 <SX1272WriteBuffer+0x38>)
 80022b2:	f004 f8c5 	bl	8006440 <HW_GPIO_Write>
}
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
        HW_SPI_InOut( buffer[i] );
 80022b8:	7820      	ldrb	r0, [r4, #0]
 80022ba:	f004 fb39 	bl	8006930 <HW_SPI_InOut>
 80022be:	3401      	adds	r4, #1
 80022c0:	e7f2      	b.n	80022a8 <SX1272WriteBuffer+0x1c>
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	50000400 	.word	0x50000400

080022c8 <SX1272Write>:
{
 80022c8:	b507      	push	{r0, r1, r2, lr}
 80022ca:	466b      	mov	r3, sp
 80022cc:	71d9      	strb	r1, [r3, #7]
 80022ce:	3307      	adds	r3, #7
    SX1272WriteBuffer( addr, &data, 1 );
 80022d0:	2201      	movs	r2, #1
 80022d2:	0019      	movs	r1, r3
 80022d4:	f7ff ffda 	bl	800228c <SX1272WriteBuffer>
}
 80022d8:	bd07      	pop	{r0, r1, r2, pc}
	...

080022dc <SX1272SetChannel>:
    SX1272.Settings.Channel = freq;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <SX1272SetChannel+0x48>)
{
 80022de:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 80022e0:	4911      	ldr	r1, [pc, #68]	; (8002328 <SX1272SetChannel+0x4c>)
    SX1272.Settings.Channel = freq;
 80022e2:	6098      	str	r0, [r3, #8]
{
 80022e4:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 80022e6:	f7fd ff9f 	bl	8000228 <__aeabi_uidivmod>
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <SX1272SetChannel+0x50>)
 80022ec:	0208      	lsls	r0, r1, #8
 80022ee:	18c0      	adds	r0, r0, r3
 80022f0:	490d      	ldr	r1, [pc, #52]	; (8002328 <SX1272SetChannel+0x4c>)
 80022f2:	f7fd ff13 	bl	800011c <__udivsi3>
 80022f6:	490c      	ldr	r1, [pc, #48]	; (8002328 <SX1272SetChannel+0x4c>)
 80022f8:	0004      	movs	r4, r0
 80022fa:	0028      	movs	r0, r5
 80022fc:	f7fd ff0e 	bl	800011c <__udivsi3>
 8002300:	0200      	lsls	r0, r0, #8
 8002302:	1824      	adds	r4, r4, r0
    SX1272Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002304:	0c21      	lsrs	r1, r4, #16
 8002306:	b2c9      	uxtb	r1, r1
 8002308:	2006      	movs	r0, #6
 800230a:	f7ff ffdd 	bl	80022c8 <SX1272Write>
    SX1272Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 800230e:	0a21      	lsrs	r1, r4, #8
 8002310:	b2c9      	uxtb	r1, r1
 8002312:	2007      	movs	r0, #7
 8002314:	f7ff ffd8 	bl	80022c8 <SX1272Write>
    SX1272Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8002318:	b2e1      	uxtb	r1, r4
 800231a:	2008      	movs	r0, #8
 800231c:	f7ff ffd4 	bl	80022c8 <SX1272Write>
}
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	20000544 	.word	0x20000544
 8002328:	00003d09 	.word	0x00003d09
 800232c:	00001e84 	.word	0x00001e84

08002330 <SX1272ReadBuffer>:
{
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	0006      	movs	r6, r0
 8002334:	000c      	movs	r4, r1
 8002336:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002338:	2140      	movs	r1, #64	; 0x40
 800233a:	2200      	movs	r2, #0
 800233c:	480a      	ldr	r0, [pc, #40]	; (8002368 <SX1272ReadBuffer+0x38>)
 800233e:	f004 f87f 	bl	8006440 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 8002342:	207f      	movs	r0, #127	; 0x7f
 8002344:	4030      	ands	r0, r6
 8002346:	f004 faf3 	bl	8006930 <HW_SPI_InOut>
 800234a:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 800234c:	42ac      	cmp	r4, r5
 800234e:	d105      	bne.n	800235c <SX1272ReadBuffer+0x2c>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8002350:	2201      	movs	r2, #1
 8002352:	2140      	movs	r1, #64	; 0x40
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <SX1272ReadBuffer+0x38>)
 8002356:	f004 f873 	bl	8006440 <HW_GPIO_Write>
}
 800235a:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = HW_SPI_InOut( 0 );
 800235c:	2000      	movs	r0, #0
 800235e:	f004 fae7 	bl	8006930 <HW_SPI_InOut>
 8002362:	7020      	strb	r0, [r4, #0]
 8002364:	3401      	adds	r4, #1
 8002366:	e7f1      	b.n	800234c <SX1272ReadBuffer+0x1c>
 8002368:	50000400 	.word	0x50000400

0800236c <SX1272Read>:
{
 800236c:	b513      	push	{r0, r1, r4, lr}
    SX1272ReadBuffer( addr, &data, 1 );
 800236e:	466b      	mov	r3, sp
 8002370:	1ddc      	adds	r4, r3, #7
 8002372:	2201      	movs	r2, #1
 8002374:	0021      	movs	r1, r4
 8002376:	f7ff ffdb 	bl	8002330 <SX1272ReadBuffer>
    return data;
 800237a:	7820      	ldrb	r0, [r4, #0]
}
 800237c:	bd16      	pop	{r1, r2, r4, pc}
	...

08002380 <SX1272GetTimeOnAir>:
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	000d      	movs	r5, r1
 8002384:	b085      	sub	sp, #20
    switch( modem )
 8002386:	2800      	cmp	r0, #0
 8002388:	d003      	beq.n	8002392 <SX1272GetTimeOnAir+0x12>
 800238a:	2801      	cmp	r0, #1
 800238c:	d05a      	beq.n	8002444 <SX1272GetTimeOnAir+0xc4>
    uint32_t airTime = 0;
 800238e:	2000      	movs	r0, #0
    return airTime;
 8002390:	e04e      	b.n	8002430 <SX1272GetTimeOnAir+0xb0>
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8002392:	4c71      	ldr	r4, [pc, #452]	; (8002558 <SX1272GetTimeOnAir+0x1d8>)
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002394:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8002396:	8c26      	ldrh	r6, [r4, #32]
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002398:	f7ff ffe8 	bl	800236c <SX1272Read>
 800239c:	23f8      	movs	r3, #248	; 0xf8
 800239e:	4398      	bics	r0, r3
 80023a0:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 80023a2:	1980      	adds	r0, r0, r6
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80023a4:	f7ff fe7a 	bl	800209c <__aeabi_i2d>
 80023a8:	000b      	movs	r3, r1
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80023aa:	1ce1      	adds	r1, r4, #3
 80023ac:	7fc9      	ldrb	r1, [r1, #31]
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80023ae:	0002      	movs	r2, r0
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80023b0:	2000      	movs	r0, #0
 80023b2:	2900      	cmp	r1, #0
 80023b4:	d13e      	bne.n	8002434 <SX1272GetTimeOnAir+0xb4>
 80023b6:	4969      	ldr	r1, [pc, #420]	; (800255c <SX1272GetTimeOnAir+0x1dc>)
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80023b8:	f7fe f962 	bl	8000680 <__aeabi_dadd>
 80023bc:	0006      	movs	r6, r0
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80023be:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80023c0:	000f      	movs	r7, r1
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80023c2:	f7ff ffd3 	bl	800236c <SX1272Read>
 80023c6:	23f9      	movs	r3, #249	; 0xf9
 80023c8:	4398      	bics	r0, r3
 80023ca:	d135      	bne.n	8002438 <SX1272GetTimeOnAir+0xb8>
 80023cc:	2000      	movs	r0, #0
 80023ce:	2100      	movs	r1, #0
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80023d0:	0032      	movs	r2, r6
 80023d2:	003b      	movs	r3, r7
 80023d4:	f7fe f954 	bl	8000680 <__aeabi_dadd>
 80023d8:	0006      	movs	r6, r0
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80023da:	0028      	movs	r0, r5
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80023dc:	000f      	movs	r7, r1
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80023de:	f7ff fe5d 	bl	800209c <__aeabi_i2d>
 80023e2:	0002      	movs	r2, r0
 80023e4:	000b      	movs	r3, r1
 80023e6:	0030      	movs	r0, r6
 80023e8:	0039      	movs	r1, r7
 80023ea:	f7fe f949 	bl	8000680 <__aeabi_dadd>
 80023ee:	000b      	movs	r3, r1
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80023f0:	1d61      	adds	r1, r4, #5
 80023f2:	7fc9      	ldrb	r1, [r1, #31]
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80023f4:	0002      	movs	r2, r0
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80023f6:	2000      	movs	r0, #0
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d120      	bne.n	800243e <SX1272GetTimeOnAir+0xbe>
 80023fc:	2100      	movs	r1, #0
                                     pktLen +
 80023fe:	f7fe f93f 	bl	8000680 <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8002402:	2200      	movs	r2, #0
 8002404:	4b56      	ldr	r3, [pc, #344]	; (8002560 <SX1272GetTimeOnAir+0x1e0>)
 8002406:	f7ff f87f 	bl	8001508 <__aeabi_dmul>
 800240a:	0006      	movs	r6, r0
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800240c:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 800240e:	000f      	movs	r7, r1
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002410:	f7ff fe86 	bl	8002120 <__aeabi_ui2d>
 8002414:	0002      	movs	r2, r0
 8002416:	000b      	movs	r3, r1
 8002418:	0030      	movs	r0, r6
 800241a:	0039      	movs	r1, r7
 800241c:	f7fe fc40 	bl	8000ca0 <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8002420:	2200      	movs	r2, #0
 8002422:	4b50      	ldr	r3, [pc, #320]	; (8002564 <SX1272GetTimeOnAir+0x1e4>)
 8002424:	f7ff f870 	bl	8001508 <__aeabi_dmul>
 8002428:	f005 fc5c 	bl	8007ce4 <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 800242c:	f7fe f84a 	bl	80004c4 <__aeabi_d2uiz>
}
 8002430:	b005      	add	sp, #20
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002434:	2100      	movs	r1, #0
 8002436:	e7bf      	b.n	80023b8 <SX1272GetTimeOnAir+0x38>
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002438:	2000      	movs	r0, #0
 800243a:	4948      	ldr	r1, [pc, #288]	; (800255c <SX1272GetTimeOnAir+0x1dc>)
 800243c:	e7c8      	b.n	80023d0 <SX1272GetTimeOnAir+0x50>
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	05c9      	lsls	r1, r1, #23
 8002442:	e7dc      	b.n	80023fe <SX1272GetTimeOnAir+0x7e>
            switch( SX1272.Settings.LoRa.Bandwidth )
 8002444:	4c44      	ldr	r4, [pc, #272]	; (8002558 <SX1272GetTimeOnAir+0x1d8>)
 8002446:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002448:	2b02      	cmp	r3, #2
 800244a:	d900      	bls.n	800244e <SX1272GetTimeOnAir+0xce>
 800244c:	e07d      	b.n	800254a <SX1272GetTimeOnAir+0x1ca>
 800244e:	4a46      	ldr	r2, [pc, #280]	; (8002568 <SX1272GetTimeOnAir+0x1e8>)
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	18d3      	adds	r3, r2, r3
 8002454:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8002456:	6b5f      	ldr	r7, [r3, #52]	; 0x34
            double rs = bw / ( 1 << SX1272.Settings.LoRa.Datarate );
 8002458:	2001      	movs	r0, #1
 800245a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 800245c:	00ed      	lsls	r5, r5, #3
            double rs = bw / ( 1 << SX1272.Settings.LoRa.Datarate );
 800245e:	4098      	lsls	r0, r3
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	f7ff fe1b 	bl	800209c <__aeabi_i2d>
 8002466:	0002      	movs	r2, r0
 8002468:	000b      	movs	r3, r1
 800246a:	0030      	movs	r0, r6
 800246c:	0039      	movs	r1, r7
 800246e:	f7fe fc17 	bl	8000ca0 <__aeabi_ddiv>
 8002472:	0002      	movs	r2, r0
 8002474:	000b      	movs	r3, r1
            double ts = 1 / rs;
 8002476:	2000      	movs	r0, #0
 8002478:	4938      	ldr	r1, [pc, #224]	; (800255c <SX1272GetTimeOnAir+0x1dc>)
 800247a:	f7fe fc11 	bl	8000ca0 <__aeabi_ddiv>
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800247e:	0023      	movs	r3, r4
            double ts = 1 / rs;
 8002480:	0006      	movs	r6, r0
 8002482:	000f      	movs	r7, r1
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002484:	334e      	adds	r3, #78	; 0x4e
 8002486:	8818      	ldrh	r0, [r3, #0]
 8002488:	f7ff fe08 	bl	800209c <__aeabi_i2d>
 800248c:	2200      	movs	r2, #0
 800248e:	4b37      	ldr	r3, [pc, #220]	; (800256c <SX1272GetTimeOnAir+0x1ec>)
 8002490:	f7fe f8f6 	bl	8000680 <__aeabi_dadd>
 8002494:	0032      	movs	r2, r6
 8002496:	003b      	movs	r3, r7
 8002498:	f7ff f836 	bl	8001508 <__aeabi_dmul>
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 800249c:	0023      	movs	r3, r4
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800249e:	9002      	str	r0, [sp, #8]
 80024a0:	9103      	str	r1, [sp, #12]
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80024a2:	3352      	adds	r3, #82	; 0x52
 80024a4:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80024a6:	9b01      	ldr	r3, [sp, #4]
                                 ( SX1272.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80024a8:	3450      	adds	r4, #80	; 0x50
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80024aa:	009b      	lsls	r3, r3, #2
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80024ac:	0100      	lsls	r0, r0, #4
 80024ae:	1ac0      	subs	r0, r0, r3
                                 ( SX1272.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80024b0:	7823      	ldrb	r3, [r4, #0]
 80024b2:	2214      	movs	r2, #20
 80024b4:	1e59      	subs	r1, r3, #1
 80024b6:	418b      	sbcs	r3, r1
 80024b8:	301c      	adds	r0, #28
 80024ba:	425b      	negs	r3, r3
 80024bc:	401a      	ands	r2, r3
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 80024be:	1828      	adds	r0, r5, r0
 80024c0:	1a80      	subs	r0, r0, r2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80024c2:	f7ff fe2d 	bl	8002120 <__aeabi_ui2d>
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80024c6:	4b24      	ldr	r3, [pc, #144]	; (8002558 <SX1272GetTimeOnAir+0x1d8>)
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80024c8:	0004      	movs	r4, r0
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80024ca:	334c      	adds	r3, #76	; 0x4c
 80024cc:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80024ce:	000d      	movs	r5, r1
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80024d0:	1e43      	subs	r3, r0, #1
 80024d2:	4198      	sbcs	r0, r3
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 80024d4:	9b01      	ldr	r3, [sp, #4]
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80024d6:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 80024d8:	1a18      	subs	r0, r3, r0
 80024da:	0080      	lsls	r0, r0, #2
 80024dc:	f7ff fe20 	bl	8002120 <__aeabi_ui2d>
 80024e0:	0002      	movs	r2, r0
 80024e2:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 80024e4:	0020      	movs	r0, r4
 80024e6:	0029      	movs	r1, r5
 80024e8:	f7fe fbda 	bl	8000ca0 <__aeabi_ddiv>
 80024ec:	f005 faf6 	bl	8007adc <ceil>
 80024f0:	0004      	movs	r4, r0
 80024f2:	000d      	movs	r5, r1
                                 ( SX1272.Settings.LoRa.Coderate + 4 );
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <SX1272GetTimeOnAir+0x1d8>)
 80024f6:	334d      	adds	r3, #77	; 0x4d
 80024f8:	7818      	ldrb	r0, [r3, #0]
 80024fa:	3004      	adds	r0, #4
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80024fc:	f7ff fdce 	bl	800209c <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8002500:	0022      	movs	r2, r4
 8002502:	002b      	movs	r3, r5
 8002504:	f7ff f800 	bl	8001508 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002508:	2200      	movs	r2, #0
 800250a:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 800250c:	0004      	movs	r4, r0
 800250e:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002510:	f7fd ffa4 	bl	800045c <__aeabi_dcmpgt>
 8002514:	2800      	cmp	r0, #0
 8002516:	d01b      	beq.n	8002550 <SX1272GetTimeOnAir+0x1d0>
 8002518:	2200      	movs	r2, #0
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <SX1272GetTimeOnAir+0x1e0>)
 800251c:	0020      	movs	r0, r4
 800251e:	0029      	movs	r1, r5
 8002520:	f7fe f8ae 	bl	8000680 <__aeabi_dadd>
            double tPayload = nPayload * ts;
 8002524:	0032      	movs	r2, r6
 8002526:	003b      	movs	r3, r7
 8002528:	f7fe ffee 	bl	8001508 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 800252c:	9a02      	ldr	r2, [sp, #8]
 800252e:	9b03      	ldr	r3, [sp, #12]
 8002530:	f7fe f8a6 	bl	8000680 <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8002534:	2200      	movs	r2, #0
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <SX1272GetTimeOnAir+0x1e4>)
 8002538:	f7fe ffe6 	bl	8001508 <__aeabi_dmul>
 800253c:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <SX1272GetTimeOnAir+0x1f0>)
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <SX1272GetTimeOnAir+0x1f4>)
 8002540:	f7fe f89e 	bl	8000680 <__aeabi_dadd>
 8002544:	f005 fb4c 	bl	8007be0 <floor>
 8002548:	e770      	b.n	800242c <SX1272GetTimeOnAir+0xac>
            switch( SX1272.Settings.LoRa.Bandwidth )
 800254a:	2600      	movs	r6, #0
 800254c:	2700      	movs	r7, #0
 800254e:	e783      	b.n	8002458 <SX1272GetTimeOnAir+0xd8>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002550:	2000      	movs	r0, #0
 8002552:	4903      	ldr	r1, [pc, #12]	; (8002560 <SX1272GetTimeOnAir+0x1e0>)
 8002554:	e7e6      	b.n	8002524 <SX1272GetTimeOnAir+0x1a4>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	20000544 	.word	0x20000544
 800255c:	3ff00000 	.word	0x3ff00000
 8002560:	40200000 	.word	0x40200000
 8002564:	408f4000 	.word	0x408f4000
 8002568:	08007e28 	.word	0x08007e28
 800256c:	40110000 	.word	0x40110000
 8002570:	d916872b 	.word	0xd916872b
 8002574:	3feff7ce 	.word	0x3feff7ce

08002578 <SX1272ReadRssi>:
{
 8002578:	b510      	push	{r4, lr}
    switch( modem )
 800257a:	2800      	cmp	r0, #0
 800257c:	d004      	beq.n	8002588 <SX1272ReadRssi+0x10>
 800257e:	2801      	cmp	r0, #1
 8002580:	d00a      	beq.n	8002598 <SX1272ReadRssi+0x20>
        rssi = -1;
 8002582:	2001      	movs	r0, #1
 8002584:	4240      	negs	r0, r0
 8002586:	e006      	b.n	8002596 <SX1272ReadRssi+0x1e>
        rssi = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8002588:	2011      	movs	r0, #17
 800258a:	f7ff feef 	bl	800236c <SX1272Read>
 800258e:	0840      	lsrs	r0, r0, #1
 8002590:	b2c0      	uxtb	r0, r0
 8002592:	4240      	negs	r0, r0
        rssi = RSSI_OFFSET + SX1272Read( REG_LR_RSSIVALUE );
 8002594:	b200      	sxth	r0, r0
}
 8002596:	bd10      	pop	{r4, pc}
        rssi = RSSI_OFFSET + SX1272Read( REG_LR_RSSIVALUE );
 8002598:	201b      	movs	r0, #27
 800259a:	f7ff fee7 	bl	800236c <SX1272Read>
 800259e:	388b      	subs	r0, #139	; 0x8b
 80025a0:	e7f8      	b.n	8002594 <SX1272ReadRssi+0x1c>
	...

080025a4 <SX1272SetOpMode>:
{
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	4d0c      	ldr	r5, [pc, #48]	; (80025d8 <SX1272SetOpMode+0x34>)
 80025a8:	0004      	movs	r4, r0
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( true );
 80025aa:	682b      	ldr	r3, [r5, #0]
 80025ac:	2001      	movs	r0, #1
 80025ae:	691b      	ldr	r3, [r3, #16]
    if( opMode == RF_OPMODE_SLEEP )
 80025b0:	2c00      	cmp	r4, #0
 80025b2:	d004      	beq.n	80025be <SX1272SetOpMode+0x1a>
        LoRaBoardCallbacks->SX1272BoardSetAntSwLowPower( false );
 80025b4:	2000      	movs	r0, #0
 80025b6:	4798      	blx	r3
        LoRaBoardCallbacks->SX1272BoardSetAntSw( opMode );
 80025b8:	0020      	movs	r0, r4
 80025ba:	682b      	ldr	r3, [r5, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4798      	blx	r3
    SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7ff fed3 	bl	800236c <SX1272Read>
 80025c6:	2307      	movs	r3, #7
 80025c8:	0001      	movs	r1, r0
 80025ca:	4399      	bics	r1, r3
 80025cc:	4321      	orrs	r1, r4
 80025ce:	b2c9      	uxtb	r1, r1
 80025d0:	2001      	movs	r0, #1
 80025d2:	f7ff fe79 	bl	80022c8 <SX1272Write>
}
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
 80025d8:	200000b8 	.word	0x200000b8

080025dc <SX1272SetSleep>:
{
 80025dc:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 80025de:	4806      	ldr	r0, [pc, #24]	; (80025f8 <SX1272SetSleep+0x1c>)
 80025e0:	f003 fdc4 	bl	800616c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80025e4:	4805      	ldr	r0, [pc, #20]	; (80025fc <SX1272SetSleep+0x20>)
 80025e6:	f003 fdc1 	bl	800616c <TimerStop>
    SX1272SetOpMode( RF_OPMODE_SLEEP );
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7ff ffda 	bl	80025a4 <SX1272SetOpMode>
    SX1272.Settings.State = RF_IDLE;
 80025f0:	2200      	movs	r2, #0
 80025f2:	4b03      	ldr	r3, [pc, #12]	; (8002600 <SX1272SetSleep+0x24>)
 80025f4:	711a      	strb	r2, [r3, #4]
}
 80025f6:	bd10      	pop	{r4, pc}
 80025f8:	200005dc 	.word	0x200005dc
 80025fc:	200005ac 	.word	0x200005ac
 8002600:	20000544 	.word	0x20000544

08002604 <SX1272SetStby>:
{
 8002604:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8002606:	4806      	ldr	r0, [pc, #24]	; (8002620 <SX1272SetStby+0x1c>)
 8002608:	f003 fdb0 	bl	800616c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <SX1272SetStby+0x20>)
 800260e:	f003 fdad 	bl	800616c <TimerStop>
    SX1272SetOpMode( RF_OPMODE_STANDBY );
 8002612:	2001      	movs	r0, #1
 8002614:	f7ff ffc6 	bl	80025a4 <SX1272SetOpMode>
    SX1272.Settings.State = RF_IDLE;
 8002618:	2200      	movs	r2, #0
 800261a:	4b03      	ldr	r3, [pc, #12]	; (8002628 <SX1272SetStby+0x24>)
 800261c:	711a      	strb	r2, [r3, #4]
}
 800261e:	bd10      	pop	{r4, pc}
 8002620:	200005dc 	.word	0x200005dc
 8002624:	200005ac 	.word	0x200005ac
 8002628:	20000544 	.word	0x20000544

0800262c <SX1272SetRx>:
{
 800262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1272.Settings.Modem )
 800262e:	4c50      	ldr	r4, [pc, #320]	; (8002770 <SX1272SetRx+0x144>)
{
 8002630:	0006      	movs	r6, r0
    switch( SX1272.Settings.Modem )
 8002632:	7965      	ldrb	r5, [r4, #5]
 8002634:	2d00      	cmp	r5, #0
 8002636:	d003      	beq.n	8002640 <SX1272SetRx+0x14>
 8002638:	2d01      	cmp	r5, #1
 800263a:	d04f      	beq.n	80026dc <SX1272SetRx+0xb0>
    bool rxContinuous = false;
 800263c:	2700      	movs	r7, #0
 800263e:	e029      	b.n	8002694 <SX1272SetRx+0x68>
            rxContinuous = SX1272.Settings.Fsk.RxContinuous;
 8002640:	1de3      	adds	r3, r4, #7
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002642:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1272.Settings.Fsk.RxContinuous;
 8002644:	7fdf      	ldrb	r7, [r3, #31]
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002646:	f7ff fe91 	bl	800236c <SX1272Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800264a:	2103      	movs	r1, #3
 800264c:	4008      	ands	r0, r1
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800264e:	3109      	adds	r1, #9
 8002650:	4301      	orrs	r1, r0
 8002652:	2040      	movs	r0, #64	; 0x40
 8002654:	f7ff fe38 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8002658:	2041      	movs	r0, #65	; 0x41
 800265a:	f7ff fe87 	bl	800236c <SX1272Read>
 800265e:	213f      	movs	r1, #63	; 0x3f
 8002660:	4249      	negs	r1, r1
 8002662:	4301      	orrs	r1, r0
 8002664:	b2c9      	uxtb	r1, r1
 8002666:	2041      	movs	r0, #65	; 0x41
 8002668:	f7ff fe2e 	bl	80022c8 <SX1272Write>
            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 800266c:	2035      	movs	r0, #53	; 0x35
 800266e:	f7ff fe7d 	bl	800236c <SX1272Read>
 8002672:	233f      	movs	r3, #63	; 0x3f
 8002674:	4018      	ands	r0, r3
 8002676:	0023      	movs	r3, r4
 8002678:	333e      	adds	r3, #62	; 0x3e
 800267a:	7018      	strb	r0, [r3, #0]
            SX1272Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800267c:	211e      	movs	r1, #30
 800267e:	200d      	movs	r0, #13
 8002680:	f7ff fe22 	bl	80022c8 <SX1272Write>
            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8002684:	0023      	movs	r3, r4
 8002686:	3330      	adds	r3, #48	; 0x30
 8002688:	701d      	strb	r5, [r3, #0]
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 800268a:	0023      	movs	r3, r4
 800268c:	3331      	adds	r3, #49	; 0x31
 800268e:	701d      	strb	r5, [r3, #0]
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8002690:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 8002692:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	4837      	ldr	r0, [pc, #220]	; (8002774 <SX1272SetRx+0x148>)
 8002698:	0052      	lsls	r2, r2, #1
 800269a:	2100      	movs	r1, #0
 800269c:	3004      	adds	r0, #4
 800269e:	f004 fdd6 	bl	800724e <memset>
    SX1272.Settings.State = RF_RX_RUNNING;
 80026a2:	2301      	movs	r3, #1
 80026a4:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 80026a6:	2e00      	cmp	r6, #0
 80026a8:	d007      	beq.n	80026ba <SX1272SetRx+0x8e>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80026aa:	4d33      	ldr	r5, [pc, #204]	; (8002778 <SX1272SetRx+0x14c>)
 80026ac:	0031      	movs	r1, r6
 80026ae:	0028      	movs	r0, r5
 80026b0:	f003 fd88 	bl	80061c4 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80026b4:	0028      	movs	r0, r5
 80026b6:	f003 fcdd 	bl	8006074 <TimerStart>
    if( SX1272.Settings.Modem == MODEM_FSK )
 80026ba:	7963      	ldrb	r3, [r4, #5]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d150      	bne.n	8002762 <SX1272SetRx+0x136>
        SX1272SetOpMode( RF_OPMODE_RECEIVER );
 80026c0:	2005      	movs	r0, #5
 80026c2:	f7ff ff6f 	bl	80025a4 <SX1272SetOpMode>
        if( rxContinuous == false )
 80026c6:	2f00      	cmp	r7, #0
 80026c8:	d107      	bne.n	80026da <SX1272SetRx+0xae>
            TimerSetValue( &RxTimeoutSyncWord, SX1272.Settings.Fsk.RxSingleTimeout );
 80026ca:	4d2c      	ldr	r5, [pc, #176]	; (800277c <SX1272SetRx+0x150>)
 80026cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80026ce:	0028      	movs	r0, r5
 80026d0:	f003 fd78 	bl	80061c4 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80026d4:	0028      	movs	r0, r5
 80026d6:	f003 fccd 	bl	8006074 <TimerStart>
}
 80026da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( SX1272.Settings.LoRa.IqInverted == true )
 80026dc:	0023      	movs	r3, r4
 80026de:	3355      	adds	r3, #85	; 0x55
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2741      	movs	r7, #65	; 0x41
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80026e4:	2033      	movs	r0, #51	; 0x33
            if( SX1272.Settings.LoRa.IqInverted == true )
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d027      	beq.n	800273a <SX1272SetRx+0x10e>
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80026ea:	f7ff fe3f 	bl	800236c <SX1272Read>
 80026ee:	4338      	orrs	r0, r7
 80026f0:	b2c1      	uxtb	r1, r0
 80026f2:	2033      	movs	r0, #51	; 0x33
 80026f4:	f7ff fde8 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80026f8:	2119      	movs	r1, #25
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80026fa:	203b      	movs	r0, #59	; 0x3b
 80026fc:	f7ff fde4 	bl	80022c8 <SX1272Write>
            rxContinuous = SX1272.Settings.LoRa.RxContinuous;
 8002700:	0023      	movs	r3, r4
 8002702:	3356      	adds	r3, #86	; 0x56
 8002704:	781f      	ldrb	r7, [r3, #0]
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8002706:	0023      	movs	r3, r4
 8002708:	3353      	adds	r3, #83	; 0x53
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01f      	beq.n	8002750 <SX1272SetRx+0x124>
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8002710:	211d      	movs	r1, #29
 8002712:	2011      	movs	r0, #17
 8002714:	f7ff fdd8 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8002718:	2040      	movs	r0, #64	; 0x40
 800271a:	f7ff fe27 	bl	800236c <SX1272Read>
 800271e:	2133      	movs	r1, #51	; 0x33
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8002720:	4001      	ands	r1, r0
 8002722:	2040      	movs	r0, #64	; 0x40
 8002724:	f7ff fdd0 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_LR_FIFORXBASEADDR, 0 );
 8002728:	2100      	movs	r1, #0
 800272a:	200f      	movs	r0, #15
 800272c:	f7ff fdcc 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 8002730:	2100      	movs	r1, #0
 8002732:	200d      	movs	r0, #13
 8002734:	f7ff fdc8 	bl	80022c8 <SX1272Write>
        break;
 8002738:	e7ac      	b.n	8002694 <SX1272SetRx+0x68>
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800273a:	f7ff fe17 	bl	800236c <SX1272Read>
 800273e:	0001      	movs	r1, r0
 8002740:	43b9      	bics	r1, r7
 8002742:	4329      	orrs	r1, r5
 8002744:	b2c9      	uxtb	r1, r1
 8002746:	2033      	movs	r0, #51	; 0x33
 8002748:	f7ff fdbe 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800274c:	211d      	movs	r1, #29
 800274e:	e7d4      	b.n	80026fa <SX1272SetRx+0xce>
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8002750:	211f      	movs	r1, #31
 8002752:	2011      	movs	r0, #17
 8002754:	f7ff fdb8 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8002758:	2040      	movs	r0, #64	; 0x40
 800275a:	f7ff fe07 	bl	800236c <SX1272Read>
 800275e:	213f      	movs	r1, #63	; 0x3f
 8002760:	e7de      	b.n	8002720 <SX1272SetRx+0xf4>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER );
 8002762:	2005      	movs	r0, #5
        if( rxContinuous == true )
 8002764:	2f00      	cmp	r7, #0
 8002766:	d100      	bne.n	800276a <SX1272SetRx+0x13e>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8002768:	2006      	movs	r0, #6
 800276a:	f7ff ff1b 	bl	80025a4 <SX1272SetOpMode>
}
 800276e:	e7b4      	b.n	80026da <SX1272SetRx+0xae>
 8002770:	20000544 	.word	0x20000544
 8002774:	200000b8 	.word	0x200000b8
 8002778:	200005dc 	.word	0x200005dc
 800277c:	200005c4 	.word	0x200005c4

08002780 <SX1272SetTx>:
{
 8002780:	b570      	push	{r4, r5, r6, lr}
    TimerSetValue( &TxTimeoutTimer, timeout );
 8002782:	4d25      	ldr	r5, [pc, #148]	; (8002818 <SX1272SetTx+0x98>)
{
 8002784:	0001      	movs	r1, r0
    TimerSetValue( &TxTimeoutTimer, timeout );
 8002786:	0028      	movs	r0, r5
 8002788:	f003 fd1c 	bl	80061c4 <TimerSetValue>
    switch( SX1272.Settings.Modem )
 800278c:	4c23      	ldr	r4, [pc, #140]	; (800281c <SX1272SetTx+0x9c>)
 800278e:	7963      	ldrb	r3, [r4, #5]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <SX1272SetTx+0x2a>
 8002794:	2b01      	cmp	r3, #1
 8002796:	d023      	beq.n	80027e0 <SX1272SetTx+0x60>
    SX1272.Settings.State = RF_TX_RUNNING;
 8002798:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 800279a:	0028      	movs	r0, r5
    SX1272.Settings.State = RF_TX_RUNNING;
 800279c:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 800279e:	f003 fc69 	bl	8006074 <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 80027a2:	2003      	movs	r0, #3
 80027a4:	f7ff fefe 	bl	80025a4 <SX1272SetOpMode>
}
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80027aa:	2040      	movs	r0, #64	; 0x40
 80027ac:	f7ff fdde 	bl	800236c <SX1272Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80027b0:	2103      	movs	r1, #3
 80027b2:	4008      	ands	r0, r1
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80027b4:	310d      	adds	r1, #13
 80027b6:	4301      	orrs	r1, r0
 80027b8:	2040      	movs	r0, #64	; 0x40
 80027ba:	f7ff fd85 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80027be:	2041      	movs	r0, #65	; 0x41
 80027c0:	f7ff fdd4 	bl	800236c <SX1272Read>
 80027c4:	213e      	movs	r1, #62	; 0x3e
 80027c6:	4001      	ands	r1, r0
 80027c8:	2041      	movs	r0, #65	; 0x41
 80027ca:	f7ff fd7d 	bl	80022c8 <SX1272Write>
            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 80027ce:	2035      	movs	r0, #53	; 0x35
 80027d0:	f7ff fdcc 	bl	800236c <SX1272Read>
 80027d4:	233f      	movs	r3, #63	; 0x3f
 80027d6:	4018      	ands	r0, r3
 80027d8:	0023      	movs	r3, r4
 80027da:	333e      	adds	r3, #62	; 0x3e
 80027dc:	7018      	strb	r0, [r3, #0]
        break;
 80027de:	e7db      	b.n	8002798 <SX1272SetTx+0x18>
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 80027e0:	0023      	movs	r3, r4
 80027e2:	3353      	adds	r3, #83	; 0x53
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00d      	beq.n	8002806 <SX1272SetTx+0x86>
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80027ea:	21f5      	movs	r1, #245	; 0xf5
 80027ec:	2011      	movs	r0, #17
 80027ee:	f7ff fd6b 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80027f2:	2040      	movs	r0, #64	; 0x40
 80027f4:	f7ff fdba 	bl	800236c <SX1272Read>
 80027f8:	2133      	movs	r1, #51	; 0x33
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80027fa:	4001      	ands	r1, r0
 80027fc:	2040      	movs	r0, #64	; 0x40
 80027fe:	4301      	orrs	r1, r0
 8002800:	f7ff fd62 	bl	80022c8 <SX1272Write>
 8002804:	e7c8      	b.n	8002798 <SX1272SetTx+0x18>
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002806:	21f7      	movs	r1, #247	; 0xf7
 8002808:	2011      	movs	r0, #17
 800280a:	f7ff fd5d 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800280e:	2040      	movs	r0, #64	; 0x40
 8002810:	f7ff fdac 	bl	800236c <SX1272Read>
 8002814:	213f      	movs	r1, #63	; 0x3f
 8002816:	e7f0      	b.n	80027fa <SX1272SetTx+0x7a>
 8002818:	200005ac 	.word	0x200005ac
 800281c:	20000544 	.word	0x20000544

08002820 <SX1272StartCad>:
{
 8002820:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.Modem )
 8002822:	4c0b      	ldr	r4, [pc, #44]	; (8002850 <SX1272StartCad+0x30>)
 8002824:	7963      	ldrb	r3, [r4, #5]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d110      	bne.n	800284c <SX1272StartCad+0x2c>
            SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800282a:	21fa      	movs	r1, #250	; 0xfa
 800282c:	2011      	movs	r0, #17
 800282e:	f7ff fd4b 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8002832:	2040      	movs	r0, #64	; 0x40
 8002834:	f7ff fd9a 	bl	800236c <SX1272Read>
 8002838:	2503      	movs	r5, #3
 800283a:	43a8      	bics	r0, r5
 800283c:	b2c1      	uxtb	r1, r0
 800283e:	2040      	movs	r0, #64	; 0x40
 8002840:	f7ff fd42 	bl	80022c8 <SX1272Write>
            SX1272SetOpMode( RFLR_OPMODE_CAD );
 8002844:	2007      	movs	r0, #7
            SX1272.Settings.State = RF_CAD;
 8002846:	7125      	strb	r5, [r4, #4]
            SX1272SetOpMode( RFLR_OPMODE_CAD );
 8002848:	f7ff feac 	bl	80025a4 <SX1272SetOpMode>
}
 800284c:	bd70      	pop	{r4, r5, r6, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	20000544 	.word	0x20000544

08002854 <SX1272SetModem>:
{
 8002854:	b510      	push	{r4, lr}
 8002856:	0004      	movs	r4, r0
    if( ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8002858:	2001      	movs	r0, #1
 800285a:	f7ff fd87 	bl	800236c <SX1272Read>
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <SX1272SetModem+0x70>)
 8002860:	0602      	lsls	r2, r0, #24
 8002862:	d51a      	bpl.n	800289a <SX1272SetModem+0x46>
        SX1272.Settings.Modem = MODEM_LORA;
 8002864:	2201      	movs	r2, #1
        SX1272.Settings.Modem = MODEM_FSK;
 8002866:	715a      	strb	r2, [r3, #5]
    if( SX1272.Settings.Modem == modem )
 8002868:	795a      	ldrb	r2, [r3, #5]
 800286a:	42a2      	cmp	r2, r4
 800286c:	d014      	beq.n	8002898 <SX1272SetModem+0x44>
    SX1272.Settings.Modem = modem;
 800286e:	715c      	strb	r4, [r3, #5]
    switch( SX1272.Settings.Modem )
 8002870:	2c01      	cmp	r4, #1
 8002872:	d014      	beq.n	800289e <SX1272SetModem+0x4a>
        SX1272SetSleep( );
 8002874:	f7ff feb2 	bl	80025dc <SX1272SetSleep>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8002878:	2001      	movs	r0, #1
 800287a:	f7ff fd77 	bl	800236c <SX1272Read>
 800287e:	217f      	movs	r1, #127	; 0x7f
 8002880:	4001      	ands	r1, r0
 8002882:	2001      	movs	r0, #1
 8002884:	f7ff fd20 	bl	80022c8 <SX1272Write>
        SX1272Write( REG_DIOMAPPING1, 0x00 );
 8002888:	2100      	movs	r1, #0
 800288a:	2040      	movs	r0, #64	; 0x40
 800288c:	f7ff fd1c 	bl	80022c8 <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8002890:	2130      	movs	r1, #48	; 0x30
        SX1272Write( REG_DIOMAPPING2, 0x00 );
 8002892:	2041      	movs	r0, #65	; 0x41
 8002894:	f7ff fd18 	bl	80022c8 <SX1272Write>
}
 8002898:	bd10      	pop	{r4, pc}
        SX1272.Settings.Modem = MODEM_FSK;
 800289a:	2200      	movs	r2, #0
 800289c:	e7e3      	b.n	8002866 <SX1272SetModem+0x12>
        SX1272SetSleep( );
 800289e:	f7ff fe9d 	bl	80025dc <SX1272SetSleep>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80028a2:	0020      	movs	r0, r4
 80028a4:	f7ff fd62 	bl	800236c <SX1272Read>
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	4249      	negs	r1, r1
 80028ac:	4301      	orrs	r1, r0
 80028ae:	b2c9      	uxtb	r1, r1
 80028b0:	0020      	movs	r0, r4
 80028b2:	f7ff fd09 	bl	80022c8 <SX1272Write>
        SX1272Write( REG_DIOMAPPING1, 0x00 );
 80028b6:	2100      	movs	r1, #0
 80028b8:	2040      	movs	r0, #64	; 0x40
 80028ba:	f7ff fd05 	bl	80022c8 <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x00 );
 80028be:	2100      	movs	r1, #0
 80028c0:	e7e7      	b.n	8002892 <SX1272SetModem+0x3e>
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	20000544 	.word	0x20000544

080028c8 <SX1272Init>:
{
 80028c8:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <SX1272Init+0x70>)
    TimerInit( &TxTimeoutTimer, SX1272OnTimeoutIrq );
 80028cc:	4c1b      	ldr	r4, [pc, #108]	; (800293c <SX1272Init+0x74>)
    RadioEvents = events;
 80028ce:	6058      	str	r0, [r3, #4]
    TimerInit( &TxTimeoutTimer, SX1272OnTimeoutIrq );
 80028d0:	0021      	movs	r1, r4
 80028d2:	481b      	ldr	r0, [pc, #108]	; (8002940 <SX1272Init+0x78>)
 80028d4:	f003 fbc4 	bl	8006060 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1272OnTimeoutIrq );
 80028d8:	0021      	movs	r1, r4
 80028da:	481a      	ldr	r0, [pc, #104]	; (8002944 <SX1272Init+0x7c>)
 80028dc:	f003 fbc0 	bl	8006060 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1272OnTimeoutIrq );
 80028e0:	0021      	movs	r1, r4
    LoRaBoardCallbacks->SX1272BoardIoIrqInit( DioIrq );
 80028e2:	2400      	movs	r4, #0
    TimerInit( &RxTimeoutSyncWord, SX1272OnTimeoutIrq );
 80028e4:	4818      	ldr	r0, [pc, #96]	; (8002948 <SX1272Init+0x80>)
 80028e6:	f003 fbbb 	bl	8006060 <TimerInit>
    LoRaBoardCallbacks->SX1272BoardSetXO( SET );
 80028ea:	4e18      	ldr	r6, [pc, #96]	; (800294c <SX1272Init+0x84>)
 80028ec:	2001      	movs	r0, #1
 80028ee:	6833      	ldr	r3, [r6, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4798      	blx	r3
    SX1272Reset( );
 80028f4:	f7ff fca4 	bl	8002240 <SX1272Reset>
    SX1272SetOpMode( RF_OPMODE_SLEEP );
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7ff fe53 	bl	80025a4 <SX1272SetOpMode>
    LoRaBoardCallbacks->SX1272BoardIoIrqInit( DioIrq );
 80028fe:	6833      	ldr	r3, [r6, #0]
 8002900:	4813      	ldr	r0, [pc, #76]	; (8002950 <SX1272Init+0x88>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4798      	blx	r3
        SX1272SetModem( RadioRegsInit[i].Modem );
 8002906:	4d13      	ldr	r5, [pc, #76]	; (8002954 <SX1272Init+0x8c>)
 8002908:	3548      	adds	r5, #72	; 0x48
 800290a:	5d60      	ldrb	r0, [r4, r5]
 800290c:	f7ff ffa2 	bl	8002854 <SX1272SetModem>
 8002910:	192b      	adds	r3, r5, r4
        SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8002912:	7899      	ldrb	r1, [r3, #2]
 8002914:	7858      	ldrb	r0, [r3, #1]
 8002916:	3403      	adds	r4, #3
 8002918:	f7ff fcd6 	bl	80022c8 <SX1272Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800291c:	2c33      	cmp	r4, #51	; 0x33
 800291e:	d1f4      	bne.n	800290a <SX1272Init+0x42>
    SX1272SetModem( MODEM_FSK );
 8002920:	2000      	movs	r0, #0
 8002922:	f7ff ff97 	bl	8002854 <SX1272SetModem>
    SX1272.Settings.State = RF_IDLE;
 8002926:	2200      	movs	r2, #0
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <SX1272Init+0x90>)
 800292a:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800292c:	6833      	ldr	r3, [r6, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4798      	blx	r3
 8002932:	3002      	adds	r0, #2
}
 8002934:	bd70      	pop	{r4, r5, r6, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	200001b8 	.word	0x200001b8
 800293c:	08003569 	.word	0x08003569
 8002940:	200005ac 	.word	0x200005ac
 8002944:	200005dc 	.word	0x200005dc
 8002948:	200005c4 	.word	0x200005c4
 800294c:	200000b8 	.word	0x200000b8
 8002950:	20000000 	.word	0x20000000
 8002954:	08007e28 	.word	0x08007e28
 8002958:	20000544 	.word	0x20000544

0800295c <SX1272IsChannelFree>:
{
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	000e      	movs	r6, r1
 8002960:	0017      	movs	r7, r2
 8002962:	001d      	movs	r5, r3
 8002964:	0004      	movs	r4, r0
    SX1272SetModem( modem );
 8002966:	f7ff ff75 	bl	8002854 <SX1272SetModem>
    SX1272SetChannel( freq );
 800296a:	0030      	movs	r0, r6
 800296c:	f7ff fcb6 	bl	80022dc <SX1272SetChannel>
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 8002970:	2005      	movs	r0, #5
 8002972:	f7ff fe17 	bl	80025a4 <SX1272SetOpMode>
    DelayMs( 1 );
 8002976:	2001      	movs	r0, #1
 8002978:	f004 f98c 	bl	8006c94 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800297c:	f003 fc33 	bl	80061e6 <TimerGetCurrentTime>
 8002980:	0006      	movs	r6, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8002982:	0030      	movs	r0, r6
 8002984:	f003 fc35 	bl	80061f2 <TimerGetElapsedTime>
 8002988:	42a8      	cmp	r0, r5
 800298a:	d304      	bcc.n	8002996 <SX1272IsChannelFree+0x3a>
    bool status = true;
 800298c:	2401      	movs	r4, #1
    SX1272SetSleep( );
 800298e:	f7ff fe25 	bl	80025dc <SX1272SetSleep>
}
 8002992:	0020      	movs	r0, r4
 8002994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1272ReadRssi( modem );
 8002996:	0020      	movs	r0, r4
 8002998:	f7ff fdee 	bl	8002578 <SX1272ReadRssi>
        if( rssi > rssiThresh )
 800299c:	42b8      	cmp	r0, r7
 800299e:	ddf0      	ble.n	8002982 <SX1272IsChannelFree+0x26>
            status = false;
 80029a0:	2400      	movs	r4, #0
 80029a2:	e7f4      	b.n	800298e <SX1272IsChannelFree+0x32>

080029a4 <SX1272Random>:
{
 80029a4:	b570      	push	{r4, r5, r6, lr}
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 80029a6:	2400      	movs	r4, #0
    SX1272SetModem( MODEM_LORA );
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7ff ff53 	bl	8002854 <SX1272SetModem>
    SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80029ae:	21ff      	movs	r1, #255	; 0xff
 80029b0:	2011      	movs	r0, #17
 80029b2:	f7ff fc89 	bl	80022c8 <SX1272Write>
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 80029b6:	2005      	movs	r0, #5
 80029b8:	f7ff fdf4 	bl	80025a4 <SX1272SetOpMode>
    uint32_t rnd = 0;
 80029bc:	0025      	movs	r5, r4
        DelayMs( 1 );
 80029be:	2601      	movs	r6, #1
 80029c0:	0030      	movs	r0, r6
 80029c2:	f004 f967 	bl	8006c94 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1272Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80029c6:	202c      	movs	r0, #44	; 0x2c
 80029c8:	f7ff fcd0 	bl	800236c <SX1272Read>
 80029cc:	4030      	ands	r0, r6
 80029ce:	40a0      	lsls	r0, r4
 80029d0:	3401      	adds	r4, #1
 80029d2:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 80029d4:	2c20      	cmp	r4, #32
 80029d6:	d1f3      	bne.n	80029c0 <SX1272Random+0x1c>
    SX1272SetSleep( );
 80029d8:	f7ff fe00 	bl	80025dc <SX1272SetSleep>
}
 80029dc:	0028      	movs	r0, r5
 80029de:	bd70      	pop	{r4, r5, r6, pc}

080029e0 <SX1272SetRxConfig>:
{
 80029e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e2:	b08d      	sub	sp, #52	; 0x34
 80029e4:	9306      	str	r3, [sp, #24]
 80029e6:	ab12      	add	r3, sp, #72	; 0x48
 80029e8:	0016      	movs	r6, r2
 80029ea:	cb04      	ldmia	r3!, {r2}
 80029ec:	0004      	movs	r4, r0
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	9208      	str	r2, [sp, #32]
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	ab14      	add	r3, sp, #80	; 0x50
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	aa0c      	add	r2, sp, #48	; 0x30
 80029fa:	9305      	str	r3, [sp, #20]
 80029fc:	ab15      	add	r3, sp, #84	; 0x54
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	000d      	movs	r5, r1
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	ab16      	add	r3, sp, #88	; 0x58
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	9303      	str	r3, [sp, #12]
 8002a0a:	ab17      	add	r3, sp, #92	; 0x5c
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	9304      	str	r3, [sp, #16]
 8002a10:	ab18      	add	r3, sp, #96	; 0x60
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	930a      	str	r3, [sp, #40]	; 0x28
 8002a16:	ab19      	add	r3, sp, #100	; 0x64
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a1c:	2319      	movs	r3, #25
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	7fdf      	ldrb	r7, [r3, #31]
 8002a22:	231d      	movs	r3, #29
 8002a24:	189b      	adds	r3, r3, r2
 8002a26:	7fdb      	ldrb	r3, [r3, #31]
 8002a28:	9309      	str	r3, [sp, #36]	; 0x24
    SX1272SetModem( modem );
 8002a2a:	f7ff ff13 	bl	8002854 <SX1272SetModem>
    switch( modem )
 8002a2e:	2c00      	cmp	r4, #0
 8002a30:	d004      	beq.n	8002a3c <SX1272SetRxConfig+0x5c>
 8002a32:	2c01      	cmp	r4, #1
 8002a34:	d100      	bne.n	8002a38 <SX1272SetRxConfig+0x58>
 8002a36:	e08b      	b.n	8002b50 <SX1272SetRxConfig+0x170>
}
 8002a38:	b00d      	add	sp, #52	; 0x34
 8002a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002a3c:	466a      	mov	r2, sp
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8002a3e:	4ca0      	ldr	r4, [pc, #640]	; (8002cc0 <SX1272SetRxConfig+0x2e0>)
            SX1272.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8002a40:	9b08      	ldr	r3, [sp, #32]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002a42:	7a12      	ldrb	r2, [r2, #8]
            SX1272.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8002a44:	61a3      	str	r3, [r4, #24]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002a46:	1ce3      	adds	r3, r4, #3
 8002a48:	77da      	strb	r2, [r3, #31]
            SX1272.Settings.Fsk.PayloadLen = payloadLen;
 8002a4a:	466a      	mov	r2, sp
 8002a4c:	7b12      	ldrb	r2, [r2, #12]
 8002a4e:	1d23      	adds	r3, r4, #4
 8002a50:	77da      	strb	r2, [r3, #31]
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8002a52:	466a      	mov	r2, sp
 8002a54:	7c12      	ldrb	r2, [r2, #16]
 8002a56:	1d63      	adds	r3, r4, #5
 8002a58:	77da      	strb	r2, [r3, #31]
            SX1272.Settings.Fsk.RxContinuous = rxContinuous;
 8002a5a:	2124      	movs	r1, #36	; 0x24
 8002a5c:	466a      	mov	r2, sp
 8002a5e:	1852      	adds	r2, r2, r1
 8002a60:	7812      	ldrb	r2, [r2, #0]
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 8002a62:	1da3      	adds	r3, r4, #6
 8002a64:	77df      	strb	r7, [r3, #31]
            SX1272.Settings.Fsk.RxContinuous = rxContinuous;
 8002a66:	1de3      	adds	r3, r4, #7
 8002a68:	77da      	strb	r2, [r3, #31]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8002a6a:	466b      	mov	r3, sp
 8002a6c:	889b      	ldrh	r3, [r3, #4]
            SX1272.Settings.Fsk.Datarate = datarate;
 8002a6e:	61e6      	str	r6, [r4, #28]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8002a70:	8423      	strh	r3, [r4, #32]
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8002a72:	6165      	str	r5, [r4, #20]
            SX1272.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8002a74:	0030      	movs	r0, r6
 8002a76:	f7ff fb53 	bl	8002120 <__aeabi_ui2d>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	000b      	movs	r3, r1
 8002a7e:	0006      	movs	r6, r0
 8002a80:	000f      	movs	r7, r1
 8002a82:	2000      	movs	r0, #0
 8002a84:	498f      	ldr	r1, [pc, #572]	; (8002cc4 <SX1272SetRxConfig+0x2e4>)
 8002a86:	f7fe f90b 	bl	8000ca0 <__aeabi_ddiv>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	4b8e      	ldr	r3, [pc, #568]	; (8002cc8 <SX1272SetRxConfig+0x2e8>)
 8002a8e:	f7fe fd3b 	bl	8001508 <__aeabi_dmul>
 8002a92:	9006      	str	r0, [sp, #24]
 8002a94:	9107      	str	r1, [sp, #28]
 8002a96:	9805      	ldr	r0, [sp, #20]
 8002a98:	f7ff fb00 	bl	800209c <__aeabi_i2d>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	000b      	movs	r3, r1
 8002aa0:	9806      	ldr	r0, [sp, #24]
 8002aa2:	9907      	ldr	r1, [sp, #28]
 8002aa4:	f7fe fd30 	bl	8001508 <__aeabi_dmul>
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <SX1272SetRxConfig+0x2ec>)
 8002aac:	f7fe fd2c 	bl	8001508 <__aeabi_dmul>
 8002ab0:	f7fd fd08 	bl	80004c4 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002ab4:	0032      	movs	r2, r6
 8002ab6:	003b      	movs	r3, r7
            SX1272.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8002ab8:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002aba:	4985      	ldr	r1, [pc, #532]	; (8002cd0 <SX1272SetRxConfig+0x2f0>)
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fe f8ef 	bl	8000ca0 <__aeabi_ddiv>
 8002ac2:	f7fd fcff 	bl	80004c4 <__aeabi_d2uiz>
 8002ac6:	b284      	uxth	r4, r0
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002ac8:	0a21      	lsrs	r1, r4, #8
 8002aca:	2002      	movs	r0, #2
 8002acc:	f7ff fbfc 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002ad0:	b2e1      	uxtb	r1, r4
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f7ff fbf8 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8002ad8:	0028      	movs	r0, r5
 8002ada:	f7ff fb83 	bl	80021e4 <GetFskBandwidthRegValue>
 8002ade:	0001      	movs	r1, r0
 8002ae0:	2012      	movs	r0, #18
 8002ae2:	f7ff fbf1 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8002ae6:	9808      	ldr	r0, [sp, #32]
 8002ae8:	f7ff fb7c 	bl	80021e4 <GetFskBandwidthRegValue>
 8002aec:	0001      	movs	r1, r0
 8002aee:	2013      	movs	r0, #19
 8002af0:	f7ff fbea 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002af4:	9b01      	ldr	r3, [sp, #4]
 8002af6:	2025      	movs	r0, #37	; 0x25
 8002af8:	0a19      	lsrs	r1, r3, #8
 8002afa:	f7ff fbe5 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002afe:	466b      	mov	r3, sp
 8002b00:	2026      	movs	r0, #38	; 0x26
 8002b02:	7919      	ldrb	r1, [r3, #4]
 8002b04:	f7ff fbe0 	bl	80022c8 <SX1272Write>
            if( fixLen == 1 )
 8002b08:	9b02      	ldr	r3, [sp, #8]
                SX1272Write( REG_PAYLOADLENGTH, payloadLen );
 8002b0a:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d100      	bne.n	8002b12 <SX1272SetRxConfig+0x132>
                SX1272Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8002b10:	21ff      	movs	r1, #255	; 0xff
 8002b12:	2032      	movs	r0, #50	; 0x32
 8002b14:	f7ff fbd8 	bl	80022c8 <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 8002b18:	2030      	movs	r0, #48	; 0x30
 8002b1a:	f7ff fc27 	bl	800236c <SX1272Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8002b1e:	216f      	movs	r1, #111	; 0x6f
 8002b20:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002b22:	2100      	movs	r1, #0
 8002b24:	9b02      	ldr	r3, [sp, #8]
 8002b26:	428b      	cmp	r3, r1
 8002b28:	d100      	bne.n	8002b2c <SX1272SetRxConfig+0x14c>
 8002b2a:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 8002b2c:	9b04      	ldr	r3, [sp, #16]
 8002b2e:	011d      	lsls	r5, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002b30:	4328      	orrs	r0, r5
 8002b32:	4301      	orrs	r1, r0
            SX1272Write( REG_PACKETCONFIG1,
 8002b34:	b2c9      	uxtb	r1, r1
 8002b36:	2030      	movs	r0, #48	; 0x30
 8002b38:	f7ff fbc6 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002b3c:	2031      	movs	r0, #49	; 0x31
 8002b3e:	f7ff fc15 	bl	800236c <SX1272Read>
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	4301      	orrs	r1, r0
 8002b46:	2031      	movs	r0, #49	; 0x31
 8002b48:	b2c9      	uxtb	r1, r1
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002b4a:	f7ff fbbd 	bl	80022c8 <SX1272Write>
}
 8002b4e:	e773      	b.n	8002a38 <SX1272SetRxConfig+0x58>
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8002b50:	4b5b      	ldr	r3, [pc, #364]	; (8002cc0 <SX1272SetRxConfig+0x2e0>)
            SX1272.Settings.LoRa.Coderate = coderate;
 8002b52:	4669      	mov	r1, sp
 8002b54:	001a      	movs	r2, r3
 8002b56:	7e09      	ldrb	r1, [r1, #24]
 8002b58:	324d      	adds	r2, #77	; 0x4d
 8002b5a:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 8002b5c:	4669      	mov	r1, sp
 8002b5e:	001a      	movs	r2, r3
 8002b60:	8889      	ldrh	r1, [r1, #4]
 8002b62:	324e      	adds	r2, #78	; 0x4e
 8002b64:	8011      	strh	r1, [r2, #0]
            SX1272.Settings.LoRa.FixLen = fixLen;
 8002b66:	4669      	mov	r1, sp
 8002b68:	001a      	movs	r2, r3
 8002b6a:	7a09      	ldrb	r1, [r1, #8]
 8002b6c:	3250      	adds	r2, #80	; 0x50
 8002b6e:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.PayloadLen = payloadLen;
 8002b70:	4669      	mov	r1, sp
 8002b72:	001a      	movs	r2, r3
 8002b74:	7b09      	ldrb	r1, [r1, #12]
 8002b76:	3251      	adds	r2, #81	; 0x51
 8002b78:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8002b7a:	4669      	mov	r1, sp
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	7c09      	ldrb	r1, [r1, #16]
 8002b80:	3252      	adds	r2, #82	; 0x52
 8002b82:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8002b84:	2028      	movs	r0, #40	; 0x28
 8002b86:	4669      	mov	r1, sp
 8002b88:	001a      	movs	r2, r3
 8002b8a:	1809      	adds	r1, r1, r0
 8002b8c:	7809      	ldrb	r1, [r1, #0]
 8002b8e:	3253      	adds	r2, #83	; 0x53
 8002b90:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8002b92:	4669      	mov	r1, sp
 8002b94:	001a      	movs	r2, r3
 8002b96:	3004      	adds	r0, #4
 8002b98:	1809      	adds	r1, r1, r0
 8002b9a:	7809      	ldrb	r1, [r1, #0]
 8002b9c:	3254      	adds	r2, #84	; 0x54
 8002b9e:	7011      	strb	r1, [r2, #0]
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8002ba0:	001a      	movs	r2, r3
            SX1272.Settings.LoRa.RxContinuous = rxContinuous;
 8002ba2:	4669      	mov	r1, sp
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8002ba4:	3255      	adds	r2, #85	; 0x55
 8002ba6:	7017      	strb	r7, [r2, #0]
            SX1272.Settings.LoRa.RxContinuous = rxContinuous;
 8002ba8:	001a      	movs	r2, r3
 8002baa:	3808      	subs	r0, #8
 8002bac:	1809      	adds	r1, r1, r0
 8002bae:	7809      	ldrb	r1, [r1, #0]
 8002bb0:	3256      	adds	r2, #86	; 0x56
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8002bb2:	645d      	str	r5, [r3, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 8002bb4:	649e      	str	r6, [r3, #72]	; 0x48
            SX1272.Settings.LoRa.RxContinuous = rxContinuous;
 8002bb6:	7011      	strb	r1, [r2, #0]
            if( datarate > 12 )
 8002bb8:	2e0c      	cmp	r6, #12
 8002bba:	d87d      	bhi.n	8002cb8 <SX1272SetRxConfig+0x2d8>
            else if( datarate < 6 )
 8002bbc:	2e05      	cmp	r6, #5
 8002bbe:	d96e      	bls.n	8002c9e <SX1272SetRxConfig+0x2be>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002bc0:	2d00      	cmp	r5, #0
 8002bc2:	d165      	bne.n	8002c90 <SX1272SetRxConfig+0x2b0>
 8002bc4:	0032      	movs	r2, r6
 8002bc6:	3a0b      	subs	r2, #11
 8002bc8:	2a01      	cmp	r2, #1
 8002bca:	d865      	bhi.n	8002c98 <SX1272SetRxConfig+0x2b8>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	334c      	adds	r3, #76	; 0x4c
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8002bd0:	201d      	movs	r0, #29
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002bd2:	701a      	strb	r2, [r3, #0]
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8002bd4:	f7ff fbca 	bl	800236c <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002bd8:	9b06      	ldr	r3, [sp, #24]
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8002bda:	4c39      	ldr	r4, [pc, #228]	; (8002cc0 <SX1272SetRxConfig+0x2e0>)
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002bdc:	00d9      	lsls	r1, r3, #3
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8002bde:	0023      	movs	r3, r4
 8002be0:	334c      	adds	r3, #76	; 0x4c
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002be2:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002be4:	01ad      	lsls	r5, r5, #6
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002be6:	4319      	orrs	r1, r3
 8002be8:	9b04      	ldr	r3, [sp, #16]
 8002bea:	0058      	lsls	r0, r3, #1
 8002bec:	9b02      	ldr	r3, [sp, #8]
 8002bee:	4301      	orrs	r1, r0
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4319      	orrs	r1, r3
 8002bf4:	4329      	orrs	r1, r5
            SX1272Write( REG_LR_MODEMCONFIG1,
 8002bf6:	b2c9      	uxtb	r1, r1
 8002bf8:	201d      	movs	r0, #29
 8002bfa:	f7ff fb65 	bl	80022c8 <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 8002bfe:	201e      	movs	r0, #30
 8002c00:	f7ff fbb4 	bl	800236c <SX1272Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002c04:	9b05      	ldr	r3, [sp, #20]
 8002c06:	0599      	lsls	r1, r3, #22
                           RFLR_MODEMCONFIG2_SF_MASK &
 8002c08:	230c      	movs	r3, #12
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002c0a:	0f89      	lsrs	r1, r1, #30
                           RFLR_MODEMCONFIG2_SF_MASK &
 8002c0c:	4018      	ands	r0, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 8002c0e:	4301      	orrs	r1, r0
                           ( datarate << 4 ) |
 8002c10:	0130      	lsls	r0, r6, #4
            SX1272Write( REG_LR_MODEMCONFIG2,
 8002c12:	4301      	orrs	r1, r0
 8002c14:	b2c9      	uxtb	r1, r1
 8002c16:	201e      	movs	r0, #30
 8002c18:	f7ff fb56 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8002c1c:	466b      	mov	r3, sp
 8002c1e:	201f      	movs	r0, #31
 8002c20:	7d19      	ldrb	r1, [r3, #20]
 8002c22:	f7ff fb51 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002c26:	9b01      	ldr	r3, [sp, #4]
 8002c28:	2020      	movs	r0, #32
 8002c2a:	0a19      	lsrs	r1, r3, #8
 8002c2c:	f7ff fb4c 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002c30:	466b      	mov	r3, sp
 8002c32:	2021      	movs	r0, #33	; 0x21
 8002c34:	7919      	ldrb	r1, [r3, #4]
 8002c36:	f7ff fb47 	bl	80022c8 <SX1272Write>
            if( fixLen == 1 )
 8002c3a:	9b02      	ldr	r3, [sp, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <SX1272SetRxConfig+0x268>
                SX1272Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8002c40:	9903      	ldr	r1, [sp, #12]
 8002c42:	2022      	movs	r0, #34	; 0x22
 8002c44:	f7ff fb40 	bl	80022c8 <SX1272Write>
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8002c48:	0023      	movs	r3, r4
 8002c4a:	3353      	adds	r3, #83	; 0x53
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00e      	beq.n	8002c70 <SX1272SetRxConfig+0x290>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002c52:	204b      	movs	r0, #75	; 0x4b
 8002c54:	f7ff fb8a 	bl	800236c <SX1272Read>
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	4249      	negs	r1, r1
 8002c5c:	4301      	orrs	r1, r0
 8002c5e:	b2c9      	uxtb	r1, r1
 8002c60:	204b      	movs	r0, #75	; 0x4b
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8002c62:	3454      	adds	r4, #84	; 0x54
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002c64:	f7ff fb30 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8002c68:	7821      	ldrb	r1, [r4, #0]
 8002c6a:	2024      	movs	r0, #36	; 0x24
 8002c6c:	f7ff fb2c 	bl	80022c8 <SX1272Write>
 8002c70:	2407      	movs	r4, #7
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002c72:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8002c74:	2e06      	cmp	r6, #6
 8002c76:	d114      	bne.n	8002ca2 <SX1272SetRxConfig+0x2c2>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002c78:	f7ff fb78 	bl	800236c <SX1272Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002c7c:	2105      	movs	r1, #5
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002c7e:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002c80:	4301      	orrs	r1, r0
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002c82:	b2c9      	uxtb	r1, r1
 8002c84:	2031      	movs	r0, #49	; 0x31
 8002c86:	f7ff fb1f 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002c8a:	210c      	movs	r1, #12
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002c8c:	2037      	movs	r0, #55	; 0x37
 8002c8e:	e75c      	b.n	8002b4a <SX1272SetRxConfig+0x16a>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002c90:	2d01      	cmp	r5, #1
 8002c92:	d101      	bne.n	8002c98 <SX1272SetRxConfig+0x2b8>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8002c94:	2e0c      	cmp	r6, #12
 8002c96:	d099      	beq.n	8002bcc <SX1272SetRxConfig+0x1ec>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002c98:	334c      	adds	r3, #76	; 0x4c
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	e798      	b.n	8002bd0 <SX1272SetRxConfig+0x1f0>
                datarate = 6;
 8002c9e:	2606      	movs	r6, #6
 8002ca0:	e7fa      	b.n	8002c98 <SX1272SetRxConfig+0x2b8>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002ca2:	f7ff fb63 	bl	800236c <SX1272Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002ca6:	2103      	movs	r1, #3
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002ca8:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002caa:	4301      	orrs	r1, r0
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002cac:	b2c9      	uxtb	r1, r1
 8002cae:	2031      	movs	r0, #49	; 0x31
 8002cb0:	f7ff fb0a 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002cb4:	210a      	movs	r1, #10
 8002cb6:	e7e9      	b.n	8002c8c <SX1272SetRxConfig+0x2ac>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002cb8:	260c      	movs	r6, #12
 8002cba:	2d01      	cmp	r5, #1
 8002cbc:	d8ec      	bhi.n	8002c98 <SX1272SetRxConfig+0x2b8>
 8002cbe:	e785      	b.n	8002bcc <SX1272SetRxConfig+0x1ec>
 8002cc0:	20000544 	.word	0x20000544
 8002cc4:	3ff00000 	.word	0x3ff00000
 8002cc8:	40200000 	.word	0x40200000
 8002ccc:	408f4000 	.word	0x408f4000
 8002cd0:	417e8480 	.word	0x417e8480

08002cd4 <SX1272SetTxConfig>:
{
 8002cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd6:	000e      	movs	r6, r1
 8002cd8:	b089      	sub	sp, #36	; 0x24
 8002cda:	001f      	movs	r7, r3
 8002cdc:	ab0e      	add	r3, sp, #56	; 0x38
 8002cde:	cb10      	ldmia	r3!, {r4}
 8002ce0:	0005      	movs	r5, r0
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	9203      	str	r2, [sp, #12]
 8002ce6:	9304      	str	r3, [sp, #16]
 8002ce8:	ab10      	add	r3, sp, #64	; 0x40
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	ab11      	add	r3, sp, #68	; 0x44
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	9301      	str	r3, [sp, #4]
 8002cf4:	ab12      	add	r3, sp, #72	; 0x48
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	9302      	str	r3, [sp, #8]
 8002cfa:	ab13      	add	r3, sp, #76	; 0x4c
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	9305      	str	r3, [sp, #20]
 8002d00:	ab14      	add	r3, sp, #80	; 0x50
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	9307      	str	r3, [sp, #28]
 8002d06:	ab15      	add	r3, sp, #84	; 0x54
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	9306      	str	r3, [sp, #24]
    SX1272SetModem( modem );
 8002d0c:	f7ff fda2 	bl	8002854 <SX1272SetModem>
    LoRaBoardCallbacks->SX1272BoardSetRfTxPower( power );
 8002d10:	4b85      	ldr	r3, [pc, #532]	; (8002f28 <SX1272SetTxConfig+0x254>)
 8002d12:	0030      	movs	r0, r6
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4798      	blx	r3
    switch( modem )
 8002d1a:	2d00      	cmp	r5, #0
 8002d1c:	d003      	beq.n	8002d26 <SX1272SetTxConfig+0x52>
 8002d1e:	2d01      	cmp	r5, #1
 8002d20:	d064      	beq.n	8002dec <SX1272SetTxConfig+0x118>
}
 8002d22:	b009      	add	sp, #36	; 0x24
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1272.Settings.Fsk.Power = power;
 8002d26:	4b81      	ldr	r3, [pc, #516]	; (8002f2c <SX1272SetTxConfig+0x258>)
            SX1272.Settings.Fsk.Fdev = fdev;
 8002d28:	9a03      	ldr	r2, [sp, #12]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002d2a:	4669      	mov	r1, sp
            SX1272.Settings.Fsk.Fdev = fdev;
 8002d2c:	611a      	str	r2, [r3, #16]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8002d2e:	466a      	mov	r2, sp
 8002d30:	8812      	ldrh	r2, [r2, #0]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002d32:	7909      	ldrb	r1, [r1, #4]
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8002d34:	841a      	strh	r2, [r3, #32]
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002d36:	1cda      	adds	r2, r3, #3
 8002d38:	77d1      	strb	r1, [r2, #31]
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8002d3a:	4669      	mov	r1, sp
 8002d3c:	7a09      	ldrb	r1, [r1, #8]
 8002d3e:	1d5a      	adds	r2, r3, #5
 8002d40:	77d1      	strb	r1, [r2, #31]
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 8002d42:	4669      	mov	r1, sp
 8002d44:	7e09      	ldrb	r1, [r1, #24]
 8002d46:	1d9a      	adds	r2, r3, #6
 8002d48:	77d1      	strb	r1, [r2, #31]
            SX1272.Settings.Fsk.TxTimeout = timeout;
 8002d4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
            SX1272.Settings.Fsk.Power = power;
 8002d4c:	731e      	strb	r6, [r3, #12]
            SX1272.Settings.Fsk.Datarate = datarate;
 8002d4e:	61dc      	str	r4, [r3, #28]
            SX1272.Settings.Fsk.TxTimeout = timeout;
 8002d50:	629a      	str	r2, [r3, #40]	; 0x28
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8002d52:	615f      	str	r7, [r3, #20]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8002d54:	9803      	ldr	r0, [sp, #12]
 8002d56:	f7ff f9e3 	bl	8002120 <__aeabi_ui2d>
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4b74      	ldr	r3, [pc, #464]	; (8002f30 <SX1272SetTxConfig+0x25c>)
 8002d5e:	f7fd ff9f 	bl	8000ca0 <__aeabi_ddiv>
 8002d62:	f7fd fbaf 	bl	80004c4 <__aeabi_d2uiz>
 8002d66:	b286      	uxth	r6, r0
            SX1272Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8002d68:	0a31      	lsrs	r1, r6, #8
 8002d6a:	2004      	movs	r0, #4
 8002d6c:	f7ff faac 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8002d70:	b2f1      	uxtb	r1, r6
 8002d72:	2005      	movs	r0, #5
 8002d74:	f7ff faa8 	bl	80022c8 <SX1272Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8002d78:	0020      	movs	r0, r4
 8002d7a:	f7ff f9d1 	bl	8002120 <__aeabi_ui2d>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	000b      	movs	r3, r1
 8002d82:	2000      	movs	r0, #0
 8002d84:	496b      	ldr	r1, [pc, #428]	; (8002f34 <SX1272SetTxConfig+0x260>)
 8002d86:	f7fd ff8b 	bl	8000ca0 <__aeabi_ddiv>
 8002d8a:	f7fd fb9b 	bl	80004c4 <__aeabi_d2uiz>
 8002d8e:	b284      	uxth	r4, r0
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8002d90:	0a21      	lsrs	r1, r4, #8
 8002d92:	2002      	movs	r0, #2
 8002d94:	f7ff fa98 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002d98:	b2e1      	uxtb	r1, r4
 8002d9a:	2003      	movs	r0, #3
 8002d9c:	f7ff fa94 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002da0:	9b00      	ldr	r3, [sp, #0]
 8002da2:	2025      	movs	r0, #37	; 0x25
 8002da4:	0a19      	lsrs	r1, r3, #8
 8002da6:	f7ff fa8f 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8002daa:	466b      	mov	r3, sp
 8002dac:	2026      	movs	r0, #38	; 0x26
 8002dae:	7819      	ldrb	r1, [r3, #0]
 8002db0:	f7ff fa8a 	bl	80022c8 <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 8002db4:	2030      	movs	r0, #48	; 0x30
 8002db6:	f7ff fad9 	bl	800236c <SX1272Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8002dba:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002dbc:	9b01      	ldr	r3, [sp, #4]
                           RF_PACKETCONFIG1_CRC_MASK &
 8002dbe:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <SX1272SetTxConfig+0xf4>
 8002dc4:	2580      	movs	r5, #128	; 0x80
 8002dc6:	426d      	negs	r5, r5
                           ( crcOn << 4 ) );
 8002dc8:	9b02      	ldr	r3, [sp, #8]
 8002dca:	0118      	lsls	r0, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002dcc:	4301      	orrs	r1, r0
 8002dce:	4329      	orrs	r1, r5
            SX1272Write( REG_PACKETCONFIG1,
 8002dd0:	b2c9      	uxtb	r1, r1
 8002dd2:	2030      	movs	r0, #48	; 0x30
 8002dd4:	f7ff fa78 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002dd8:	2031      	movs	r0, #49	; 0x31
 8002dda:	f7ff fac7 	bl	800236c <SX1272Read>
 8002dde:	2140      	movs	r1, #64	; 0x40
 8002de0:	4301      	orrs	r1, r0
 8002de2:	2031      	movs	r0, #49	; 0x31
 8002de4:	b2c9      	uxtb	r1, r1
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002de6:	f7ff fa6f 	bl	80022c8 <SX1272Write>
}
 8002dea:	e79a      	b.n	8002d22 <SX1272SetTxConfig+0x4e>
            SX1272.Settings.LoRa.Power = power;
 8002dec:	4d4f      	ldr	r5, [pc, #316]	; (8002f2c <SX1272SetTxConfig+0x258>)
            SX1272.Settings.LoRa.Coderate = coderate;
 8002dee:	466a      	mov	r2, sp
            SX1272.Settings.LoRa.Power = power;
 8002df0:	002b      	movs	r3, r5
 8002df2:	3340      	adds	r3, #64	; 0x40
 8002df4:	701e      	strb	r6, [r3, #0]
            SX1272.Settings.LoRa.Coderate = coderate;
 8002df6:	002b      	movs	r3, r5
 8002df8:	7c12      	ldrb	r2, [r2, #16]
 8002dfa:	334d      	adds	r3, #77	; 0x4d
 8002dfc:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 8002dfe:	466a      	mov	r2, sp
 8002e00:	002b      	movs	r3, r5
 8002e02:	8812      	ldrh	r2, [r2, #0]
 8002e04:	334e      	adds	r3, #78	; 0x4e
 8002e06:	801a      	strh	r2, [r3, #0]
            SX1272.Settings.LoRa.FixLen = fixLen;
 8002e08:	466a      	mov	r2, sp
 8002e0a:	002b      	movs	r3, r5
 8002e0c:	7912      	ldrb	r2, [r2, #4]
 8002e0e:	3350      	adds	r3, #80	; 0x50
 8002e10:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8002e12:	466a      	mov	r2, sp
 8002e14:	002b      	movs	r3, r5
 8002e16:	7d12      	ldrb	r2, [r2, #20]
 8002e18:	3353      	adds	r3, #83	; 0x53
 8002e1a:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8002e1c:	466a      	mov	r2, sp
 8002e1e:	002b      	movs	r3, r5
 8002e20:	7f12      	ldrb	r2, [r2, #28]
 8002e22:	3354      	adds	r3, #84	; 0x54
 8002e24:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8002e26:	466a      	mov	r2, sp
 8002e28:	002b      	movs	r3, r5
 8002e2a:	7a12      	ldrb	r2, [r2, #8]
 8002e2c:	3352      	adds	r3, #82	; 0x52
 8002e2e:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8002e30:	466a      	mov	r2, sp
 8002e32:	002b      	movs	r3, r5
 8002e34:	7e12      	ldrb	r2, [r2, #24]
 8002e36:	3355      	adds	r3, #85	; 0x55
 8002e38:	701a      	strb	r2, [r3, #0]
            SX1272.Settings.LoRa.TxTimeout = timeout;
 8002e3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8002e3c:	646f      	str	r7, [r5, #68]	; 0x44
            SX1272.Settings.LoRa.Datarate = datarate;
 8002e3e:	64ac      	str	r4, [r5, #72]	; 0x48
            SX1272.Settings.LoRa.TxTimeout = timeout;
 8002e40:	65ab      	str	r3, [r5, #88]	; 0x58
            if( datarate > 12 )
 8002e42:	2c0c      	cmp	r4, #12
 8002e44:	d86c      	bhi.n	8002f20 <SX1272SetTxConfig+0x24c>
            else if( datarate < 6 )
 8002e46:	2c05      	cmp	r4, #5
 8002e48:	d95d      	bls.n	8002f06 <SX1272SetTxConfig+0x232>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002e4a:	2f00      	cmp	r7, #0
 8002e4c:	d153      	bne.n	8002ef6 <SX1272SetTxConfig+0x222>
 8002e4e:	0023      	movs	r3, r4
 8002e50:	3b0b      	subs	r3, #11
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d853      	bhi.n	8002efe <SX1272SetTxConfig+0x22a>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002e56:	002b      	movs	r3, r5
 8002e58:	2201      	movs	r2, #1
 8002e5a:	334c      	adds	r3, #76	; 0x4c
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002e5c:	701a      	strb	r2, [r3, #0]
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8002e5e:	9b05      	ldr	r3, [sp, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00f      	beq.n	8002e84 <SX1272SetTxConfig+0x1b0>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002e64:	204b      	movs	r0, #75	; 0x4b
 8002e66:	f7ff fa81 	bl	800236c <SX1272Read>
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	4249      	negs	r1, r1
 8002e6e:	4301      	orrs	r1, r0
 8002e70:	b2c9      	uxtb	r1, r1
 8002e72:	204b      	movs	r0, #75	; 0x4b
 8002e74:	f7ff fa28 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8002e78:	002b      	movs	r3, r5
 8002e7a:	3354      	adds	r3, #84	; 0x54
 8002e7c:	7819      	ldrb	r1, [r3, #0]
 8002e7e:	2024      	movs	r0, #36	; 0x24
 8002e80:	f7ff fa22 	bl	80022c8 <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8002e84:	201d      	movs	r0, #29
 8002e86:	f7ff fa71 	bl	800236c <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002e8a:	9b04      	ldr	r3, [sp, #16]
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8002e8c:	354c      	adds	r5, #76	; 0x4c
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002e8e:	00d9      	lsls	r1, r3, #3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002e90:	782b      	ldrb	r3, [r5, #0]
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002e92:	01bf      	lsls	r7, r7, #6
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002e94:	4319      	orrs	r1, r3
 8002e96:	9b02      	ldr	r3, [sp, #8]
 8002e98:	2507      	movs	r5, #7
 8002e9a:	0058      	lsls	r0, r3, #1
 8002e9c:	9b01      	ldr	r3, [sp, #4]
 8002e9e:	4301      	orrs	r1, r0
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4319      	orrs	r1, r3
 8002ea4:	4339      	orrs	r1, r7
            SX1272Write( REG_LR_MODEMCONFIG1,
 8002ea6:	b2c9      	uxtb	r1, r1
 8002ea8:	201d      	movs	r0, #29
 8002eaa:	f7ff fa0d 	bl	80022c8 <SX1272Write>
                        ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 8002eae:	201e      	movs	r0, #30
 8002eb0:	f7ff fa5c 	bl	800236c <SX1272Read>
 8002eb4:	210f      	movs	r1, #15
 8002eb6:	4001      	ands	r1, r0
                          ( datarate << 4 ) );
 8002eb8:	0120      	lsls	r0, r4, #4
            SX1272Write( REG_LR_MODEMCONFIG2,
 8002eba:	4301      	orrs	r1, r0
 8002ebc:	b2c9      	uxtb	r1, r1
 8002ebe:	201e      	movs	r0, #30
 8002ec0:	f7ff fa02 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002ec4:	9b00      	ldr	r3, [sp, #0]
 8002ec6:	2020      	movs	r0, #32
 8002ec8:	0a19      	lsrs	r1, r3, #8
 8002eca:	f7ff f9fd 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8002ece:	466b      	mov	r3, sp
 8002ed0:	2021      	movs	r0, #33	; 0x21
 8002ed2:	7819      	ldrb	r1, [r3, #0]
 8002ed4:	f7ff f9f8 	bl	80022c8 <SX1272Write>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002ed8:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8002eda:	2c06      	cmp	r4, #6
 8002edc:	d115      	bne.n	8002f0a <SX1272SetTxConfig+0x236>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002ede:	f7ff fa45 	bl	800236c <SX1272Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002ee2:	2105      	movs	r1, #5
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002ee4:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002ee6:	4301      	orrs	r1, r0
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002ee8:	b2c9      	uxtb	r1, r1
 8002eea:	2031      	movs	r0, #49	; 0x31
 8002eec:	f7ff f9ec 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002ef0:	210c      	movs	r1, #12
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002ef2:	2037      	movs	r0, #55	; 0x37
 8002ef4:	e777      	b.n	8002de6 <SX1272SetTxConfig+0x112>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002ef6:	2f01      	cmp	r7, #1
 8002ef8:	d101      	bne.n	8002efe <SX1272SetTxConfig+0x22a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8002efa:	2c0c      	cmp	r4, #12
 8002efc:	d0ab      	beq.n	8002e56 <SX1272SetTxConfig+0x182>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002efe:	002b      	movs	r3, r5
 8002f00:	2200      	movs	r2, #0
 8002f02:	334c      	adds	r3, #76	; 0x4c
 8002f04:	e7aa      	b.n	8002e5c <SX1272SetTxConfig+0x188>
                datarate = 6;
 8002f06:	2406      	movs	r4, #6
 8002f08:	e7f9      	b.n	8002efe <SX1272SetTxConfig+0x22a>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002f0a:	f7ff fa2f 	bl	800236c <SX1272Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002f0e:	2103      	movs	r1, #3
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002f10:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002f12:	4301      	orrs	r1, r0
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002f14:	b2c9      	uxtb	r1, r1
 8002f16:	2031      	movs	r0, #49	; 0x31
 8002f18:	f7ff f9d6 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002f1c:	210a      	movs	r1, #10
 8002f1e:	e7e8      	b.n	8002ef2 <SX1272SetTxConfig+0x21e>
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002f20:	240c      	movs	r4, #12
 8002f22:	2f01      	cmp	r7, #1
 8002f24:	d8eb      	bhi.n	8002efe <SX1272SetTxConfig+0x22a>
 8002f26:	e796      	b.n	8002e56 <SX1272SetTxConfig+0x182>
 8002f28:	200000b8 	.word	0x200000b8
 8002f2c:	20000544 	.word	0x20000544
 8002f30:	404e8480 	.word	0x404e8480
 8002f34:	417e8480 	.word	0x417e8480

08002f38 <SX1272SetTxContinuousWave>:
{
 8002f38:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8002f3a:	24fa      	movs	r4, #250	; 0xfa
{
 8002f3c:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8002f3e:	00a4      	lsls	r4, r4, #2
 8002f40:	4354      	muls	r4, r2
{
 8002f42:	000d      	movs	r5, r1
    SX1272SetChannel( freq );
 8002f44:	f7ff f9ca 	bl	80022dc <SX1272SetChannel>
    SX1272SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8002f48:	2305      	movs	r3, #5
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	2396      	movs	r3, #150	; 0x96
 8002f4e:	2000      	movs	r0, #0
 8002f50:	015b      	lsls	r3, r3, #5
 8002f52:	0002      	movs	r2, r0
 8002f54:	0029      	movs	r1, r5
 8002f56:	9007      	str	r0, [sp, #28]
 8002f58:	9006      	str	r0, [sp, #24]
 8002f5a:	9005      	str	r0, [sp, #20]
 8002f5c:	9004      	str	r0, [sp, #16]
 8002f5e:	9003      	str	r0, [sp, #12]
 8002f60:	9001      	str	r0, [sp, #4]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	9408      	str	r4, [sp, #32]
 8002f66:	0003      	movs	r3, r0
 8002f68:	f7ff feb4 	bl	8002cd4 <SX1272SetTxConfig>
    SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8002f6c:	2031      	movs	r0, #49	; 0x31
 8002f6e:	f7ff f9fd 	bl	800236c <SX1272Read>
 8002f72:	2540      	movs	r5, #64	; 0x40
 8002f74:	43a8      	bics	r0, r5
 8002f76:	b2c1      	uxtb	r1, r0
 8002f78:	2031      	movs	r0, #49	; 0x31
 8002f7a:	f7ff f9a5 	bl	80022c8 <SX1272Write>
    SX1272Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8002f7e:	0028      	movs	r0, r5
 8002f80:	21f0      	movs	r1, #240	; 0xf0
 8002f82:	f7ff f9a1 	bl	80022c8 <SX1272Write>
    SX1272Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8002f86:	21a0      	movs	r1, #160	; 0xa0
 8002f88:	2041      	movs	r0, #65	; 0x41
 8002f8a:	f7ff f99d 	bl	80022c8 <SX1272Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8002f8e:	4d08      	ldr	r5, [pc, #32]	; (8002fb0 <SX1272SetTxContinuousWave+0x78>)
 8002f90:	0021      	movs	r1, r4
 8002f92:	0028      	movs	r0, r5
 8002f94:	f003 f916 	bl	80061c4 <TimerSetValue>
    SX1272.Settings.State = RF_TX_RUNNING;
 8002f98:	2202      	movs	r2, #2
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <SX1272SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 8002f9c:	0028      	movs	r0, r5
    SX1272.Settings.State = RF_TX_RUNNING;
 8002f9e:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8002fa0:	f003 f868 	bl	8006074 <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f7ff fafd 	bl	80025a4 <SX1272SetOpMode>
}
 8002faa:	b00b      	add	sp, #44	; 0x2c
 8002fac:	bd30      	pop	{r4, r5, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	200005ac 	.word	0x200005ac
 8002fb4:	20000544 	.word	0x20000544

08002fb8 <SX1272OnDio2Irq>:
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.State )
 8002fba:	4c2b      	ldr	r4, [pc, #172]	; (8003068 <SX1272OnDio2Irq+0xb0>)
 8002fbc:	7921      	ldrb	r1, [r4, #4]
 8002fbe:	2901      	cmp	r1, #1
 8002fc0:	d002      	beq.n	8002fc8 <SX1272OnDio2Irq+0x10>
 8002fc2:	2902      	cmp	r1, #2
 8002fc4:	d048      	beq.n	8003058 <SX1272OnDio2Irq+0xa0>
}
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1272.Settings.Modem )
 8002fc8:	7963      	ldrb	r3, [r4, #5]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d017      	beq.n	8002ffe <SX1272OnDio2Irq+0x46>
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d1f9      	bne.n	8002fc6 <SX1272OnDio2Irq+0xe>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 8002fd2:	3453      	adds	r4, #83	; 0x53
 8002fd4:	7823      	ldrb	r3, [r4, #0]
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8002fd6:	2102      	movs	r1, #2
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f4      	beq.n	8002fc6 <SX1272OnDio2Irq+0xe>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8002fdc:	2012      	movs	r0, #18
 8002fde:	f7ff f973 	bl	80022c8 <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <SX1272OnDio2Irq+0xb4>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0ed      	beq.n	8002fc6 <SX1272OnDio2Irq+0xe>
 8002fea:	695c      	ldr	r4, [r3, #20]
 8002fec:	2c00      	cmp	r4, #0
 8002fee:	d0ea      	beq.n	8002fc6 <SX1272OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8002ff0:	201c      	movs	r0, #28
 8002ff2:	f7ff f9bb 	bl	800236c <SX1272Read>
 8002ff6:	233f      	movs	r3, #63	; 0x3f
 8002ff8:	4018      	ands	r0, r3
 8002ffa:	47a0      	blx	r4
}
 8002ffc:	e7e3      	b.n	8002fc6 <SX1272OnDio2Irq+0xe>
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 8002ffe:	0023      	movs	r3, r4
 8003000:	3330      	adds	r3, #48	; 0x30
 8003002:	7019      	strb	r1, [r3, #0]
                if( ( SX1272.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1272.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8003004:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8003006:	2d01      	cmp	r5, #1
 8003008:	d1dd      	bne.n	8002fc6 <SX1272OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 800300a:	4819      	ldr	r0, [pc, #100]	; (8003070 <SX1272OnDio2Irq+0xb8>)
 800300c:	f003 f8ae 	bl	800616c <TimerStop>
                    SX1272.Settings.FskPacketHandler.SyncWordDetected = true;
 8003010:	0023      	movs	r3, r4
                    SX1272.Settings.FskPacketHandler.RssiValue = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8003012:	2011      	movs	r0, #17
                    SX1272.Settings.FskPacketHandler.SyncWordDetected = true;
 8003014:	3331      	adds	r3, #49	; 0x31
 8003016:	701d      	strb	r5, [r3, #0]
                    SX1272.Settings.FskPacketHandler.RssiValue = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8003018:	f7ff f9a8 	bl	800236c <SX1272Read>
 800301c:	0023      	movs	r3, r4
 800301e:	0840      	lsrs	r0, r0, #1
 8003020:	3332      	adds	r3, #50	; 0x32
 8003022:	4240      	negs	r0, r0
 8003024:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8003026:	201b      	movs	r0, #27
 8003028:	f7ff f9a0 	bl	800236c <SX1272Read>
 800302c:	0005      	movs	r5, r0
                                     ( uint16_t )SX1272Read( REG_AFCLSB ) );
 800302e:	201c      	movs	r0, #28
 8003030:	f7ff f99c 	bl	800236c <SX1272Read>
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8003034:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1272.Settings.FskPacketHandler.AfcValue );
 8003036:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <SX1272OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8003038:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1272.Settings.FskPacketHandler.AfcValue );
 800303a:	b2c3      	uxtb	r3, r0
 800303c:	4353      	muls	r3, r2
 800303e:	0a00      	lsrs	r0, r0, #8
 8003040:	4350      	muls	r0, r2
 8003042:	3380      	adds	r3, #128	; 0x80
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	1818      	adds	r0, r3, r0
 8003048:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1272.Settings.FskPacketHandler.RxGain = ( SX1272Read( REG_LNA ) >> 5 ) & 0x07;
 800304a:	200c      	movs	r0, #12
 800304c:	f7ff f98e 	bl	800236c <SX1272Read>
 8003050:	3438      	adds	r4, #56	; 0x38
 8003052:	0940      	lsrs	r0, r0, #5
 8003054:	7020      	strb	r0, [r4, #0]
 8003056:	e7b6      	b.n	8002fc6 <SX1272OnDio2Irq+0xe>
            switch( SX1272.Settings.Modem )
 8003058:	7963      	ldrb	r3, [r4, #5]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d1b3      	bne.n	8002fc6 <SX1272OnDio2Irq+0xe>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 800305e:	3453      	adds	r4, #83	; 0x53
 8003060:	7823      	ldrb	r3, [r4, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0af      	beq.n	8002fc6 <SX1272OnDio2Irq+0xe>
 8003066:	e7b9      	b.n	8002fdc <SX1272OnDio2Irq+0x24>
 8003068:	20000544 	.word	0x20000544
 800306c:	200001b8 	.word	0x200001b8
 8003070:	200005c4 	.word	0x200005c4
 8003074:	00003d09 	.word	0x00003d09

08003078 <SX1272OnDio3Irq>:
{
 8003078:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.Modem )
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <SX1272OnDio3Irq+0x4c>)
 800307c:	795d      	ldrb	r5, [r3, #5]
 800307e:	2d01      	cmp	r5, #1
 8003080:	d111      	bne.n	80030a6 <SX1272OnDio3Irq+0x2e>
        if( ( SX1272Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8003082:	2012      	movs	r0, #18
 8003084:	f7ff f972 	bl	800236c <SX1272Read>
 8003088:	4028      	ands	r0, r5
 800308a:	1e04      	subs	r4, r0, #0
 800308c:	4e0e      	ldr	r6, [pc, #56]	; (80030c8 <SX1272OnDio3Irq+0x50>)
 800308e:	d00b      	beq.n	80030a8 <SX1272OnDio3Irq+0x30>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003090:	2105      	movs	r1, #5
 8003092:	2012      	movs	r0, #18
 8003094:	f7ff f918 	bl	80022c8 <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003098:	6873      	ldr	r3, [r6, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <SX1272OnDio3Irq+0x2e>
 800309e:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 80030a0:	0028      	movs	r0, r5
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <SX1272OnDio3Irq+0x46>
}
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80030a8:	2104      	movs	r1, #4
 80030aa:	2012      	movs	r0, #18
 80030ac:	f7ff f90c 	bl	80022c8 <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80030b0:	6873      	ldr	r3, [r6, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f7      	beq.n	80030a6 <SX1272OnDio3Irq+0x2e>
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f4      	beq.n	80030a6 <SX1272OnDio3Irq+0x2e>
                RadioEvents->CadDone( false );
 80030bc:	0020      	movs	r0, r4
 80030be:	4798      	blx	r3
}
 80030c0:	e7f1      	b.n	80030a6 <SX1272OnDio3Irq+0x2e>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	20000544 	.word	0x20000544
 80030c8:	200001b8 	.word	0x200001b8

080030cc <SX1272WriteFifo>:
{
 80030cc:	b510      	push	{r4, lr}
 80030ce:	000a      	movs	r2, r1
    SX1272WriteBuffer( 0, buffer, size );
 80030d0:	0001      	movs	r1, r0
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7ff f8da 	bl	800228c <SX1272WriteBuffer>
}
 80030d8:	bd10      	pop	{r4, pc}
	...

080030dc <SX1272Send>:
{
 80030dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030de:	466b      	mov	r3, sp
    switch( SX1272.Settings.Modem )
 80030e0:	4c3b      	ldr	r4, [pc, #236]	; (80031d0 <SX1272Send+0xf4>)
{
 80030e2:	1dde      	adds	r6, r3, #7
 80030e4:	7031      	strb	r1, [r6, #0]
    switch( SX1272.Settings.Modem )
 80030e6:	7965      	ldrb	r5, [r4, #5]
{
 80030e8:	0007      	movs	r7, r0
    switch( SX1272.Settings.Modem )
 80030ea:	2d00      	cmp	r5, #0
 80030ec:	d003      	beq.n	80030f6 <SX1272Send+0x1a>
 80030ee:	2d01      	cmp	r5, #1
 80030f0:	d02f      	beq.n	8003152 <SX1272Send+0x76>
    uint32_t txTimeout = 0;
 80030f2:	2000      	movs	r0, #0
 80030f4:	e01c      	b.n	8003130 <SX1272Send+0x54>
            SX1272.Settings.FskPacketHandler.Size = size;
 80030f6:	7831      	ldrb	r1, [r6, #0]
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 80030f8:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = size;
 80030fa:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1272.Settings.Fsk.FixLen == false )
 80030fc:	1ce3      	adds	r3, r4, #3
 80030fe:	7fdb      	ldrb	r3, [r3, #31]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d118      	bne.n	8003136 <SX1272Send+0x5a>
                SX1272WriteFifo( ( uint8_t* )&size, 1 );
 8003104:	2101      	movs	r1, #1
 8003106:	0030      	movs	r0, r6
 8003108:	f7ff ffe0 	bl	80030cc <SX1272WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 800310c:	7832      	ldrb	r2, [r6, #0]
 800310e:	1e53      	subs	r3, r2, #1
 8003110:	2b3f      	cmp	r3, #63	; 0x3f
 8003112:	d814      	bhi.n	800313e <SX1272Send+0x62>
                SX1272.Settings.FskPacketHandler.ChunkSize = size;
 8003114:	0023      	movs	r3, r4
 8003116:	333f      	adds	r3, #63	; 0x3f
            SX1272WriteFifo( buffer, SX1272.Settings.FskPacketHandler.ChunkSize );
 8003118:	0025      	movs	r5, r4
                SX1272.Settings.FskPacketHandler.ChunkSize = 32;
 800311a:	701a      	strb	r2, [r3, #0]
            SX1272WriteFifo( buffer, SX1272.Settings.FskPacketHandler.ChunkSize );
 800311c:	353f      	adds	r5, #63	; 0x3f
 800311e:	0038      	movs	r0, r7
 8003120:	7829      	ldrb	r1, [r5, #0]
 8003122:	f7ff ffd3 	bl	80030cc <SX1272WriteFifo>
            SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 8003126:	782b      	ldrb	r3, [r5, #0]
 8003128:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1272.Settings.Fsk.TxTimeout;
 800312a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 800312c:	189b      	adds	r3, r3, r2
 800312e:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1272SetTx( txTimeout );
 8003130:	f7ff fb26 	bl	8002780 <SX1272SetTx>
}
 8003134:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1272Write( REG_PAYLOADLENGTH, size );
 8003136:	2032      	movs	r0, #50	; 0x32
 8003138:	f7ff f8c6 	bl	80022c8 <SX1272Write>
 800313c:	e7e6      	b.n	800310c <SX1272Send+0x30>
                memcpy1( RxTxBuffer, buffer, size );
 800313e:	4825      	ldr	r0, [pc, #148]	; (80031d4 <SX1272Send+0xf8>)
 8003140:	b292      	uxth	r2, r2
 8003142:	0039      	movs	r1, r7
 8003144:	3004      	adds	r0, #4
 8003146:	f003 f8d7 	bl	80062f8 <memcpy1>
                SX1272.Settings.FskPacketHandler.ChunkSize = 32;
 800314a:	0023      	movs	r3, r4
 800314c:	2220      	movs	r2, #32
 800314e:	333f      	adds	r3, #63	; 0x3f
 8003150:	e7e2      	b.n	8003118 <SX1272Send+0x3c>
            if( SX1272.Settings.LoRa.IqInverted == true )
 8003152:	0023      	movs	r3, r4
 8003154:	3355      	adds	r3, #85	; 0x55
 8003156:	781b      	ldrb	r3, [r3, #0]
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003158:	2033      	movs	r0, #51	; 0x33
            if( SX1272.Settings.LoRa.IqInverted == true )
 800315a:	2b00      	cmp	r3, #0
 800315c:	d02b      	beq.n	80031b6 <SX1272Send+0xda>
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800315e:	f7ff f905 	bl	800236c <SX1272Read>
 8003162:	2341      	movs	r3, #65	; 0x41
 8003164:	4398      	bics	r0, r3
 8003166:	b2c1      	uxtb	r1, r0
 8003168:	2033      	movs	r0, #51	; 0x33
 800316a:	f7ff f8ad 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800316e:	2119      	movs	r1, #25
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003170:	203b      	movs	r0, #59	; 0x3b
 8003172:	f7ff f8a9 	bl	80022c8 <SX1272Write>
            SX1272.Settings.LoRaPacketHandler.Size = size;
 8003176:	0023      	movs	r3, r4
 8003178:	7831      	ldrb	r1, [r6, #0]
 800317a:	3364      	adds	r3, #100	; 0x64
            SX1272Write( REG_LR_PAYLOADLENGTH, size );
 800317c:	2022      	movs	r0, #34	; 0x22
            SX1272.Settings.LoRaPacketHandler.Size = size;
 800317e:	7019      	strb	r1, [r3, #0]
            SX1272Write( REG_LR_PAYLOADLENGTH, size );
 8003180:	f7ff f8a2 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003184:	2100      	movs	r1, #0
 8003186:	200e      	movs	r0, #14
 8003188:	f7ff f89e 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 800318c:	2100      	movs	r1, #0
 800318e:	200d      	movs	r0, #13
 8003190:	f7ff f89a 	bl	80022c8 <SX1272Write>
            if( ( SX1272Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8003194:	2001      	movs	r0, #1
 8003196:	f7ff f8e9 	bl	800236c <SX1272Read>
 800319a:	23f8      	movs	r3, #248	; 0xf8
 800319c:	4398      	bics	r0, r3
 800319e:	d104      	bne.n	80031aa <SX1272Send+0xce>
                SX1272SetStby( );
 80031a0:	f7ff fa30 	bl	8002604 <SX1272SetStby>
                DelayMs( 1 );
 80031a4:	2001      	movs	r0, #1
 80031a6:	f003 fd75 	bl	8006c94 <HAL_Delay>
            SX1272WriteFifo( buffer, size );
 80031aa:	0038      	movs	r0, r7
 80031ac:	7831      	ldrb	r1, [r6, #0]
 80031ae:	f7ff ff8d 	bl	80030cc <SX1272WriteFifo>
            txTimeout = SX1272.Settings.LoRa.TxTimeout;
 80031b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 80031b4:	e7bc      	b.n	8003130 <SX1272Send+0x54>
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80031b6:	f7ff f8d9 	bl	800236c <SX1272Read>
 80031ba:	2341      	movs	r3, #65	; 0x41
 80031bc:	0001      	movs	r1, r0
 80031be:	4399      	bics	r1, r3
 80031c0:	4329      	orrs	r1, r5
 80031c2:	b2c9      	uxtb	r1, r1
 80031c4:	2033      	movs	r0, #51	; 0x33
 80031c6:	f7ff f87f 	bl	80022c8 <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80031ca:	211d      	movs	r1, #29
 80031cc:	e7d0      	b.n	8003170 <SX1272Send+0x94>
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	20000544 	.word	0x20000544
 80031d4:	200000b8 	.word	0x200000b8

080031d8 <SX1272ReadFifo>:
{
 80031d8:	b510      	push	{r4, lr}
 80031da:	000a      	movs	r2, r1
    SX1272ReadBuffer( 0, buffer, size );
 80031dc:	0001      	movs	r1, r0
 80031de:	2000      	movs	r0, #0
 80031e0:	f7ff f8a6 	bl	8002330 <SX1272ReadBuffer>
}
 80031e4:	bd10      	pop	{r4, pc}
	...

080031e8 <SX1272OnDio0Irq>:
{
 80031e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 80031ea:	466b      	mov	r3, sp
 80031ec:	1ddd      	adds	r5, r3, #7
 80031ee:	2300      	movs	r3, #0
    switch( SX1272.Settings.State )
 80031f0:	4c88      	ldr	r4, [pc, #544]	; (8003414 <SX1272OnDio0Irq+0x22c>)
    volatile uint8_t irqFlags = 0;
 80031f2:	702b      	strb	r3, [r5, #0]
    switch( SX1272.Settings.State )
 80031f4:	7923      	ldrb	r3, [r4, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d003      	beq.n	8003202 <SX1272OnDio0Irq+0x1a>
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d100      	bne.n	8003200 <SX1272OnDio0Irq+0x18>
 80031fe:	e0f6      	b.n	80033ee <SX1272OnDio0Irq+0x206>
}
 8003200:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1272.Settings.Modem )
 8003202:	7963      	ldrb	r3, [r4, #5]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d024      	beq.n	8003252 <SX1272OnDio0Irq+0x6a>
 8003208:	2b01      	cmp	r3, #1
 800320a:	d1f9      	bne.n	8003200 <SX1272OnDio0Irq+0x18>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	2012      	movs	r0, #18
 8003210:	f7ff f85a 	bl	80022c8 <SX1272Write>
                    irqFlags = SX1272Read( REG_LR_IRQFLAGS );
 8003214:	2012      	movs	r0, #18
 8003216:	f7ff f8a9 	bl	800236c <SX1272Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800321a:	2120      	movs	r1, #32
                    irqFlags = SX1272Read( REG_LR_IRQFLAGS );
 800321c:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800321e:	782b      	ldrb	r3, [r5, #0]
 8003220:	4e7d      	ldr	r6, [pc, #500]	; (8003418 <SX1272OnDio0Irq+0x230>)
 8003222:	4d7e      	ldr	r5, [pc, #504]	; (800341c <SX1272OnDio0Irq+0x234>)
 8003224:	420b      	tst	r3, r1
 8003226:	d100      	bne.n	800322a <SX1272OnDio0Irq+0x42>
 8003228:	e096      	b.n	8003358 <SX1272OnDio0Irq+0x170>
                        SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800322a:	2012      	movs	r0, #18
 800322c:	f7ff f84c 	bl	80022c8 <SX1272Write>
                        if( SX1272.Settings.LoRa.RxContinuous == false )
 8003230:	0023      	movs	r3, r4
 8003232:	3356      	adds	r3, #86	; 0x56
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d100      	bne.n	800323c <SX1272OnDio0Irq+0x54>
                            SX1272.Settings.State = RF_IDLE;
 800323a:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 800323c:	0030      	movs	r0, r6
 800323e:	f002 ff95 	bl	800616c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003242:	686b      	ldr	r3, [r5, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0db      	beq.n	8003200 <SX1272OnDio0Irq+0x18>
 8003248:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0d8      	beq.n	8003200 <SX1272OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800324e:	4798      	blx	r3
}
 8003250:	e7d6      	b.n	8003200 <SX1272OnDio0Irq+0x18>
                if( SX1272.Settings.Fsk.CrcOn == true )
 8003252:	1d63      	adds	r3, r4, #5
 8003254:	7fdb      	ldrb	r3, [r3, #31]
 8003256:	4e72      	ldr	r6, [pc, #456]	; (8003420 <SX1272OnDio0Irq+0x238>)
 8003258:	4f70      	ldr	r7, [pc, #448]	; (800341c <SX1272OnDio0Irq+0x234>)
 800325a:	2b00      	cmp	r3, #0
 800325c:	d037      	beq.n	80032ce <SX1272OnDio0Irq+0xe6>
                    irqFlags = SX1272Read( REG_IRQFLAGS2 );
 800325e:	203f      	movs	r0, #63	; 0x3f
 8003260:	f7ff f884 	bl	800236c <SX1272Read>
 8003264:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003266:	782b      	ldrb	r3, [r5, #0]
 8003268:	079b      	lsls	r3, r3, #30
 800326a:	d430      	bmi.n	80032ce <SX1272OnDio0Irq+0xe6>
                        SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800326c:	210b      	movs	r1, #11
 800326e:	203e      	movs	r0, #62	; 0x3e
 8003270:	f7ff f82a 	bl	80022c8 <SX1272Write>
                        SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003274:	2110      	movs	r1, #16
 8003276:	203f      	movs	r0, #63	; 0x3f
 8003278:	f7ff f826 	bl	80022c8 <SX1272Write>
                        TimerStop( &RxTimeoutTimer );
 800327c:	4866      	ldr	r0, [pc, #408]	; (8003418 <SX1272OnDio0Irq+0x230>)
 800327e:	f002 ff75 	bl	800616c <TimerStop>
                        if( SX1272.Settings.Fsk.RxContinuous == false )
 8003282:	1de3      	adds	r3, r4, #7
 8003284:	7fdd      	ldrb	r5, [r3, #31]
 8003286:	2d00      	cmp	r5, #0
 8003288:	d114      	bne.n	80032b4 <SX1272OnDio0Irq+0xcc>
                            TimerStop( &RxTimeoutSyncWord );
 800328a:	0030      	movs	r0, r6
 800328c:	f002 ff6e 	bl	800616c <TimerStop>
                            SX1272.Settings.State = RF_IDLE;
 8003290:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <SX1272OnDio0Irq+0xb8>
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d000      	beq.n	80032a0 <SX1272OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 800329e:	4798      	blx	r3
                        SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 80032a0:	0022      	movs	r2, r4
 80032a2:	2300      	movs	r3, #0
 80032a4:	3230      	adds	r2, #48	; 0x30
 80032a6:	7013      	strb	r3, [r2, #0]
                        SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 80032a8:	0022      	movs	r2, r4
 80032aa:	3231      	adds	r2, #49	; 0x31
 80032ac:	7013      	strb	r3, [r2, #0]
                        SX1272.Settings.FskPacketHandler.NbBytes = 0;
 80032ae:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1272.Settings.FskPacketHandler.Size = 0;
 80032b0:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 80032b2:	e7a5      	b.n	8003200 <SX1272OnDio0Irq+0x18>
                            SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80032b4:	200d      	movs	r0, #13
 80032b6:	f7ff f859 	bl	800236c <SX1272Read>
 80032ba:	2140      	movs	r1, #64	; 0x40
 80032bc:	4301      	orrs	r1, r0
 80032be:	b2c9      	uxtb	r1, r1
 80032c0:	200d      	movs	r0, #13
 80032c2:	f7ff f801 	bl	80022c8 <SX1272Write>
                            TimerStart( &RxTimeoutSyncWord );
 80032c6:	0030      	movs	r0, r6
 80032c8:	f002 fed4 	bl	8006074 <TimerStart>
 80032cc:	e7e1      	b.n	8003292 <SX1272OnDio0Irq+0xaa>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 80032ce:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80032d0:	4d54      	ldr	r5, [pc, #336]	; (8003424 <SX1272OnDio0Irq+0x23c>)
 80032d2:	2900      	cmp	r1, #0
 80032d4:	d131      	bne.n	800333a <SX1272OnDio0Irq+0x152>
 80032d6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d12e      	bne.n	800333a <SX1272OnDio0Irq+0x152>
                    if( SX1272.Settings.Fsk.FixLen == false )
 80032dc:	1ce3      	adds	r3, r4, #3
 80032de:	7fdb      	ldrb	r3, [r3, #31]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d125      	bne.n	8003330 <SX1272OnDio0Irq+0x148>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 80032e4:	3101      	adds	r1, #1
 80032e6:	4850      	ldr	r0, [pc, #320]	; (8003428 <SX1272OnDio0Irq+0x240>)
 80032e8:	f7ff ff76 	bl	80031d8 <SX1272ReadFifo>
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80032ec:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80032ee:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80032f0:	1ac9      	subs	r1, r1, r3
 80032f2:	1d28      	adds	r0, r5, #4
 80032f4:	18c0      	adds	r0, r0, r3
 80032f6:	b2c9      	uxtb	r1, r1
 80032f8:	f7ff ff6e 	bl	80031d8 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80032fc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 80032fe:	4846      	ldr	r0, [pc, #280]	; (8003418 <SX1272OnDio0Irq+0x230>)
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003300:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8003302:	f002 ff33 	bl	800616c <TimerStop>
                if( SX1272.Settings.Fsk.RxContinuous == false )
 8003306:	1de3      	adds	r3, r4, #7
 8003308:	7fdb      	ldrb	r3, [r3, #31]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d117      	bne.n	800333e <SX1272OnDio0Irq+0x156>
                    TimerStop( &RxTimeoutSyncWord );
 800330e:	0030      	movs	r0, r6
                    SX1272.Settings.State = RF_IDLE;
 8003310:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8003312:	f002 ff2b 	bl	800616c <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0c1      	beq.n	80032a0 <SX1272OnDio0Irq+0xb8>
 800331c:	689e      	ldr	r6, [r3, #8]
 800331e:	2e00      	cmp	r6, #0
 8003320:	d0be      	beq.n	80032a0 <SX1272OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.FskPacketHandler.Size, SX1272.Settings.FskPacketHandler.RssiValue, 0 );
 8003322:	2232      	movs	r2, #50	; 0x32
 8003324:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003326:	56a2      	ldrsb	r2, [r4, r2]
 8003328:	1d28      	adds	r0, r5, #4
 800332a:	2300      	movs	r3, #0
 800332c:	47b0      	blx	r6
 800332e:	e7b7      	b.n	80032a0 <SX1272OnDio0Irq+0xb8>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 8003330:	2032      	movs	r0, #50	; 0x32
 8003332:	f7ff f81b 	bl	800236c <SX1272Read>
 8003336:	8760      	strh	r0, [r4, #58]	; 0x3a
 8003338:	e7d8      	b.n	80032ec <SX1272OnDio0Irq+0x104>
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 800333a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800333c:	e7d8      	b.n	80032f0 <SX1272OnDio0Irq+0x108>
                    SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800333e:	200d      	movs	r0, #13
 8003340:	f7ff f814 	bl	800236c <SX1272Read>
 8003344:	2140      	movs	r1, #64	; 0x40
 8003346:	4301      	orrs	r1, r0
 8003348:	b2c9      	uxtb	r1, r1
 800334a:	200d      	movs	r0, #13
 800334c:	f7fe ffbc 	bl	80022c8 <SX1272Write>
                    TimerStart( &RxTimeoutSyncWord );
 8003350:	0030      	movs	r0, r6
 8003352:	f002 fe8f 	bl	8006074 <TimerStart>
 8003356:	e7de      	b.n	8003316 <SX1272OnDio0Irq+0x12e>
                    SX1272.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1272Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8003358:	2019      	movs	r0, #25
 800335a:	f7ff f807 	bl	800236c <SX1272Read>
 800335e:	0027      	movs	r7, r4
 8003360:	b240      	sxtb	r0, r0
 8003362:	3002      	adds	r0, #2
 8003364:	1080      	asrs	r0, r0, #2
 8003366:	3760      	adds	r7, #96	; 0x60
 8003368:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1272Read( REG_LR_PKTRSSIVALUE );
 800336a:	201a      	movs	r0, #26
 800336c:	f7fe fffe 	bl	800236c <SX1272Read>
                    if( SX1272.Settings.LoRaPacketHandler.SnrValue < 0 )
 8003370:	2300      	movs	r3, #0
 8003372:	0021      	movs	r1, r4
 8003374:	56fb      	ldrsb	r3, [r7, r3]
                    int16_t rssi = SX1272Read( REG_LR_PKTRSSIVALUE );
 8003376:	b202      	sxth	r2, r0
 8003378:	1112      	asrs	r2, r2, #4
 800337a:	3162      	adds	r1, #98	; 0x62
                    if( SX1272.Settings.LoRaPacketHandler.SnrValue < 0 )
 800337c:	2b00      	cmp	r3, #0
 800337e:	da33      	bge.n	80033e8 <SX1272OnDio0Irq+0x200>
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 ) +
 8003380:	3b8b      	subs	r3, #139	; 0x8b
 8003382:	181b      	adds	r3, r3, r0
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 );
 8003384:	18d3      	adds	r3, r2, r3
                    SX1272.Settings.LoRaPacketHandler.Size = SX1272Read( REG_LR_RXNBBYTES );
 8003386:	2013      	movs	r0, #19
 8003388:	0027      	movs	r7, r4
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 );
 800338a:	800b      	strh	r3, [r1, #0]
                    SX1272.Settings.LoRaPacketHandler.Size = SX1272Read( REG_LR_RXNBBYTES );
 800338c:	f7fe ffee 	bl	800236c <SX1272Read>
 8003390:	3764      	adds	r7, #100	; 0x64
 8003392:	7038      	strb	r0, [r7, #0]
                    SX1272Write( REG_LR_FIFOADDRPTR, SX1272Read( REG_LR_FIFORXCURRENTADDR ) );
 8003394:	2010      	movs	r0, #16
 8003396:	f7fe ffe9 	bl	800236c <SX1272Read>
 800339a:	0001      	movs	r1, r0
 800339c:	200d      	movs	r0, #13
 800339e:	f7fe ff93 	bl	80022c8 <SX1272Write>
                    SX1272ReadFifo( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size );
 80033a2:	7839      	ldrb	r1, [r7, #0]
 80033a4:	4f1f      	ldr	r7, [pc, #124]	; (8003424 <SX1272OnDio0Irq+0x23c>)
 80033a6:	1d38      	adds	r0, r7, #4
 80033a8:	f7ff ff16 	bl	80031d8 <SX1272ReadFifo>
                    if( SX1272.Settings.LoRa.RxContinuous == false )
 80033ac:	0023      	movs	r3, r4
 80033ae:	3356      	adds	r3, #86	; 0x56
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d100      	bne.n	80033b8 <SX1272OnDio0Irq+0x1d0>
                        SX1272.Settings.State = RF_IDLE;
 80033b6:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80033b8:	0030      	movs	r0, r6
 80033ba:	f002 fed7 	bl	800616c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80033be:	686b      	ldr	r3, [r5, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d100      	bne.n	80033c6 <SX1272OnDio0Irq+0x1de>
 80033c4:	e71c      	b.n	8003200 <SX1272OnDio0Irq+0x18>
 80033c6:	689d      	ldr	r5, [r3, #8]
 80033c8:	2d00      	cmp	r5, #0
 80033ca:	d100      	bne.n	80033ce <SX1272OnDio0Irq+0x1e6>
 80033cc:	e718      	b.n	8003200 <SX1272OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size, SX1272.Settings.LoRaPacketHandler.RssiValue, SX1272.Settings.LoRaPacketHandler.SnrValue );
 80033ce:	0023      	movs	r3, r4
 80033d0:	0022      	movs	r2, r4
 80033d2:	3360      	adds	r3, #96	; 0x60
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	3464      	adds	r4, #100	; 0x64
 80033d8:	3262      	adds	r2, #98	; 0x62
 80033da:	2100      	movs	r1, #0
 80033dc:	5e52      	ldrsh	r2, [r2, r1]
 80033de:	b25b      	sxtb	r3, r3
 80033e0:	7821      	ldrb	r1, [r4, #0]
 80033e2:	1d38      	adds	r0, r7, #4
 80033e4:	47a8      	blx	r5
 80033e6:	e70b      	b.n	8003200 <SX1272OnDio0Irq+0x18>
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 );
 80033e8:	0003      	movs	r3, r0
 80033ea:	3b8b      	subs	r3, #139	; 0x8b
 80033ec:	e7ca      	b.n	8003384 <SX1272OnDio0Irq+0x19c>
            TimerStop( &TxTimeoutTimer );
 80033ee:	480f      	ldr	r0, [pc, #60]	; (800342c <SX1272OnDio0Irq+0x244>)
 80033f0:	f002 febc 	bl	800616c <TimerStop>
            switch( SX1272.Settings.Modem )
 80033f4:	7963      	ldrb	r3, [r4, #5]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d103      	bne.n	8003402 <SX1272OnDio0Irq+0x21a>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 80033fa:	2108      	movs	r1, #8
 80033fc:	2012      	movs	r0, #18
 80033fe:	f7fe ff63 	bl	80022c8 <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 8003402:	2300      	movs	r3, #0
 8003404:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <SX1272OnDio0Irq+0x234>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d100      	bne.n	8003410 <SX1272OnDio0Irq+0x228>
 800340e:	e6f7      	b.n	8003200 <SX1272OnDio0Irq+0x18>
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	e71a      	b.n	800324a <SX1272OnDio0Irq+0x62>
 8003414:	20000544 	.word	0x20000544
 8003418:	200005dc 	.word	0x200005dc
 800341c:	200001b8 	.word	0x200001b8
 8003420:	200005c4 	.word	0x200005c4
 8003424:	200000b8 	.word	0x200000b8
 8003428:	2000057e 	.word	0x2000057e
 800342c:	200005ac 	.word	0x200005ac

08003430 <SX1272OnDio1Irq>:
{
 8003430:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.State )
 8003432:	4c32      	ldr	r4, [pc, #200]	; (80034fc <SX1272OnDio1Irq+0xcc>)
 8003434:	7921      	ldrb	r1, [r4, #4]
 8003436:	2901      	cmp	r1, #1
 8003438:	d002      	beq.n	8003440 <SX1272OnDio1Irq+0x10>
 800343a:	2902      	cmp	r1, #2
 800343c:	d045      	beq.n	80034ca <SX1272OnDio1Irq+0x9a>
}
 800343e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1272.Settings.Modem )
 8003440:	7963      	ldrb	r3, [r4, #5]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d013      	beq.n	800346e <SX1272OnDio1Irq+0x3e>
 8003446:	2b01      	cmp	r3, #1
 8003448:	d1f9      	bne.n	800343e <SX1272OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800344a:	482d      	ldr	r0, [pc, #180]	; (8003500 <SX1272OnDio1Irq+0xd0>)
 800344c:	f002 fe8e 	bl	800616c <TimerStop>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8003450:	2180      	movs	r1, #128	; 0x80
 8003452:	2012      	movs	r0, #18
 8003454:	f7fe ff38 	bl	80022c8 <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 8003458:	2300      	movs	r3, #0
 800345a:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <SX1272OnDio1Irq+0xd4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ec      	beq.n	800343e <SX1272OnDio1Irq+0xe>
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0e9      	beq.n	800343e <SX1272OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800346a:	4798      	blx	r3
 800346c:	e7e7      	b.n	800343e <SX1272OnDio1Irq+0xe>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 800346e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <SX1272OnDio1Irq+0x58>
 8003474:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <SX1272OnDio1Irq+0x58>
                    if( SX1272.Settings.Fsk.FixLen == false )
 800347a:	1ce3      	adds	r3, r4, #3
 800347c:	7fdb      	ldrb	r3, [r3, #31]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d117      	bne.n	80034b2 <SX1272OnDio1Irq+0x82>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 8003482:	4821      	ldr	r0, [pc, #132]	; (8003508 <SX1272OnDio1Irq+0xd8>)
 8003484:	f7ff fea8 	bl	80031d8 <SX1272ReadFifo>
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) >= SX1272.Settings.FskPacketHandler.FifoThresh )
 8003488:	0025      	movs	r5, r4
 800348a:	353e      	adds	r5, #62	; 0x3e
 800348c:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800348e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003490:	7828      	ldrb	r0, [r5, #0]
 8003492:	1a89      	subs	r1, r1, r2
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <SX1272OnDio1Irq+0xdc>)
 8003496:	4281      	cmp	r1, r0
 8003498:	db10      	blt.n	80034bc <SX1272OnDio1Irq+0x8c>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.FifoThresh - 1 );
 800349a:	3801      	subs	r0, #1
 800349c:	b2c1      	uxtb	r1, r0
 800349e:	1d18      	adds	r0, r3, #4
 80034a0:	1880      	adds	r0, r0, r2
 80034a2:	f7ff fe99 	bl	80031d8 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.FifoThresh - 1;
 80034a6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80034a8:	782b      	ldrb	r3, [r5, #0]
 80034aa:	3a01      	subs	r2, #1
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 80034ac:	189b      	adds	r3, r3, r2
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes;
 80034ae:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 80034b0:	e7c5      	b.n	800343e <SX1272OnDio1Irq+0xe>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 80034b2:	2032      	movs	r0, #50	; 0x32
 80034b4:	f7fe ff5a 	bl	800236c <SX1272Read>
 80034b8:	8760      	strh	r0, [r4, #58]	; 0x3a
 80034ba:	e7e5      	b.n	8003488 <SX1272OnDio1Irq+0x58>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80034bc:	1d18      	adds	r0, r3, #4
 80034be:	b2c9      	uxtb	r1, r1
 80034c0:	1880      	adds	r0, r0, r2
 80034c2:	f7ff fe89 	bl	80031d8 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes;
 80034c6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80034c8:	e7f1      	b.n	80034ae <SX1272OnDio1Irq+0x7e>
            switch( SX1272.Settings.Modem )
 80034ca:	7963      	ldrb	r3, [r4, #5]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1b6      	bne.n	800343e <SX1272OnDio1Irq+0xe>
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) > SX1272.Settings.FskPacketHandler.ChunkSize )
 80034d0:	0025      	movs	r5, r4
 80034d2:	353f      	adds	r5, #63	; 0x3f
 80034d4:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80034d6:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
 80034d8:	7829      	ldrb	r1, [r5, #0]
 80034da:	1b92      	subs	r2, r2, r6
 80034dc:	480b      	ldr	r0, [pc, #44]	; (800350c <SX1272OnDio1Irq+0xdc>)
 80034de:	428a      	cmp	r2, r1
 80034e0:	dd06      	ble.n	80034f0 <SX1272OnDio1Irq+0xc0>
                    SX1272WriteFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.ChunkSize );
 80034e2:	3004      	adds	r0, #4
 80034e4:	1980      	adds	r0, r0, r6
 80034e6:	f7ff fdf1 	bl	80030cc <SX1272WriteFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 80034ea:	782b      	ldrb	r3, [r5, #0]
 80034ec:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80034ee:	e7dd      	b.n	80034ac <SX1272OnDio1Irq+0x7c>
                    SX1272WriteFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 80034f0:	3004      	adds	r0, #4
 80034f2:	b2d1      	uxtb	r1, r2
 80034f4:	1980      	adds	r0, r0, r6
 80034f6:	f7ff fde9 	bl	80030cc <SX1272WriteFifo>
 80034fa:	e7e4      	b.n	80034c6 <SX1272OnDio1Irq+0x96>
 80034fc:	20000544 	.word	0x20000544
 8003500:	200005dc 	.word	0x200005dc
 8003504:	200001b8 	.word	0x200001b8
 8003508:	2000057e 	.word	0x2000057e
 800350c:	200000b8 	.word	0x200000b8

08003510 <SX1272SetMaxPayloadLength>:
{
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	0004      	movs	r4, r0
 8003514:	000d      	movs	r5, r1
    SX1272SetModem( modem );
 8003516:	f7ff f99d 	bl	8002854 <SX1272SetModem>
    switch( modem )
 800351a:	2c00      	cmp	r4, #0
 800351c:	d002      	beq.n	8003524 <SX1272SetMaxPayloadLength+0x14>
 800351e:	2c01      	cmp	r4, #1
 8003520:	d00a      	beq.n	8003538 <SX1272SetMaxPayloadLength+0x28>
}
 8003522:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1272.Settings.Fsk.FixLen == false )
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <SX1272SetMaxPayloadLength+0x30>)
 8003526:	3303      	adds	r3, #3
 8003528:	7fdb      	ldrb	r3, [r3, #31]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f9      	bne.n	8003522 <SX1272SetMaxPayloadLength+0x12>
            SX1272Write( REG_PAYLOADLENGTH, max );
 800352e:	0029      	movs	r1, r5
 8003530:	2032      	movs	r0, #50	; 0x32
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003532:	f7fe fec9 	bl	80022c8 <SX1272Write>
}
 8003536:	e7f4      	b.n	8003522 <SX1272SetMaxPayloadLength+0x12>
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003538:	0029      	movs	r1, r5
 800353a:	2023      	movs	r0, #35	; 0x23
 800353c:	e7f9      	b.n	8003532 <SX1272SetMaxPayloadLength+0x22>
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	20000544 	.word	0x20000544

08003544 <SX1272SetPublicNetwork>:
{
 8003544:	b510      	push	{r4, lr}
 8003546:	0004      	movs	r4, r0
    SX1272SetModem( MODEM_LORA );
 8003548:	2001      	movs	r0, #1
 800354a:	f7ff f983 	bl	8002854 <SX1272SetModem>
    SX1272.Settings.LoRa.PublicNetwork = enable;
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <SX1272SetPublicNetwork+0x20>)
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8003550:	2134      	movs	r1, #52	; 0x34
    SX1272.Settings.LoRa.PublicNetwork = enable;
 8003552:	335c      	adds	r3, #92	; 0x5c
 8003554:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8003556:	2c00      	cmp	r4, #0
 8003558:	d100      	bne.n	800355c <SX1272SetPublicNetwork+0x18>
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800355a:	2112      	movs	r1, #18
 800355c:	2039      	movs	r0, #57	; 0x39
 800355e:	f7fe feb3 	bl	80022c8 <SX1272Write>
}
 8003562:	bd10      	pop	{r4, pc}
 8003564:	20000544 	.word	0x20000544

08003568 <SX1272OnTimeoutIrq>:
{
 8003568:	b570      	push	{r4, r5, r6, lr}
    switch( SX1272.Settings.State )
 800356a:	4c2e      	ldr	r4, [pc, #184]	; (8003624 <SX1272OnTimeoutIrq+0xbc>)
 800356c:	7923      	ldrb	r3, [r4, #4]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d002      	beq.n	8003578 <SX1272OnTimeoutIrq+0x10>
 8003572:	2b02      	cmp	r3, #2
 8003574:	d032      	beq.n	80035dc <SX1272OnTimeoutIrq+0x74>
}
 8003576:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1272.Settings.Modem == MODEM_FSK )
 8003578:	7963      	ldrb	r3, [r4, #5]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d120      	bne.n	80035c0 <SX1272OnTimeoutIrq+0x58>
            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 800357e:	0022      	movs	r2, r4
 8003580:	3230      	adds	r2, #48	; 0x30
 8003582:	7013      	strb	r3, [r2, #0]
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8003584:	0022      	movs	r2, r4
            SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003586:	210b      	movs	r1, #11
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8003588:	3231      	adds	r2, #49	; 0x31
            SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800358a:	203e      	movs	r0, #62	; 0x3e
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 800358c:	7013      	strb	r3, [r2, #0]
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 800358e:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1272.Settings.FskPacketHandler.Size = 0;
 8003590:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003592:	f7fe fe99 	bl	80022c8 <SX1272Write>
            SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003596:	2110      	movs	r1, #16
 8003598:	203f      	movs	r0, #63	; 0x3f
 800359a:	f7fe fe95 	bl	80022c8 <SX1272Write>
            if( SX1272.Settings.Fsk.RxContinuous == true )
 800359e:	1de3      	adds	r3, r4, #7
 80035a0:	7fdb      	ldrb	r3, [r3, #31]
 80035a2:	4d21      	ldr	r5, [pc, #132]	; (8003628 <SX1272OnTimeoutIrq+0xc0>)
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d014      	beq.n	80035d2 <SX1272OnTimeoutIrq+0x6a>
                SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80035a8:	200d      	movs	r0, #13
 80035aa:	f7fe fedf 	bl	800236c <SX1272Read>
 80035ae:	2140      	movs	r1, #64	; 0x40
 80035b0:	4301      	orrs	r1, r0
 80035b2:	b2c9      	uxtb	r1, r1
 80035b4:	200d      	movs	r0, #13
 80035b6:	f7fe fe87 	bl	80022c8 <SX1272Write>
                TimerStart( &RxTimeoutSyncWord );
 80035ba:	0028      	movs	r0, r5
 80035bc:	f002 fd5a 	bl	8006074 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <SX1272OnTimeoutIrq+0xc4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0d6      	beq.n	8003576 <SX1272OnTimeoutIrq+0xe>
 80035c8:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0d3      	beq.n	8003576 <SX1272OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 80035ce:	4798      	blx	r3
}
 80035d0:	e7d1      	b.n	8003576 <SX1272OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 80035d2:	0028      	movs	r0, r5
                SX1272.Settings.State = RF_IDLE;
 80035d4:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 80035d6:	f002 fdc9 	bl	800616c <TimerStop>
 80035da:	e7f1      	b.n	80035c0 <SX1272OnTimeoutIrq+0x58>
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 80035dc:	2500      	movs	r5, #0
        SX1272Reset( );
 80035de:	f7fe fe2f 	bl	8002240 <SX1272Reset>
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fe ffde 	bl	80025a4 <SX1272SetOpMode>
            SX1272SetModem( RadioRegsInit[i].Modem );
 80035e8:	4e11      	ldr	r6, [pc, #68]	; (8003630 <SX1272OnTimeoutIrq+0xc8>)
 80035ea:	3648      	adds	r6, #72	; 0x48
 80035ec:	5da8      	ldrb	r0, [r5, r6]
 80035ee:	f7ff f931 	bl	8002854 <SX1272SetModem>
 80035f2:	1973      	adds	r3, r6, r5
            SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80035f4:	7899      	ldrb	r1, [r3, #2]
 80035f6:	7858      	ldrb	r0, [r3, #1]
 80035f8:	3503      	adds	r5, #3
 80035fa:	f7fe fe65 	bl	80022c8 <SX1272Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80035fe:	2d33      	cmp	r5, #51	; 0x33
 8003600:	d1f4      	bne.n	80035ec <SX1272OnTimeoutIrq+0x84>
        SX1272SetModem( MODEM_FSK );
 8003602:	2000      	movs	r0, #0
 8003604:	f7ff f926 	bl	8002854 <SX1272SetModem>
        SX1272SetPublicNetwork( SX1272.Settings.LoRa.PublicNetwork );
 8003608:	0023      	movs	r3, r4
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	7818      	ldrb	r0, [r3, #0]
 800360e:	f7ff ff99 	bl	8003544 <SX1272SetPublicNetwork>
        SX1272.Settings.State = RF_IDLE;
 8003612:	2300      	movs	r3, #0
 8003614:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <SX1272OnTimeoutIrq+0xc4>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0ab      	beq.n	8003576 <SX1272OnTimeoutIrq+0xe>
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	e7d3      	b.n	80035ca <SX1272OnTimeoutIrq+0x62>
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	20000544 	.word	0x20000544
 8003628:	200005c4 	.word	0x200005c4
 800362c:	200001b8 	.word	0x200001b8
 8003630:	08007e28 	.word	0x08007e28

08003634 <SX1272GetWakeupTime>:
    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <SX1272GetWakeupTime+0x10>)
{
 8003636:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1272BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4798      	blx	r3
 800363e:	3002      	adds	r0, #2
}
 8003640:	bd10      	pop	{r4, pc}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	200000b8 	.word	0x200000b8

08003648 <SX1272GetWakeTime>:
};

uint32_t SX1272GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 8003648:	2000      	movs	r0, #0
 800364a:	4770      	bx	lr

0800364c <SX1272SetXO>:

void SX1272SetXO( uint8_t state )
{
}
 800364c:	4770      	bx	lr

0800364e <SX1272SetAntSwLowPower>:
}

void SX1272SetAntSwLowPower( bool status )
{
  //Ant Switch Controlled by SX1272 IC
}
 800364e:	4770      	bx	lr

08003650 <SX1272SetAntSw>:

void SX1272SetAntSw( uint8_t opMode )
{
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <SX1272SetAntSw+0x10>)
    switch( opMode )
    {
    case RFLR_OPMODE_TRANSMITTER:
        SX1272.RxTx = 1;
 8003652:	2201      	movs	r2, #1
    switch( opMode )
 8003654:	2803      	cmp	r0, #3
 8003656:	d000      	beq.n	800365a <SX1272SetAntSw+0xa>
        break;
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
        SX1272.RxTx = 0;
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
        break;
    }
}
 800365c:	4770      	bx	lr
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	20000544 	.word	0x20000544

08003664 <SX1272CheckRfFrequency>:

bool SX1272CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 8003664:	2001      	movs	r0, #1
 8003666:	4770      	bx	lr

08003668 <SX1272SetRfTxPower>:
{
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	0006      	movs	r6, r0
    paConfig = SX1272Read( REG_PACONFIG );
 800366c:	2009      	movs	r0, #9
 800366e:	f7fe fe7d 	bl	800236c <SX1272Read>
 8003672:	0005      	movs	r5, r0
    paDac = SX1272Read( REG_PADAC );
 8003674:	205a      	movs	r0, #90	; 0x5a
 8003676:	f7fe fe79 	bl	800236c <SX1272Read>
 800367a:	1c31      	adds	r1, r6, #0
 800367c:	0004      	movs	r4, r0
 800367e:	2e0e      	cmp	r6, #14
 8003680:	dd00      	ble.n	8003684 <SX1272SetRfTxPower+0x1c>
 8003682:	210e      	movs	r1, #14
        paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 8003684:	060b      	lsls	r3, r1, #24
 8003686:	d501      	bpl.n	800368c <SX1272SetRfTxPower+0x24>
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <SX1272SetRfTxPower+0x40>)
 800368a:	7819      	ldrb	r1, [r3, #0]
 800368c:	2370      	movs	r3, #112	; 0x70
 800368e:	3101      	adds	r1, #1
 8003690:	401d      	ands	r5, r3
 8003692:	4329      	orrs	r1, r5
    SX1272Write( REG_PACONFIG, paConfig );
 8003694:	b2c9      	uxtb	r1, r1
 8003696:	2009      	movs	r0, #9
 8003698:	f7fe fe16 	bl	80022c8 <SX1272Write>
    SX1272Write( REG_PADAC, paDac );
 800369c:	0021      	movs	r1, r4
 800369e:	205a      	movs	r0, #90	; 0x5a
 80036a0:	f7fe fe12 	bl	80022c8 <SX1272Write>
}
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	08007fec 	.word	0x08007fec

080036ac <SX1272IoInit>:
{
 80036ac:	b510      	push	{r4, lr}
 80036ae:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 80036b0:	2214      	movs	r2, #20
 80036b2:	2100      	movs	r1, #0
 80036b4:	a801      	add	r0, sp, #4
 80036b6:	f003 fdca 	bl	800724e <memset>
  SX1272BoardInit( &BoardCallbacks );
 80036ba:	4811      	ldr	r0, [pc, #68]	; (8003700 <SX1272IoInit+0x54>)
 80036bc:	f7fe fdb4 	bl	8002228 <SX1272BoardInit>
  initStruct.Mode = GPIO_MODE_IT_RISING;
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <SX1272IoInit+0x58>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80036c2:	2180      	movs	r1, #128	; 0x80
  initStruct.Mode = GPIO_MODE_IT_RISING;
 80036c4:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80036c6:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Pull = GPIO_PULLDOWN;
 80036c8:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80036ca:	4c0f      	ldr	r4, [pc, #60]	; (8003708 <SX1272IoInit+0x5c>)
  initStruct.Pull = GPIO_PULLDOWN;
 80036cc:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80036ce:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 80036d0:	3301      	adds	r3, #1
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80036d2:	00c9      	lsls	r1, r1, #3
 80036d4:	05c0      	lsls	r0, r0, #23
  initStruct.Speed = GPIO_SPEED_HIGH;
 80036d6:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80036d8:	f002 fe3e 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80036dc:	aa01      	add	r2, sp, #4
 80036de:	0020      	movs	r0, r4
 80036e0:	2108      	movs	r1, #8
 80036e2:	f002 fe39 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80036e6:	aa01      	add	r2, sp, #4
 80036e8:	0020      	movs	r0, r4
 80036ea:	2120      	movs	r1, #32
 80036ec:	f002 fe34 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80036f0:	aa01      	add	r2, sp, #4
 80036f2:	2110      	movs	r1, #16
 80036f4:	0020      	movs	r0, r4
 80036f6:	f002 fe2f 	bl	8006358 <HW_GPIO_Init>
}
 80036fa:	b006      	add	sp, #24
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	20000018 	.word	0x20000018
 8003704:	10110000 	.word	0x10110000
 8003708:	50000400 	.word	0x50000400

0800370c <SX1272IoDeInit>:
{
 800370c:	b510      	push	{r4, lr}
 800370e:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8003710:	2214      	movs	r2, #20
 8003712:	2100      	movs	r1, #0
 8003714:	a801      	add	r0, sp, #4
 8003716:	f003 fd9a 	bl	800724e <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ;//GPIO_MODE_ANALOG;
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <SX1272IoDeInit+0x48>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Mode = GPIO_MODE_IT_RISING ;//GPIO_MODE_ANALOG;
 8003720:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8003722:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8003724:	4c0c      	ldr	r4, [pc, #48]	; (8003758 <SX1272IoDeInit+0x4c>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003726:	aa01      	add	r2, sp, #4
 8003728:	00c9      	lsls	r1, r1, #3
 800372a:	05c0      	lsls	r0, r0, #23
  initStruct.Pull = GPIO_PULLDOWN;
 800372c:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800372e:	f002 fe13 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8003732:	aa01      	add	r2, sp, #4
 8003734:	0020      	movs	r0, r4
 8003736:	2108      	movs	r1, #8
 8003738:	f002 fe0e 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 800373c:	aa01      	add	r2, sp, #4
 800373e:	0020      	movs	r0, r4
 8003740:	2120      	movs	r1, #32
 8003742:	f002 fe09 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8003746:	aa01      	add	r2, sp, #4
 8003748:	2110      	movs	r1, #16
 800374a:	0020      	movs	r0, r4
 800374c:	f002 fe04 	bl	8006358 <HW_GPIO_Init>
}
 8003750:	b006      	add	sp, #24
 8003752:	bd10      	pop	{r4, pc}
 8003754:	10110000 	.word	0x10110000
 8003758:	50000400 	.word	0x50000400

0800375c <SX1272IoIrqInit>:
{
 800375c:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800375e:	6803      	ldr	r3, [r0, #0]
{
 8003760:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8003762:	2180      	movs	r1, #128	; 0x80
 8003764:	20a0      	movs	r0, #160	; 0xa0
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8003766:	4d0c      	ldr	r5, [pc, #48]	; (8003798 <SX1272IoIrqInit+0x3c>)
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8003768:	2200      	movs	r2, #0
 800376a:	00c9      	lsls	r1, r1, #3
 800376c:	05c0      	lsls	r0, r0, #23
 800376e:	f002 fe3f 	bl	80063f0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8003772:	0028      	movs	r0, r5
 8003774:	6863      	ldr	r3, [r4, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	2108      	movs	r1, #8
 800377a:	f002 fe39 	bl	80063f0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800377e:	0028      	movs	r0, r5
 8003780:	68a3      	ldr	r3, [r4, #8]
 8003782:	2200      	movs	r2, #0
 8003784:	2120      	movs	r1, #32
 8003786:	f002 fe33 	bl	80063f0 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800378a:	0028      	movs	r0, r5
 800378c:	68e3      	ldr	r3, [r4, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	2110      	movs	r1, #16
 8003792:	f002 fe2d 	bl	80063f0 <HW_GPIO_SetIrq>
}
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	50000400 	.word	0x50000400

0800379c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <SystemInit+0x44>)
 80037a0:	0052      	lsls	r2, r2, #1
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	490e      	ldr	r1, [pc, #56]	; (80037e4 <SystemInit+0x48>)
 80037ac:	400a      	ands	r2, r1
 80037ae:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	490d      	ldr	r1, [pc, #52]	; (80037e8 <SystemInit+0x4c>)
 80037b4:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80037b6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80037b8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	438a      	bics	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	490a      	ldr	r1, [pc, #40]	; (80037ec <SystemInit+0x50>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	4909      	ldr	r1, [pc, #36]	; (80037f0 <SystemInit+0x54>)
 80037cc:	400a      	ands	r2, r1
 80037ce:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80037d0:	2200      	movs	r2, #0
 80037d2:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <SystemInit+0x58>)
 80037d8:	0512      	lsls	r2, r2, #20
 80037da:	609a      	str	r2, [r3, #8]
#endif
}
 80037dc:	4770      	bx	lr
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	40021000 	.word	0x40021000
 80037e4:	88ff400c 	.word	0x88ff400c
 80037e8:	fef6fff6 	.word	0xfef6fff6
 80037ec:	fffbffff 	.word	0xfffbffff
 80037f0:	ff02ffff 	.word	0xff02ffff
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f8:	2302      	movs	r3, #2
 80037fa:	4a06      	ldr	r2, [pc, #24]	; (8003814 <HAL_Init+0x1c>)
{
 80037fc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037fe:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003800:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003802:	430b      	orrs	r3, r1
 8003804:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8003806:	f003 fa43 	bl	8006c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800380a:	f003 fa49 	bl	8006ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800380e:	2000      	movs	r0, #0
 8003810:	bd10      	pop	{r4, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	40022000 	.word	0x40022000

08003818 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003818:	4a02      	ldr	r2, [pc, #8]	; (8003824 <HAL_IncTick+0xc>)
 800381a:	6813      	ldr	r3, [r2, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	4770      	bx	lr
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	200005f4 	.word	0x200005f4

08003828 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <HAL_GetTick+0x8>)
 800382a:	6818      	ldr	r0, [r3, #0]
}
 800382c:	4770      	bx	lr
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	200005f4 	.word	0x200005f4

08003834 <HAL_ADC_MspInit>:
 8003834:	4770      	bx	lr
	...

08003838 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	0004      	movs	r4, r0
 
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 800383c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800383e:	2c00      	cmp	r4, #0
 8003840:	d019      	beq.n	8003876 <HAL_ADC_Init+0x3e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003842:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003848:	0022      	movs	r2, r4
 800384a:	3254      	adds	r2, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800384c:	65e3      	str	r3, [r4, #92]	; 0x5c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800384e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003850:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8003852:	f7ff ffef 	bl	8003834 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003858:	06db      	lsls	r3, r3, #27
 800385a:	d404      	bmi.n	8003866 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800385c:	2204      	movs	r2, #4
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	6898      	ldr	r0, [r3, #8]
 8003862:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003864:	d008      	beq.n	8003878 <HAL_ADC_Init+0x40>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003866:	2310      	movs	r3, #16
 8003868:	6da2      	ldr	r2, [r4, #88]	; 0x58
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    return HAL_ERROR;
 800386a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386c:	4313      	orrs	r3, r2
 800386e:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 8003870:	2300      	movs	r3, #0
 8003872:	3454      	adds	r4, #84	; 0x54
 8003874:	7023      	strb	r3, [r4, #0]
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
}
 8003876:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8003878:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800387a:	4953      	ldr	r1, [pc, #332]	; (80039c8 <HAL_ADC_Init+0x190>)
 800387c:	4011      	ands	r1, r2
 800387e:	2202      	movs	r2, #2
 8003880:	430a      	orrs	r2, r1
 8003882:	65a2      	str	r2, [r4, #88]	; 0x58
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003884:	2203      	movs	r2, #3
 8003886:	6899      	ldr	r1, [r3, #8]
 8003888:	4011      	ands	r1, r2
 800388a:	4a50      	ldr	r2, [pc, #320]	; (80039cc <HAL_ADC_Init+0x194>)
 800388c:	2901      	cmp	r1, #1
 800388e:	d102      	bne.n	8003896 <HAL_ADC_Init+0x5e>
 8003890:	681d      	ldr	r5, [r3, #0]
 8003892:	420d      	tst	r5, r1
 8003894:	d119      	bne.n	80038ca <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003896:	2680      	movs	r6, #128	; 0x80
 8003898:	6865      	ldr	r5, [r4, #4]
 800389a:	05f6      	lsls	r6, r6, #23
 800389c:	0069      	lsls	r1, r5, #1
 800389e:	0849      	lsrs	r1, r1, #1
 80038a0:	42b1      	cmp	r1, r6
 80038a2:	d003      	beq.n	80038ac <HAL_ADC_Init+0x74>
 80038a4:	2180      	movs	r1, #128	; 0x80
 80038a6:	0609      	lsls	r1, r1, #24
 80038a8:	428d      	cmp	r5, r1
 80038aa:	d172      	bne.n	8003992 <HAL_ADC_Init+0x15a>
 80038ac:	6919      	ldr	r1, [r3, #16]
 80038ae:	0089      	lsls	r1, r1, #2
 80038b0:	0889      	lsrs	r1, r1, #2
 80038b2:	6119      	str	r1, [r3, #16]
 80038b4:	6919      	ldr	r1, [r3, #16]
 80038b6:	430d      	orrs	r5, r1
 80038b8:	611d      	str	r5, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80038ba:	2518      	movs	r5, #24
 80038bc:	68d9      	ldr	r1, [r3, #12]
 80038be:	43a9      	bics	r1, r5
 80038c0:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80038c2:	68d9      	ldr	r1, [r3, #12]
 80038c4:	68a5      	ldr	r5, [r4, #8]
 80038c6:	4329      	orrs	r1, r5
 80038c8:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80038ca:	6811      	ldr	r1, [r2, #0]
 80038cc:	4d40      	ldr	r5, [pc, #256]	; (80039d0 <HAL_ADC_Init+0x198>)
 80038ce:	4029      	ands	r1, r5
 80038d0:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80038d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80038d4:	6815      	ldr	r5, [r2, #0]
 80038d6:	0649      	lsls	r1, r1, #25
 80038d8:	4329      	orrs	r1, r5
 80038da:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80038dc:	2280      	movs	r2, #128	; 0x80
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	0552      	lsls	r2, r2, #21
 80038e2:	4211      	tst	r1, r2
 80038e4:	d102      	bne.n	80038ec <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80038e6:	6899      	ldr	r1, [r3, #8]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	4939      	ldr	r1, [pc, #228]	; (80039d4 <HAL_ADC_Init+0x19c>)
 80038f0:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80038f2:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80038f4:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80038f6:	68dd      	ldr	r5, [r3, #12]
 80038f8:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80038fa:	2902      	cmp	r1, #2
 80038fc:	d100      	bne.n	8003900 <HAL_ADC_Init+0xc8>
 80038fe:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003900:	6b66      	ldr	r6, [r4, #52]	; 0x34
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8003902:	6a21      	ldr	r1, [r4, #32]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003904:	4332      	orrs	r2, r6
 8003906:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8003908:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800390a:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 800390c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800390e:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003910:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003912:	69a5      	ldr	r5, [r4, #24]
 8003914:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003916:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003918:	69e5      	ldr	r5, [r4, #28]
 800391a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800391c:	432a      	orrs	r2, r5
 800391e:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003920:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003922:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003924:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003926:	30ff      	adds	r0, #255	; 0xff
 8003928:	4282      	cmp	r2, r0
 800392a:	d004      	beq.n	8003936 <HAL_ADC_Init+0xfe>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800392c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800392e:	68d8      	ldr	r0, [r3, #12]
 8003930:	432a      	orrs	r2, r5
 8003932:	4302      	orrs	r2, r0
 8003934:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003936:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003938:	2a01      	cmp	r2, #1
 800393a:	d106      	bne.n	800394a <HAL_ADC_Init+0x112>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800393c:	2900      	cmp	r1, #0
 800393e:	d134      	bne.n	80039aa <HAL_ADC_Init+0x172>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	68d9      	ldr	r1, [r3, #12]
 8003944:	0252      	lsls	r2, r2, #9
 8003946:	430a      	orrs	r2, r1
 8003948:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800394a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800394c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800394e:	2901      	cmp	r1, #1
 8003950:	d133      	bne.n	80039ba <HAL_ADC_Init+0x182>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003952:	4821      	ldr	r0, [pc, #132]	; (80039d8 <HAL_ADC_Init+0x1a0>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003954:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003956:	4002      	ands	r2, r0
 8003958:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800395a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800395c:	6918      	ldr	r0, [r3, #16]
 800395e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8003960:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003962:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003964:	4302      	orrs	r2, r0
 8003966:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	4311      	orrs	r1, r2
 800396c:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800396e:	2107      	movs	r1, #7
 8003970:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8003972:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003974:	438a      	bics	r2, r1
 8003976:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800397c:	430a      	orrs	r2, r1
 800397e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8003980:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8003982:	65e0      	str	r0, [r4, #92]	; 0x5c
  ADC_STATE_CLR_SET(hadc->State,
 8003984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003986:	4393      	bics	r3, r2
 8003988:	001a      	movs	r2, r3
 800398a:	2301      	movs	r3, #1
 800398c:	4313      	orrs	r3, r2
 800398e:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8003990:	e771      	b.n	8003876 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003992:	6919      	ldr	r1, [r3, #16]
 8003994:	4e11      	ldr	r6, [pc, #68]	; (80039dc <HAL_ADC_Init+0x1a4>)
 8003996:	0089      	lsls	r1, r1, #2
 8003998:	0889      	lsrs	r1, r1, #2
 800399a:	6119      	str	r1, [r3, #16]
 800399c:	6811      	ldr	r1, [r2, #0]
 800399e:	4031      	ands	r1, r6
 80039a0:	6011      	str	r1, [r2, #0]
 80039a2:	6811      	ldr	r1, [r2, #0]
 80039a4:	430d      	orrs	r5, r1
 80039a6:	6015      	str	r5, [r2, #0]
 80039a8:	e787      	b.n	80038ba <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039aa:	2120      	movs	r1, #32
 80039ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ae:	4301      	orrs	r1, r0
 80039b0:	65a1      	str	r1, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80039b4:	430a      	orrs	r2, r1
 80039b6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80039b8:	e7c7      	b.n	800394a <HAL_ADC_Init+0x112>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80039ba:	2101      	movs	r1, #1
 80039bc:	420a      	tst	r2, r1
 80039be:	d0d6      	beq.n	800396e <HAL_ADC_Init+0x136>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	438a      	bics	r2, r1
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	e7d2      	b.n	800396e <HAL_ADC_Init+0x136>
 80039c8:	fffffefd 	.word	0xfffffefd
 80039cc:	40012708 	.word	0x40012708
 80039d0:	fdffffff 	.word	0xfdffffff
 80039d4:	fffe0219 	.word	0xfffe0219
 80039d8:	fffffc03 	.word	0xfffffc03
 80039dc:	ffc3ffff 	.word	0xffc3ffff

080039e0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80039e4:	2800      	cmp	r0, #0
 80039e6:	db12      	blt.n	8003a0e <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039e8:	0883      	lsrs	r3, r0, #2
 80039ea:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <HAL_NVIC_SetPriority+0x58>)
 80039ec:	2403      	movs	r4, #3
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	189b      	adds	r3, r3, r2
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	4020      	ands	r0, r4
 80039f6:	40a0      	lsls	r0, r4
 80039f8:	0014      	movs	r4, r2
 80039fa:	25c0      	movs	r5, #192	; 0xc0
 80039fc:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039fe:	4011      	ands	r1, r2
 8003a00:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a02:	00ad      	lsls	r5, r5, #2
 8003a04:	595e      	ldr	r6, [r3, r5]
 8003a06:	43a6      	bics	r6, r4
 8003a08:	4331      	orrs	r1, r6
 8003a0a:	5159      	str	r1, [r3, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a0e:	2403      	movs	r4, #3
 8003a10:	230f      	movs	r3, #15
 8003a12:	b2c0      	uxtb	r0, r0
 8003a14:	4003      	ands	r3, r0
 8003a16:	4020      	ands	r0, r4
 8003a18:	40a0      	lsls	r0, r4
 8003a1a:	34fc      	adds	r4, #252	; 0xfc
 8003a1c:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a1e:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a20:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a22:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a24:	3b08      	subs	r3, #8
 8003a26:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <HAL_NVIC_SetPriority+0x5c>)
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	189b      	adds	r3, r3, r2
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	43aa      	bics	r2, r5
 8003a32:	4311      	orrs	r1, r2
 8003a34:	61d9      	str	r1, [r3, #28]
 8003a36:	e7e9      	b.n	8003a0c <HAL_NVIC_SetPriority+0x2c>
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a40:	2800      	cmp	r0, #0
 8003a42:	db05      	blt.n	8003a50 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a44:	231f      	movs	r3, #31
 8003a46:	4018      	ands	r0, r3
 8003a48:	3b1e      	subs	r3, #30
 8003a4a:	4083      	lsls	r3, r0
 8003a4c:	4a01      	ldr	r2, [pc, #4]	; (8003a54 <HAL_NVIC_EnableIRQ+0x14>)
 8003a4e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	e000e100 	.word	0xe000e100

08003a58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003a58:	0003      	movs	r3, r0
 8003a5a:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003a5c:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02a      	beq.n	8003ab8 <HAL_DMA_Init+0x60>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8003a62:	1d98      	adds	r0, r3, #6
 8003a64:	7fc2      	ldrb	r2, [r0, #31]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	2a00      	cmp	r2, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_DMA_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8003a6c:	1d59      	adds	r1, r3, #5
 8003a6e:	77ca      	strb	r2, [r1, #31]
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a70:	2202      	movs	r2, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a72:	6819      	ldr	r1, [r3, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a74:	77c2      	strb	r2, [r0, #31]
  tmp = hdma->Instance->CCR;
 8003a76:	680c      	ldr	r4, [r1, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a78:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <HAL_DMA_Init+0xf4>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a7a:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a7c:	4014      	ands	r4, r2
  tmp |=  hdma->Init.Direction        |
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a82:	691d      	ldr	r5, [r3, #16]
 8003a84:	432a      	orrs	r2, r5
 8003a86:	695d      	ldr	r5, [r3, #20]
 8003a88:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8a:	699d      	ldr	r5, [r3, #24]
 8003a8c:	432a      	orrs	r2, r5
 8003a8e:	69dd      	ldr	r5, [r3, #28]
 8003a90:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a92:	6a1d      	ldr	r5, [r3, #32]
 8003a94:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 8003a96:	4322      	orrs	r2, r4

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003a98:	600a      	str	r2, [r1, #0]
  
  /* Write to DMA channel selection register */
  if (hdma->Instance == DMA1_Channel1)
 8003a9a:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_DMA_Init+0xf8>)
 8003a9c:	4291      	cmp	r1, r2
 8003a9e:	d10c      	bne.n	8003aba <HAL_DMA_Init+0x62>
  {
    /*Reset request selection for DMA1 Channel1*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8003aa0:	240f      	movs	r4, #15
 8003aa2:	4a2c      	ldr	r2, [pc, #176]	; (8003b54 <HAL_DMA_Init+0xfc>)
 8003aa4:	6811      	ldr	r1, [r2, #0]
 8003aa6:	43a1      	bics	r1, r4
 8003aa8:	6011      	str	r1, [r2, #0]
    
    /* Configure request selection for DMA1 Channel1 */
    DMA1_CSELR->CSELR |= hdma->Init.Request;
 8003aaa:	6811      	ldr	r1, [r2, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
  {
    /*Reset request selection for DMA1 Channel7*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
    
    /* Configure request selection for DMA1 Channel7 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	6013      	str	r3, [r2, #0]
  }
#endif   
  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	77c3      	strb	r3, [r0, #31]
  
  return HAL_OK;
 8003ab6:	2000      	movs	r0, #0
}  
 8003ab8:	bd30      	pop	{r4, r5, pc}
  else if (hdma->Instance == DMA1_Channel2)
 8003aba:	4a27      	ldr	r2, [pc, #156]	; (8003b58 <HAL_DMA_Init+0x100>)
 8003abc:	4291      	cmp	r1, r2
 8003abe:	d108      	bne.n	8003ad2 <HAL_DMA_Init+0x7a>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C2S;
 8003ac0:	24f0      	movs	r4, #240	; 0xf0
 8003ac2:	4a24      	ldr	r2, [pc, #144]	; (8003b54 <HAL_DMA_Init+0xfc>)
 8003ac4:	6811      	ldr	r1, [r2, #0]
 8003ac6:	43a1      	bics	r1, r4
 8003ac8:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << 4U);
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	6811      	ldr	r1, [r2, #0]
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	e7ed      	b.n	8003aae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel3)
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_DMA_Init+0x104>)
 8003ad4:	4291      	cmp	r1, r2
 8003ad6:	d108      	bne.n	8003aea <HAL_DMA_Init+0x92>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C3S;
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_DMA_Init+0xfc>)
 8003ada:	4c21      	ldr	r4, [pc, #132]	; (8003b60 <HAL_DMA_Init+0x108>)
 8003adc:	6811      	ldr	r1, [r2, #0]
 8003ade:	4021      	ands	r1, r4
 8003ae0:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 8U);
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	6811      	ldr	r1, [r2, #0]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	e7e1      	b.n	8003aae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel4)
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_DMA_Init+0x10c>)
 8003aec:	4291      	cmp	r1, r2
 8003aee:	d108      	bne.n	8003b02 <HAL_DMA_Init+0xaa>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C4S;
 8003af0:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_DMA_Init+0xfc>)
 8003af2:	4c1d      	ldr	r4, [pc, #116]	; (8003b68 <HAL_DMA_Init+0x110>)
 8003af4:	6811      	ldr	r1, [r2, #0]
 8003af6:	4021      	ands	r1, r4
 8003af8:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 12U);
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	6811      	ldr	r1, [r2, #0]
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	e7d5      	b.n	8003aae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel5)
 8003b02:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <HAL_DMA_Init+0x114>)
 8003b04:	4291      	cmp	r1, r2
 8003b06:	d108      	bne.n	8003b1a <HAL_DMA_Init+0xc2>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C5S;
 8003b08:	4a12      	ldr	r2, [pc, #72]	; (8003b54 <HAL_DMA_Init+0xfc>)
 8003b0a:	4c19      	ldr	r4, [pc, #100]	; (8003b70 <HAL_DMA_Init+0x118>)
 8003b0c:	6811      	ldr	r1, [r2, #0]
 8003b0e:	4021      	ands	r1, r4
 8003b10:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 16U);
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	6811      	ldr	r1, [r2, #0]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	e7c9      	b.n	8003aae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel6)
 8003b1a:	4a16      	ldr	r2, [pc, #88]	; (8003b74 <HAL_DMA_Init+0x11c>)
 8003b1c:	4291      	cmp	r1, r2
 8003b1e:	d108      	bne.n	8003b32 <HAL_DMA_Init+0xda>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C6S;
 8003b20:	4a0c      	ldr	r2, [pc, #48]	; (8003b54 <HAL_DMA_Init+0xfc>)
 8003b22:	4c15      	ldr	r4, [pc, #84]	; (8003b78 <HAL_DMA_Init+0x120>)
 8003b24:	6811      	ldr	r1, [r2, #0]
 8003b26:	4021      	ands	r1, r4
 8003b28:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 20U);
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	6811      	ldr	r1, [r2, #0]
 8003b2e:	051b      	lsls	r3, r3, #20
 8003b30:	e7bd      	b.n	8003aae <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel7)
 8003b32:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <HAL_DMA_Init+0x124>)
 8003b34:	4291      	cmp	r1, r2
 8003b36:	d1bc      	bne.n	8003ab2 <HAL_DMA_Init+0x5a>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
 8003b38:	4a06      	ldr	r2, [pc, #24]	; (8003b54 <HAL_DMA_Init+0xfc>)
 8003b3a:	4c11      	ldr	r4, [pc, #68]	; (8003b80 <HAL_DMA_Init+0x128>)
 8003b3c:	6811      	ldr	r1, [r2, #0]
 8003b3e:	4021      	ands	r1, r4
 8003b40:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	6811      	ldr	r1, [r2, #0]
 8003b46:	061b      	lsls	r3, r3, #24
 8003b48:	e7b1      	b.n	8003aae <HAL_DMA_Init+0x56>
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	ffffc00f 	.word	0xffffc00f
 8003b50:	40020008 	.word	0x40020008
 8003b54:	400200a8 	.word	0x400200a8
 8003b58:	4002001c 	.word	0x4002001c
 8003b5c:	40020030 	.word	0x40020030
 8003b60:	fffff0ff 	.word	0xfffff0ff
 8003b64:	40020044 	.word	0x40020044
 8003b68:	ffff0fff 	.word	0xffff0fff
 8003b6c:	40020058 	.word	0x40020058
 8003b70:	fff0ffff 	.word	0xfff0ffff
 8003b74:	4002006c 	.word	0x4002006c
 8003b78:	ff0fffff 	.word	0xff0fffff
 8003b7c:	40020080 	.word	0x40020080
 8003b80:	f0ffffff 	.word	0xf0ffffff

08003b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	2502      	movs	r5, #2
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b88:	1d47      	adds	r7, r0, #5
 8003b8a:	7ffe      	ldrb	r6, [r7, #31]
 8003b8c:	002c      	movs	r4, r5
 8003b8e:	2e01      	cmp	r6, #1
 8003b90:	d01e      	beq.n	8003bd0 <HAL_DMA_Start_IT+0x4c>
 8003b92:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8003b94:	1d84      	adds	r4, r0, #6
  __HAL_LOCK(hdma);
 8003b96:	77fe      	strb	r6, [r7, #31]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8003b98:	77e5      	strb	r5, [r4, #31]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b9a:	6804      	ldr	r4, [r0, #0]
 8003b9c:	6825      	ldr	r5, [r4, #0]
 8003b9e:	43b5      	bics	r5, r6
 8003ba0:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ba2:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ba4:	6883      	ldr	r3, [r0, #8]
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d114      	bne.n	8003bd4 <HAL_DMA_Start_IT+0x50>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003baa:	60a2      	str	r2, [r4, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bac:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8003bae:	2302      	movs	r3, #2
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	6822      	ldr	r2, [r4, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	6822      	ldr	r2, [r4, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	6822      	ldr	r2, [r4, #0]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	6023      	str	r3, [r4, #0]
  return HAL_OK;    
 8003bce:	2400      	movs	r4, #0
} 
 8003bd0:	0020      	movs	r0, r4
 8003bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003bd4:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003bd6:	60e2      	str	r2, [r4, #12]
 8003bd8:	e7e9      	b.n	8003bae <HAL_DMA_Start_IT+0x2a>
	...

08003bdc <HAL_DMA_Abort_IT>:
{  
 8003bdc:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bde:	1d84      	adds	r4, r0, #6
 8003be0:	7fe3      	ldrb	r3, [r4, #31]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be6:	2304      	movs	r3, #4
 8003be8:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003bea:	3b03      	subs	r3, #3
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf0:	210e      	movs	r1, #14
 8003bf2:	6802      	ldr	r2, [r0, #0]
 8003bf4:	6813      	ldr	r3, [r2, #0]
 8003bf6:	438b      	bics	r3, r1
 8003bf8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	6811      	ldr	r1, [r2, #0]
 8003bfe:	4399      	bics	r1, r3
 8003c00:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c02:	4917      	ldr	r1, [pc, #92]	; (8003c60 <HAL_DMA_Abort_IT+0x84>)
 8003c04:	428a      	cmp	r2, r1
 8003c06:	d011      	beq.n	8003c2c <HAL_DMA_Abort_IT+0x50>
 8003c08:	4916      	ldr	r1, [pc, #88]	; (8003c64 <HAL_DMA_Abort_IT+0x88>)
 8003c0a:	330f      	adds	r3, #15
 8003c0c:	428a      	cmp	r2, r1
 8003c0e:	d00d      	beq.n	8003c2c <HAL_DMA_Abort_IT+0x50>
 8003c10:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <HAL_DMA_Abort_IT+0x8c>)
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d018      	beq.n	8003c48 <HAL_DMA_Abort_IT+0x6c>
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_DMA_Abort_IT+0x90>)
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d018      	beq.n	8003c4e <HAL_DMA_Abort_IT+0x72>
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <HAL_DMA_Abort_IT+0x94>)
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d018      	beq.n	8003c54 <HAL_DMA_Abort_IT+0x78>
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <HAL_DMA_Abort_IT+0x98>)
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d018      	beq.n	8003c5a <HAL_DMA_Abort_IT+0x7e>
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	045b      	lsls	r3, r3, #17
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <HAL_DMA_Abort_IT+0x9c>)
 8003c2e:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003c30:	2301      	movs	r3, #1
 8003c32:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003c34:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8003c36:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003c38:	1d43      	adds	r3, r0, #5
 8003c3a:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003c3e:	42a2      	cmp	r2, r4
 8003c40:	d0d4      	beq.n	8003bec <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003c42:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	0023      	movs	r3, r4
 8003c46:	e7d1      	b.n	8003bec <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	e7ee      	b.n	8003c2c <HAL_DMA_Abort_IT+0x50>
 8003c4e:	2380      	movs	r3, #128	; 0x80
 8003c50:	015b      	lsls	r3, r3, #5
 8003c52:	e7eb      	b.n	8003c2c <HAL_DMA_Abort_IT+0x50>
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	025b      	lsls	r3, r3, #9
 8003c58:	e7e8      	b.n	8003c2c <HAL_DMA_Abort_IT+0x50>
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	035b      	lsls	r3, r3, #13
 8003c5e:	e7e5      	b.n	8003c2c <HAL_DMA_Abort_IT+0x50>
 8003c60:	40020008 	.word	0x40020008
 8003c64:	4002001c 	.word	0x4002001c
 8003c68:	40020030 	.word	0x40020030
 8003c6c:	40020044 	.word	0x40020044
 8003c70:	40020058 	.word	0x40020058
 8003c74:	4002006c 	.word	0x4002006c
 8003c78:	40020000 	.word	0x40020000

08003c7c <HAL_DMA_IRQHandler>:
{        
 8003c7c:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8003c7e:	6803      	ldr	r3, [r0, #0]
 8003c80:	4d5b      	ldr	r5, [pc, #364]	; (8003df0 <HAL_DMA_IRQHandler+0x174>)
 8003c82:	4e5c      	ldr	r6, [pc, #368]	; (8003df4 <HAL_DMA_IRQHandler+0x178>)
{        
 8003c84:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8003c86:	6829      	ldr	r1, [r5, #0]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	42b3      	cmp	r3, r6
 8003c8c:	d015      	beq.n	8003cba <HAL_DMA_IRQHandler+0x3e>
 8003c8e:	485a      	ldr	r0, [pc, #360]	; (8003df8 <HAL_DMA_IRQHandler+0x17c>)
 8003c90:	3278      	adds	r2, #120	; 0x78
 8003c92:	4283      	cmp	r3, r0
 8003c94:	d011      	beq.n	8003cba <HAL_DMA_IRQHandler+0x3e>
 8003c96:	4a59      	ldr	r2, [pc, #356]	; (8003dfc <HAL_DMA_IRQHandler+0x180>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <HAL_DMA_IRQHandler+0x22>
 8003c9c:	e084      	b.n	8003da8 <HAL_DMA_IRQHandler+0x12c>
 8003c9e:	4a58      	ldr	r2, [pc, #352]	; (8003e00 <HAL_DMA_IRQHandler+0x184>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d100      	bne.n	8003ca6 <HAL_DMA_IRQHandler+0x2a>
 8003ca4:	e083      	b.n	8003dae <HAL_DMA_IRQHandler+0x132>
 8003ca6:	4a57      	ldr	r2, [pc, #348]	; (8003e04 <HAL_DMA_IRQHandler+0x188>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d100      	bne.n	8003cae <HAL_DMA_IRQHandler+0x32>
 8003cac:	e082      	b.n	8003db4 <HAL_DMA_IRQHandler+0x138>
 8003cae:	4a56      	ldr	r2, [pc, #344]	; (8003e08 <HAL_DMA_IRQHandler+0x18c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0x3a>
 8003cb4:	e081      	b.n	8003dba <HAL_DMA_IRQHandler+0x13e>
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	0512      	lsls	r2, r2, #20
 8003cba:	4211      	tst	r1, r2
 8003cbc:	d016      	beq.n	8003cec <HAL_DMA_IRQHandler+0x70>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cbe:	2008      	movs	r0, #8
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	4201      	tst	r1, r0
 8003cc4:	d012      	beq.n	8003cec <HAL_DMA_IRQHandler+0x70>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	4381      	bics	r1, r0
 8003cca:	6019      	str	r1, [r3, #0]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ccc:	2301      	movs	r3, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8003cce:	606a      	str	r2, [r5, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003cd2:	4313      	orrs	r3, r2
      hdma->State = HAL_DMA_STATE_ERROR;    
 8003cd4:	2204      	movs	r2, #4
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma->State = HAL_DMA_STATE_ERROR;    
 8003cd8:	1da3      	adds	r3, r4, #6
 8003cda:	77da      	strb	r2, [r3, #31]
      __HAL_UNLOCK(hdma); 
 8003cdc:	2200      	movs	r2, #0
 8003cde:	1d63      	adds	r3, r4, #5
 8003ce0:	77da      	strb	r2, [r3, #31]
      if (hdma->XferErrorCallback != NULL)
 8003ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d001      	beq.n	8003cec <HAL_DMA_IRQHandler+0x70>
        hdma->XferErrorCallback(hdma);
 8003ce8:	0020      	movs	r0, r4
 8003cea:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	6829      	ldr	r1, [r5, #0]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	42b3      	cmp	r3, r6
 8003cf4:	d011      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x9e>
 8003cf6:	4840      	ldr	r0, [pc, #256]	; (8003df8 <HAL_DMA_IRQHandler+0x17c>)
 8003cf8:	323c      	adds	r2, #60	; 0x3c
 8003cfa:	4283      	cmp	r3, r0
 8003cfc:	d00d      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x9e>
 8003cfe:	4a3f      	ldr	r2, [pc, #252]	; (8003dfc <HAL_DMA_IRQHandler+0x180>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d05d      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x144>
 8003d04:	4a3e      	ldr	r2, [pc, #248]	; (8003e00 <HAL_DMA_IRQHandler+0x184>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d05d      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x14a>
 8003d0a:	4a3e      	ldr	r2, [pc, #248]	; (8003e04 <HAL_DMA_IRQHandler+0x188>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d05d      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x150>
 8003d10:	4a3d      	ldr	r2, [pc, #244]	; (8003e08 <HAL_DMA_IRQHandler+0x18c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d05d      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x156>
 8003d16:	2280      	movs	r2, #128	; 0x80
 8003d18:	04d2      	lsls	r2, r2, #19
 8003d1a:	4211      	tst	r1, r2
 8003d1c:	d012      	beq.n	8003d44 <HAL_DMA_IRQHandler+0xc8>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d1e:	2004      	movs	r0, #4
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	4201      	tst	r1, r0
 8003d24:	d00e      	beq.n	8003d44 <HAL_DMA_IRQHandler+0xc8>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d26:	6819      	ldr	r1, [r3, #0]
 8003d28:	0689      	lsls	r1, r1, #26
 8003d2a:	d402      	bmi.n	8003d32 <HAL_DMA_IRQHandler+0xb6>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d2c:	6819      	ldr	r1, [r3, #0]
 8003d2e:	4381      	bics	r1, r0
 8003d30:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d32:	606a      	str	r2, [r5, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8003d34:	2205      	movs	r2, #5
 8003d36:	1da3      	adds	r3, r4, #6
 8003d38:	77da      	strb	r2, [r3, #31]
      if(hdma->XferHalfCpltCallback != NULL)
 8003d3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_DMA_IRQHandler+0xc8>
        hdma->XferHalfCpltCallback(hdma);
 8003d40:	0020      	movs	r0, r4
 8003d42:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	6829      	ldr	r1, [r5, #0]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	42b3      	cmp	r3, r6
 8003d4c:	d011      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xf6>
 8003d4e:	482a      	ldr	r0, [pc, #168]	; (8003df8 <HAL_DMA_IRQHandler+0x17c>)
 8003d50:	321e      	adds	r2, #30
 8003d52:	4283      	cmp	r3, r0
 8003d54:	d00d      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xf6>
 8003d56:	4a29      	ldr	r2, [pc, #164]	; (8003dfc <HAL_DMA_IRQHandler+0x180>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d03d      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x15c>
 8003d5c:	4a28      	ldr	r2, [pc, #160]	; (8003e00 <HAL_DMA_IRQHandler+0x184>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d03d      	beq.n	8003dde <HAL_DMA_IRQHandler+0x162>
 8003d62:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_DMA_IRQHandler+0x188>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d03d      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x168>
 8003d68:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <HAL_DMA_IRQHandler+0x18c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03d      	beq.n	8003dea <HAL_DMA_IRQHandler+0x16e>
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	0492      	lsls	r2, r2, #18
 8003d72:	4211      	tst	r1, r2
 8003d74:	d017      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x12a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d76:	2002      	movs	r0, #2
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	4201      	tst	r1, r0
 8003d7c:	d013      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x12a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	0689      	lsls	r1, r1, #26
 8003d82:	d402      	bmi.n	8003d8a <HAL_DMA_IRQHandler+0x10e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8003d84:	6819      	ldr	r1, [r3, #0]
 8003d86:	4381      	bics	r1, r0
 8003d88:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d8a:	606a      	str	r2, [r5, #4]
      hdma->State = HAL_DMA_STATE_READY;    
 8003d8c:	2201      	movs	r2, #1
      hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 8003d8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d90:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma->State = HAL_DMA_STATE_READY;    
 8003d92:	1da3      	adds	r3, r4, #6
 8003d94:	77da      	strb	r2, [r3, #31]
      __HAL_UNLOCK(hdma);
 8003d96:	2200      	movs	r2, #0
 8003d98:	1d63      	adds	r3, r4, #5
 8003d9a:	77da      	strb	r2, [r3, #31]
      if(hdma->XferCpltCallback != NULL)
 8003d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d001      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x12a>
        hdma->XferCpltCallback(hdma);
 8003da2:	0020      	movs	r0, r4
 8003da4:	4798      	blx	r3
}  
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8003da8:	2280      	movs	r2, #128	; 0x80
 8003daa:	0112      	lsls	r2, r2, #4
 8003dac:	e785      	b.n	8003cba <HAL_DMA_IRQHandler+0x3e>
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	0212      	lsls	r2, r2, #8
 8003db2:	e782      	b.n	8003cba <HAL_DMA_IRQHandler+0x3e>
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	0312      	lsls	r2, r2, #12
 8003db8:	e77f      	b.n	8003cba <HAL_DMA_IRQHandler+0x3e>
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	0412      	lsls	r2, r2, #16
 8003dbe:	e77c      	b.n	8003cba <HAL_DMA_IRQHandler+0x3e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8003dc0:	2280      	movs	r2, #128	; 0x80
 8003dc2:	00d2      	lsls	r2, r2, #3
 8003dc4:	e7a9      	b.n	8003d1a <HAL_DMA_IRQHandler+0x9e>
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	01d2      	lsls	r2, r2, #7
 8003dca:	e7a6      	b.n	8003d1a <HAL_DMA_IRQHandler+0x9e>
 8003dcc:	2280      	movs	r2, #128	; 0x80
 8003dce:	02d2      	lsls	r2, r2, #11
 8003dd0:	e7a3      	b.n	8003d1a <HAL_DMA_IRQHandler+0x9e>
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	03d2      	lsls	r2, r2, #15
 8003dd6:	e7a0      	b.n	8003d1a <HAL_DMA_IRQHandler+0x9e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8003dd8:	2280      	movs	r2, #128	; 0x80
 8003dda:	0092      	lsls	r2, r2, #2
 8003ddc:	e7c9      	b.n	8003d72 <HAL_DMA_IRQHandler+0xf6>
 8003dde:	2280      	movs	r2, #128	; 0x80
 8003de0:	0192      	lsls	r2, r2, #6
 8003de2:	e7c6      	b.n	8003d72 <HAL_DMA_IRQHandler+0xf6>
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	0292      	lsls	r2, r2, #10
 8003de8:	e7c3      	b.n	8003d72 <HAL_DMA_IRQHandler+0xf6>
 8003dea:	2280      	movs	r2, #128	; 0x80
 8003dec:	0392      	lsls	r2, r2, #14
 8003dee:	e7c0      	b.n	8003d72 <HAL_DMA_IRQHandler+0xf6>
 8003df0:	40020000 	.word	0x40020000
 8003df4:	40020008 	.word	0x40020008
 8003df8:	4002001c 	.word	0x4002001c
 8003dfc:	40020030 	.word	0x40020030
 8003e00:	40020044 	.word	0x40020044
 8003e04:	40020058 	.word	0x40020058
 8003e08:	4002006c 	.word	0x4002006c

08003e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e0e:	4a55      	ldr	r2, [pc, #340]	; (8003f64 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e10:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e12:	1882      	adds	r2, r0, r2
 8003e14:	1e54      	subs	r4, r2, #1
 8003e16:	41a2      	sbcs	r2, r4
{
 8003e18:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e1a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8003e1c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e1e:	3205      	adds	r2, #5
 8003e20:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e22:	9a01      	ldr	r2, [sp, #4]
 8003e24:	40da      	lsrs	r2, r3
 8003e26:	d101      	bne.n	8003e2c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003e28:	b005      	add	sp, #20
 8003e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003e2c:	2501      	movs	r5, #1
 8003e2e:	409d      	lsls	r5, r3
 8003e30:	9a01      	ldr	r2, [sp, #4]
 8003e32:	402a      	ands	r2, r5
 8003e34:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8003e36:	d100      	bne.n	8003e3a <HAL_GPIO_Init+0x2e>
 8003e38:	e091      	b.n	8003f5e <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003e3a:	684a      	ldr	r2, [r1, #4]
 8003e3c:	4694      	mov	ip, r2
 8003e3e:	2210      	movs	r2, #16
 8003e40:	4664      	mov	r4, ip
 8003e42:	4394      	bics	r4, r2
 8003e44:	0022      	movs	r2, r4
 8003e46:	3c01      	subs	r4, #1
 8003e48:	2a02      	cmp	r2, #2
 8003e4a:	d11f      	bne.n	8003e8c <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003e4c:	2407      	movs	r4, #7
 8003e4e:	270f      	movs	r7, #15
 8003e50:	401c      	ands	r4, r3
 8003e52:	00a4      	lsls	r4, r4, #2
 8003e54:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8003e56:	08da      	lsrs	r2, r3, #3
 8003e58:	0092      	lsls	r2, r2, #2
 8003e5a:	1882      	adds	r2, r0, r2
 8003e5c:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003e5e:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8003e60:	690f      	ldr	r7, [r1, #16]
 8003e62:	40a7      	lsls	r7, r4
 8003e64:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8003e66:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003e68:	2403      	movs	r4, #3
 8003e6a:	005e      	lsls	r6, r3, #1
 8003e6c:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8003e6e:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003e70:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e72:	68cc      	ldr	r4, [r1, #12]
 8003e74:	40b4      	lsls	r4, r6
 8003e76:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8003e78:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e7a:	4662      	mov	r2, ip
 8003e7c:	06d2      	lsls	r2, r2, #27
 8003e7e:	0fd2      	lsrs	r2, r2, #31
 8003e80:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 8003e82:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e84:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e86:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8003e88:	6042      	str	r2, [r0, #4]
 8003e8a:	e001      	b.n	8003e90 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e8c:	2c01      	cmp	r4, #1
 8003e8e:	d9eb      	bls.n	8003e68 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e90:	2603      	movs	r6, #3
 8003e92:	0034      	movs	r4, r6
 8003e94:	005d      	lsls	r5, r3, #1
 8003e96:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e98:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e9a:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e9c:	4032      	ands	r2, r6
 8003e9e:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8003ea0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ea2:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ea4:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8003ea6:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8003ea8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eaa:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8003eac:	688a      	ldr	r2, [r1, #8]
 8003eae:	40aa      	lsls	r2, r5
 8003eb0:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003eb2:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8003eb4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003eb6:	00d2      	lsls	r2, r2, #3
 8003eb8:	d551      	bpl.n	8003f5e <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eba:	2501      	movs	r5, #1
 8003ebc:	4c2a      	ldr	r4, [pc, #168]	; (8003f68 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003ebe:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003ec2:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003ec4:	001d      	movs	r5, r3
 8003ec6:	4035      	ands	r5, r6
 8003ec8:	00ad      	lsls	r5, r5, #2
 8003eca:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ecc:	6362      	str	r2, [r4, #52]	; 0x34
 8003ece:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8003ed0:	089c      	lsrs	r4, r3, #2
 8003ed2:	00a4      	lsls	r4, r4, #2
 8003ed4:	18a4      	adds	r4, r4, r2
 8003ed6:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003ed8:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003eda:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003edc:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003ede:	05ff      	lsls	r7, r7, #23
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	42b8      	cmp	r0, r7
 8003ee4:	d010      	beq.n	8003f08 <HAL_GPIO_Init+0xfc>
 8003ee6:	4f22      	ldr	r7, [pc, #136]	; (8003f70 <HAL_GPIO_Init+0x164>)
 8003ee8:	3201      	adds	r2, #1
 8003eea:	42b8      	cmp	r0, r7
 8003eec:	d00c      	beq.n	8003f08 <HAL_GPIO_Init+0xfc>
 8003eee:	4f21      	ldr	r7, [pc, #132]	; (8003f74 <HAL_GPIO_Init+0x168>)
 8003ef0:	3201      	adds	r2, #1
 8003ef2:	42b8      	cmp	r0, r7
 8003ef4:	d008      	beq.n	8003f08 <HAL_GPIO_Init+0xfc>
 8003ef6:	4f20      	ldr	r7, [pc, #128]	; (8003f78 <HAL_GPIO_Init+0x16c>)
 8003ef8:	0032      	movs	r2, r6
 8003efa:	42b8      	cmp	r0, r7
 8003efc:	d004      	beq.n	8003f08 <HAL_GPIO_Init+0xfc>
 8003efe:	4e1f      	ldr	r6, [pc, #124]	; (8003f7c <HAL_GPIO_Init+0x170>)
 8003f00:	3201      	adds	r2, #1
 8003f02:	42b0      	cmp	r0, r6
 8003f04:	d000      	beq.n	8003f08 <HAL_GPIO_Init+0xfc>
 8003f06:	9a03      	ldr	r2, [sp, #12]
 8003f08:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f0a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003f0c:	9d02      	ldr	r5, [sp, #8]
 8003f0e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f10:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8003f12:	4a1b      	ldr	r2, [pc, #108]	; (8003f80 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8003f14:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8003f16:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8003f18:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8003f1a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003f1c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f1e:	03ff      	lsls	r7, r7, #15
 8003f20:	d401      	bmi.n	8003f26 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8003f22:	0035      	movs	r5, r6
 8003f24:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f26:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8003f28:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003f2a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003f2c:	9d00      	ldr	r5, [sp, #0]
 8003f2e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f30:	03bf      	lsls	r7, r7, #14
 8003f32:	d401      	bmi.n	8003f38 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8003f34:	0035      	movs	r5, r6
 8003f36:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f38:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8003f3a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003f3c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003f3e:	9d00      	ldr	r5, [sp, #0]
 8003f40:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f42:	02ff      	lsls	r7, r7, #11
 8003f44:	d401      	bmi.n	8003f4a <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8003f46:	0035      	movs	r5, r6
 8003f48:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f4a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8003f4c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003f4e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003f50:	9e00      	ldr	r6, [sp, #0]
 8003f52:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f54:	02bf      	lsls	r7, r7, #10
 8003f56:	d401      	bmi.n	8003f5c <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 8003f58:	4025      	ands	r5, r4
 8003f5a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003f5c:	60d6      	str	r6, [r2, #12]
    position++;
 8003f5e:	3301      	adds	r3, #1
 8003f60:	e75f      	b.n	8003e22 <HAL_GPIO_Init+0x16>
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	afffe400 	.word	0xafffe400
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40010000 	.word	0x40010000
 8003f70:	50000400 	.word	0x50000400
 8003f74:	50000800 	.word	0x50000800
 8003f78:	50000c00 	.word	0x50000c00
 8003f7c:	50001000 	.word	0x50001000
 8003f80:	40010400 	.word	0x40010400

08003f84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f88:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003f8a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003f8c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003f8e:	e7fc      	b.n	8003f8a <HAL_GPIO_WritePin+0x6>

08003f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003f92:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	4210      	tst	r0, r2
 8003f98:	d002      	beq.n	8003fa0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f9a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f9c:	f002 feca 	bl	8006d34 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fa0:	bd10      	pop	{r4, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8003fa8:	2110      	movs	r1, #16
 8003faa:	4a02      	ldr	r2, [pc, #8]	; (8003fb4 <HAL_PWR_DisablePVD+0xc>)
 8003fac:	6813      	ldr	r3, [r2, #0]
 8003fae:	438b      	bics	r3, r1
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	4770      	bx	lr
 8003fb4:	40007000 	.word	0x40007000

08003fb8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003fb8:	b510      	push	{r4, lr}

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003fba:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <HAL_PWR_EnterSLEEPMode+0x28>)
 8003fbe:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003fc0:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003fc2:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8003fc4:	6010      	str	r0, [r2, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003fc6:	2004      	movs	r0, #4
 8003fc8:	4a06      	ldr	r2, [pc, #24]	; (8003fe4 <HAL_PWR_EnterSLEEPMode+0x2c>)
 8003fca:	6913      	ldr	r3, [r2, #16]
 8003fcc:	4383      	bics	r3, r0
 8003fce:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003fd0:	2901      	cmp	r1, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_PWR_EnterSLEEPMode+0x20>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003fd4:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003fd6:	bd10      	pop	{r4, pc}
    __SEV();
 8003fd8:	bf40      	sev
    __WFE();
 8003fda:	bf20      	wfe
    __WFE();
 8003fdc:	bf20      	wfe
}
 8003fde:	e7fa      	b.n	8003fd6 <HAL_PWR_EnterSLEEPMode+0x1e>
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003fe8:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003fea:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8003fec:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <HAL_PWR_EnterSTOPMode+0x30>)
 8003fee:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003ff0:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003ff2:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8003ff4:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <HAL_PWR_EnterSTOPMode+0x34>)
 8003ffa:	6918      	ldr	r0, [r3, #16]
 8003ffc:	4302      	orrs	r2, r0
 8003ffe:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004000:	2901      	cmp	r1, #1
 8004002:	d105      	bne.n	8004010 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004004:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004006:	2104      	movs	r1, #4
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	438a      	bics	r2, r1
 800400c:	611a      	str	r2, [r3, #16]

}
 800400e:	bd10      	pop	{r4, pc}
    __SEV();
 8004010:	bf40      	sev
    __WFE();
 8004012:	bf20      	wfe
    __WFE();
 8004014:	bf20      	wfe
 8004016:	e7f6      	b.n	8004006 <HAL_PWR_EnterSTOPMode+0x1e>
 8004018:	40007000 	.word	0x40007000
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	4a03      	ldr	r2, [pc, #12]	; (8004030 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	6811      	ldr	r1, [r2, #0]
 8004028:	430b      	orrs	r3, r1
 800402a:	6013      	str	r3, [r2, #0]
}
 800402c:	4770      	bx	lr
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	40007000 	.word	0x40007000

08004034 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	4a03      	ldr	r2, [pc, #12]	; (8004044 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	6811      	ldr	r1, [r2, #0]
 800403c:	430b      	orrs	r3, r1
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	4770      	bx	lr
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	40007000 	.word	0x40007000

08004048 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004048:	22f0      	movs	r2, #240	; 0xf0
 800404a:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 800404c:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800404e:	68d9      	ldr	r1, [r3, #12]
 8004050:	4211      	tst	r1, r2
 8004052:	d00b      	beq.n	800406c <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004054:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8004056:	2101      	movs	r1, #1
 8004058:	4814      	ldr	r0, [pc, #80]	; (80040ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800405a:	6802      	ldr	r2, [r0, #0]
 800405c:	438a      	bics	r2, r1
 800405e:	431a      	orrs	r2, r3
 8004060:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004062:	6800      	ldr	r0, [r0, #0]
 8004064:	4008      	ands	r0, r1
 8004066:	4058      	eors	r0, r3
 8004068:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800406a:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800406c:	2180      	movs	r1, #128	; 0x80
 800406e:	22c0      	movs	r2, #192	; 0xc0
 8004070:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8004072:	0549      	lsls	r1, r1, #21
 8004074:	4c0e      	ldr	r4, [pc, #56]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004076:	0152      	lsls	r2, r2, #5
 8004078:	420d      	tst	r5, r1
 800407a:	d00a      	beq.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004080:	23c0      	movs	r3, #192	; 0xc0
 8004082:	015b      	lsls	r3, r3, #5
 8004084:	429a      	cmp	r2, r3
 8004086:	d1e5      	bne.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800408a:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800408c:	4243      	negs	r3, r0
 800408e:	4143      	adcs	r3, r0
 8004090:	e7e1      	b.n	8004056 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8004094:	4329      	orrs	r1, r5
 8004096:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004098:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4c07      	ldr	r4, [pc, #28]	; (80040b8 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800409c:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80040a0:	4021      	ands	r1, r4
 80040a2:	6399      	str	r1, [r3, #56]	; 0x38
 80040a4:	e7ec      	b.n	8004080 <RCC_SetFlashLatencyFromMSIRange+0x38>
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40007000 	.word	0x40007000
 80040b4:	ffff4000 	.word	0xffff4000
 80040b8:	efffffff 	.word	0xefffffff

080040bc <HAL_RCC_OscConfig>:
{
 80040bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040be:	6803      	ldr	r3, [r0, #0]
{
 80040c0:	b085      	sub	sp, #20
 80040c2:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c4:	07db      	lsls	r3, r3, #31
 80040c6:	d44e      	bmi.n	8004166 <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	079b      	lsls	r3, r3, #30
 80040cc:	d500      	bpl.n	80040d0 <HAL_RCC_OscConfig+0x14>
 80040ce:	e0a1      	b.n	8004214 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	06db      	lsls	r3, r3, #27
 80040d4:	d535      	bpl.n	8004142 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80040d6:	230c      	movs	r3, #12
 80040d8:	4dbd      	ldr	r5, [pc, #756]	; (80043d0 <HAL_RCC_OscConfig+0x314>)
 80040da:	68ea      	ldr	r2, [r5, #12]
 80040dc:	421a      	tst	r2, r3
 80040de:	d000      	beq.n	80040e2 <HAL_RCC_OscConfig+0x26>
 80040e0:	e0eb      	b.n	80042ba <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	059b      	lsls	r3, r3, #22
 80040e6:	d502      	bpl.n	80040ee <HAL_RCC_OscConfig+0x32>
 80040e8:	69e3      	ldr	r3, [r4, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d050      	beq.n	8004190 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040ee:	22e0      	movs	r2, #224	; 0xe0
 80040f0:	686b      	ldr	r3, [r5, #4]
 80040f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80040f4:	0212      	lsls	r2, r2, #8
 80040f6:	4013      	ands	r3, r2
 80040f8:	4298      	cmp	r0, r3
 80040fa:	d800      	bhi.n	80040fe <HAL_RCC_OscConfig+0x42>
 80040fc:	e0cb      	b.n	8004296 <HAL_RCC_OscConfig+0x1da>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040fe:	f7ff ffa3 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 8004102:	2800      	cmp	r0, #0
 8004104:	d144      	bne.n	8004190 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004106:	686b      	ldr	r3, [r5, #4]
 8004108:	4ab2      	ldr	r2, [pc, #712]	; (80043d4 <HAL_RCC_OscConfig+0x318>)
 800410a:	4013      	ands	r3, r2
 800410c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800410e:	4313      	orrs	r3, r2
 8004110:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004112:	686a      	ldr	r2, [r5, #4]
 8004114:	6a23      	ldr	r3, [r4, #32]
 8004116:	0212      	lsls	r2, r2, #8
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	0a12      	lsrs	r2, r2, #8
 800411c:	4313      	orrs	r3, r2
 800411e:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8004120:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8004122:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8004124:	0b59      	lsrs	r1, r3, #13
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	3101      	adds	r1, #1
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800412e:	0612      	lsls	r2, r2, #24
 8004130:	49a9      	ldr	r1, [pc, #676]	; (80043d8 <HAL_RCC_OscConfig+0x31c>)
 8004132:	0f12      	lsrs	r2, r2, #28
 8004134:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8004136:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8004138:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800413a:	4aa8      	ldr	r2, [pc, #672]	; (80043dc <HAL_RCC_OscConfig+0x320>)
 800413c:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800413e:	f002 fda7 	bl	8006c90 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	071b      	lsls	r3, r3, #28
 8004146:	d500      	bpl.n	800414a <HAL_RCC_OscConfig+0x8e>
 8004148:	e0ee      	b.n	8004328 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	075b      	lsls	r3, r3, #29
 800414e:	d500      	bpl.n	8004152 <HAL_RCC_OscConfig+0x96>
 8004150:	e111      	b.n	8004376 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	069b      	lsls	r3, r3, #26
 8004156:	d500      	bpl.n	800415a <HAL_RCC_OscConfig+0x9e>
 8004158:	e194      	b.n	8004484 <HAL_RCC_OscConfig+0x3c8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800415a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800415c:	2900      	cmp	r1, #0
 800415e:	d000      	beq.n	8004162 <HAL_RCC_OscConfig+0xa6>
 8004160:	e1c4      	b.n	80044ec <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 8004162:	2000      	movs	r0, #0
 8004164:	e015      	b.n	8004192 <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004166:	210c      	movs	r1, #12
 8004168:	4d99      	ldr	r5, [pc, #612]	; (80043d0 <HAL_RCC_OscConfig+0x314>)
 800416a:	68eb      	ldr	r3, [r5, #12]
 800416c:	400b      	ands	r3, r1
 800416e:	2b08      	cmp	r3, #8
 8004170:	d008      	beq.n	8004184 <HAL_RCC_OscConfig+0xc8>
 8004172:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004174:	68ea      	ldr	r2, [r5, #12]
 8004176:	025b      	lsls	r3, r3, #9
 8004178:	400a      	ands	r2, r1
 800417a:	428a      	cmp	r2, r1
 800417c:	d10b      	bne.n	8004196 <HAL_RCC_OscConfig+0xda>
 800417e:	68ea      	ldr	r2, [r5, #12]
 8004180:	421a      	tst	r2, r3
 8004182:	d008      	beq.n	8004196 <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	039b      	lsls	r3, r3, #14
 8004188:	d59e      	bpl.n	80040c8 <HAL_RCC_OscConfig+0xc>
 800418a:	6863      	ldr	r3, [r4, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d19b      	bne.n	80040c8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8004190:	2001      	movs	r0, #1
}
 8004192:	b005      	add	sp, #20
 8004194:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d113      	bne.n	80041c4 <HAL_RCC_OscConfig+0x108>
 800419c:	682a      	ldr	r2, [r5, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80041a2:	f7ff fb41 	bl	8003828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80041a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	02b6      	lsls	r6, r6, #10
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	4233      	tst	r3, r6
 80041b0:	d000      	beq.n	80041b4 <HAL_RCC_OscConfig+0xf8>
 80041b2:	e789      	b.n	80040c8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b4:	f7ff fb38 	bl	8003828 <HAL_GetTick>
 80041b8:	4b89      	ldr	r3, [pc, #548]	; (80043e0 <HAL_RCC_OscConfig+0x324>)
 80041ba:	1bc0      	subs	r0, r0, r7
 80041bc:	4298      	cmp	r0, r3
 80041be:	d9f5      	bls.n	80041ac <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 80041c0:	2003      	movs	r0, #3
 80041c2:	e7e6      	b.n	8004192 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c4:	21a0      	movs	r1, #160	; 0xa0
 80041c6:	02c9      	lsls	r1, r1, #11
 80041c8:	428a      	cmp	r2, r1
 80041ca:	d105      	bne.n	80041d8 <HAL_RCC_OscConfig+0x11c>
 80041cc:	2280      	movs	r2, #128	; 0x80
 80041ce:	6829      	ldr	r1, [r5, #0]
 80041d0:	02d2      	lsls	r2, r2, #11
 80041d2:	430a      	orrs	r2, r1
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	e7e1      	b.n	800419c <HAL_RCC_OscConfig+0xe0>
 80041d8:	6829      	ldr	r1, [r5, #0]
 80041da:	4882      	ldr	r0, [pc, #520]	; (80043e4 <HAL_RCC_OscConfig+0x328>)
 80041dc:	4001      	ands	r1, r0
 80041de:	6029      	str	r1, [r5, #0]
 80041e0:	6829      	ldr	r1, [r5, #0]
 80041e2:	400b      	ands	r3, r1
 80041e4:	9303      	str	r3, [sp, #12]
 80041e6:	9b03      	ldr	r3, [sp, #12]
 80041e8:	497f      	ldr	r1, [pc, #508]	; (80043e8 <HAL_RCC_OscConfig+0x32c>)
 80041ea:	682b      	ldr	r3, [r5, #0]
 80041ec:	400b      	ands	r3, r1
 80041ee:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f0:	2a00      	cmp	r2, #0
 80041f2:	d1d6      	bne.n	80041a2 <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 80041f4:	f7ff fb18 	bl	8003828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041f8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80041fa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fc:	02b6      	lsls	r6, r6, #10
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	4233      	tst	r3, r6
 8004202:	d100      	bne.n	8004206 <HAL_RCC_OscConfig+0x14a>
 8004204:	e760      	b.n	80040c8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004206:	f7ff fb0f 	bl	8003828 <HAL_GetTick>
 800420a:	4b75      	ldr	r3, [pc, #468]	; (80043e0 <HAL_RCC_OscConfig+0x324>)
 800420c:	1bc0      	subs	r0, r0, r7
 800420e:	4298      	cmp	r0, r3
 8004210:	d9f5      	bls.n	80041fe <HAL_RCC_OscConfig+0x142>
 8004212:	e7d5      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004214:	210c      	movs	r1, #12
 8004216:	4d6e      	ldr	r5, [pc, #440]	; (80043d0 <HAL_RCC_OscConfig+0x314>)
 8004218:	68ea      	ldr	r2, [r5, #12]
 800421a:	400a      	ands	r2, r1
 800421c:	2a04      	cmp	r2, #4
 800421e:	d006      	beq.n	800422e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004220:	68eb      	ldr	r3, [r5, #12]
 8004222:	400b      	ands	r3, r1
 8004224:	428b      	cmp	r3, r1
 8004226:	d110      	bne.n	800424a <HAL_RCC_OscConfig+0x18e>
 8004228:	68eb      	ldr	r3, [r5, #12]
 800422a:	03db      	lsls	r3, r3, #15
 800422c:	d40d      	bmi.n	800424a <HAL_RCC_OscConfig+0x18e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	682b      	ldr	r3, [r5, #0]
 8004230:	075b      	lsls	r3, r3, #29
 8004232:	d502      	bpl.n	800423a <HAL_RCC_OscConfig+0x17e>
 8004234:	68e3      	ldr	r3, [r4, #12]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d1aa      	bne.n	8004190 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	686a      	ldr	r2, [r5, #4]
 800423c:	6923      	ldr	r3, [r4, #16]
 800423e:	496b      	ldr	r1, [pc, #428]	; (80043ec <HAL_RCC_OscConfig+0x330>)
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	400a      	ands	r2, r1
 8004244:	4313      	orrs	r3, r2
 8004246:	606b      	str	r3, [r5, #4]
 8004248:	e742      	b.n	80040d0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800424a:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800424c:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800424e:	2a00      	cmp	r2, #0
 8004250:	d010      	beq.n	8004274 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004252:	2109      	movs	r1, #9
 8004254:	438b      	bics	r3, r1
 8004256:	4313      	orrs	r3, r2
 8004258:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800425a:	f7ff fae5 	bl	8003828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425e:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8004260:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004262:	682b      	ldr	r3, [r5, #0]
 8004264:	4233      	tst	r3, r6
 8004266:	d1e8      	bne.n	800423a <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004268:	f7ff fade 	bl	8003828 <HAL_GetTick>
 800426c:	1bc0      	subs	r0, r0, r7
 800426e:	2802      	cmp	r0, #2
 8004270:	d9f7      	bls.n	8004262 <HAL_RCC_OscConfig+0x1a6>
 8004272:	e7a5      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_HSI_DISABLE();
 8004274:	2201      	movs	r2, #1
 8004276:	4393      	bics	r3, r2
 8004278:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800427a:	f7ff fad5 	bl	8003828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8004280:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	682b      	ldr	r3, [r5, #0]
 8004284:	4233      	tst	r3, r6
 8004286:	d100      	bne.n	800428a <HAL_RCC_OscConfig+0x1ce>
 8004288:	e722      	b.n	80040d0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800428a:	f7ff facd 	bl	8003828 <HAL_GetTick>
 800428e:	1bc0      	subs	r0, r0, r7
 8004290:	2802      	cmp	r0, #2
 8004292:	d9f6      	bls.n	8004282 <HAL_RCC_OscConfig+0x1c6>
 8004294:	e794      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004296:	686b      	ldr	r3, [r5, #4]
 8004298:	4a4e      	ldr	r2, [pc, #312]	; (80043d4 <HAL_RCC_OscConfig+0x318>)
 800429a:	4013      	ands	r3, r2
 800429c:	4303      	orrs	r3, r0
 800429e:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042a0:	686a      	ldr	r2, [r5, #4]
 80042a2:	6a23      	ldr	r3, [r4, #32]
 80042a4:	0212      	lsls	r2, r2, #8
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	0a12      	lsrs	r2, r2, #8
 80042aa:	4313      	orrs	r3, r2
 80042ac:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ae:	f7ff fecb 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d100      	bne.n	80042b8 <HAL_RCC_OscConfig+0x1fc>
 80042b6:	e733      	b.n	8004120 <HAL_RCC_OscConfig+0x64>
 80042b8:	e76a      	b.n	8004190 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042ba:	69e3      	ldr	r3, [r4, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d020      	beq.n	8004302 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	682a      	ldr	r2, [r5, #0]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4313      	orrs	r3, r2
 80042c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80042ca:	f7ff faad 	bl	8003828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80042ce:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80042d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80042d2:	00b6      	lsls	r6, r6, #2
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	4233      	tst	r3, r6
 80042d8:	d00d      	beq.n	80042f6 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042da:	686b      	ldr	r3, [r5, #4]
 80042dc:	4a3d      	ldr	r2, [pc, #244]	; (80043d4 <HAL_RCC_OscConfig+0x318>)
 80042de:	4013      	ands	r3, r2
 80042e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042e2:	4313      	orrs	r3, r2
 80042e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042e6:	686a      	ldr	r2, [r5, #4]
 80042e8:	6a23      	ldr	r3, [r4, #32]
 80042ea:	0212      	lsls	r2, r2, #8
 80042ec:	061b      	lsls	r3, r3, #24
 80042ee:	0a12      	lsrs	r2, r2, #8
 80042f0:	4313      	orrs	r3, r2
 80042f2:	606b      	str	r3, [r5, #4]
 80042f4:	e725      	b.n	8004142 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042f6:	f7ff fa97 	bl	8003828 <HAL_GetTick>
 80042fa:	1bc0      	subs	r0, r0, r7
 80042fc:	2802      	cmp	r0, #2
 80042fe:	d9e9      	bls.n	80042d4 <HAL_RCC_OscConfig+0x218>
 8004300:	e75e      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_MSI_DISABLE();
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	4a3a      	ldr	r2, [pc, #232]	; (80043f0 <HAL_RCC_OscConfig+0x334>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8004306:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 8004308:	4013      	ands	r3, r2
 800430a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800430c:	f7ff fa8c 	bl	8003828 <HAL_GetTick>
 8004310:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8004312:	00b6      	lsls	r6, r6, #2
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	4233      	tst	r3, r6
 8004318:	d100      	bne.n	800431c <HAL_RCC_OscConfig+0x260>
 800431a:	e712      	b.n	8004142 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800431c:	f7ff fa84 	bl	8003828 <HAL_GetTick>
 8004320:	1bc0      	subs	r0, r0, r7
 8004322:	2802      	cmp	r0, #2
 8004324:	d9f6      	bls.n	8004314 <HAL_RCC_OscConfig+0x258>
 8004326:	e74b      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004328:	6962      	ldr	r2, [r4, #20]
 800432a:	2301      	movs	r3, #1
 800432c:	4d28      	ldr	r5, [pc, #160]	; (80043d0 <HAL_RCC_OscConfig+0x314>)
 800432e:	2a00      	cmp	r2, #0
 8004330:	d010      	beq.n	8004354 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8004332:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004334:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8004336:	4313      	orrs	r3, r2
 8004338:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800433a:	f7ff fa75 	bl	8003828 <HAL_GetTick>
 800433e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004340:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004342:	4233      	tst	r3, r6
 8004344:	d000      	beq.n	8004348 <HAL_RCC_OscConfig+0x28c>
 8004346:	e700      	b.n	800414a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004348:	f7ff fa6e 	bl	8003828 <HAL_GetTick>
 800434c:	1bc0      	subs	r0, r0, r7
 800434e:	2802      	cmp	r0, #2
 8004350:	d9f6      	bls.n	8004340 <HAL_RCC_OscConfig+0x284>
 8004352:	e735      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
      __HAL_RCC_LSI_DISABLE();
 8004354:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004356:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8004358:	439a      	bics	r2, r3
 800435a:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800435c:	f7ff fa64 	bl	8003828 <HAL_GetTick>
 8004360:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004362:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004364:	4233      	tst	r3, r6
 8004366:	d100      	bne.n	800436a <HAL_RCC_OscConfig+0x2ae>
 8004368:	e6ef      	b.n	800414a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436a:	f7ff fa5d 	bl	8003828 <HAL_GetTick>
 800436e:	1bc0      	subs	r0, r0, r7
 8004370:	2802      	cmp	r0, #2
 8004372:	d9f6      	bls.n	8004362 <HAL_RCC_OscConfig+0x2a6>
 8004374:	e724      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004376:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004378:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800437a:	4d15      	ldr	r5, [pc, #84]	; (80043d0 <HAL_RCC_OscConfig+0x314>)
 800437c:	055b      	lsls	r3, r3, #21
 800437e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8004380:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	421a      	tst	r2, r3
 8004384:	d104      	bne.n	8004390 <HAL_RCC_OscConfig+0x2d4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004388:	4313      	orrs	r3, r2
 800438a:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 800438c:	2301      	movs	r3, #1
 800438e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	2780      	movs	r7, #128	; 0x80
 8004392:	4e18      	ldr	r6, [pc, #96]	; (80043f4 <HAL_RCC_OscConfig+0x338>)
 8004394:	007f      	lsls	r7, r7, #1
 8004396:	6833      	ldr	r3, [r6, #0]
 8004398:	423b      	tst	r3, r7
 800439a:	d008      	beq.n	80043ae <HAL_RCC_OscConfig+0x2f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	68a3      	ldr	r3, [r4, #8]
 80043a0:	0052      	lsls	r2, r2, #1
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d128      	bne.n	80043f8 <HAL_RCC_OscConfig+0x33c>
 80043a6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80043a8:	4313      	orrs	r3, r2
 80043aa:	652b      	str	r3, [r5, #80]	; 0x50
 80043ac:	e049      	b.n	8004442 <HAL_RCC_OscConfig+0x386>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ae:	6833      	ldr	r3, [r6, #0]
 80043b0:	433b      	orrs	r3, r7
 80043b2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80043b4:	f7ff fa38 	bl	8003828 <HAL_GetTick>
 80043b8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ba:	6833      	ldr	r3, [r6, #0]
 80043bc:	423b      	tst	r3, r7
 80043be:	d1ed      	bne.n	800439c <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7ff fa32 	bl	8003828 <HAL_GetTick>
 80043c4:	9b01      	ldr	r3, [sp, #4]
 80043c6:	1ac0      	subs	r0, r0, r3
 80043c8:	2864      	cmp	r0, #100	; 0x64
 80043ca:	d9f6      	bls.n	80043ba <HAL_RCC_OscConfig+0x2fe>
 80043cc:	e6f8      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	40021000 	.word	0x40021000
 80043d4:	ffff1fff 	.word	0xffff1fff
 80043d8:	08007f21 	.word	0x08007f21
 80043dc:	20000030 	.word	0x20000030
 80043e0:	00001388 	.word	0x00001388
 80043e4:	fffeffff 	.word	0xfffeffff
 80043e8:	fffbffff 	.word	0xfffbffff
 80043ec:	ffffe0ff 	.word	0xffffe0ff
 80043f0:	fffffeff 	.word	0xfffffeff
 80043f4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d116      	bne.n	800442a <HAL_RCC_OscConfig+0x36e>
 80043fc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80043fe:	4a60      	ldr	r2, [pc, #384]	; (8004580 <HAL_RCC_OscConfig+0x4c4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004400:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004402:	4013      	ands	r3, r2
 8004404:	652b      	str	r3, [r5, #80]	; 0x50
 8004406:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004408:	4a5e      	ldr	r2, [pc, #376]	; (8004584 <HAL_RCC_OscConfig+0x4c8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440a:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800440c:	4013      	ands	r3, r2
 800440e:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004410:	f7ff fa0a 	bl	8003828 <HAL_GetTick>
 8004414:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004416:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004418:	423b      	tst	r3, r7
 800441a:	d02a      	beq.n	8004472 <HAL_RCC_OscConfig+0x3b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441c:	f7ff fa04 	bl	8003828 <HAL_GetTick>
 8004420:	4b59      	ldr	r3, [pc, #356]	; (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004422:	1b80      	subs	r0, r0, r6
 8004424:	4298      	cmp	r0, r3
 8004426:	d9f6      	bls.n	8004416 <HAL_RCC_OscConfig+0x35a>
 8004428:	e6ca      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442a:	21a0      	movs	r1, #160	; 0xa0
 800442c:	00c9      	lsls	r1, r1, #3
 800442e:	428b      	cmp	r3, r1
 8004430:	d10d      	bne.n	800444e <HAL_RCC_OscConfig+0x392>
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	430b      	orrs	r3, r1
 800443a:	652b      	str	r3, [r5, #80]	; 0x50
 800443c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800443e:	431a      	orrs	r2, r3
 8004440:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004442:	f7ff f9f1 	bl	8003828 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004446:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8004448:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	00bf      	lsls	r7, r7, #2
 800444c:	e00e      	b.n	800446c <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800444e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004450:	4a4b      	ldr	r2, [pc, #300]	; (8004580 <HAL_RCC_OscConfig+0x4c4>)
 8004452:	4013      	ands	r3, r2
 8004454:	652b      	str	r3, [r5, #80]	; 0x50
 8004456:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004458:	4a4a      	ldr	r2, [pc, #296]	; (8004584 <HAL_RCC_OscConfig+0x4c8>)
 800445a:	4013      	ands	r3, r2
 800445c:	e7a5      	b.n	80043aa <HAL_RCC_OscConfig+0x2ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7ff f9e3 	bl	8003828 <HAL_GetTick>
 8004462:	4b49      	ldr	r3, [pc, #292]	; (8004588 <HAL_RCC_OscConfig+0x4cc>)
 8004464:	1b80      	subs	r0, r0, r6
 8004466:	4298      	cmp	r0, r3
 8004468:	d900      	bls.n	800446c <HAL_RCC_OscConfig+0x3b0>
 800446a:	e6a9      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800446e:	423b      	tst	r3, r7
 8004470:	d0f5      	beq.n	800445e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8004472:	9b00      	ldr	r3, [sp, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d000      	beq.n	800447a <HAL_RCC_OscConfig+0x3be>
 8004478:	e66b      	b.n	8004152 <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 800447a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800447c:	4a43      	ldr	r2, [pc, #268]	; (800458c <HAL_RCC_OscConfig+0x4d0>)
 800447e:	4013      	ands	r3, r2
 8004480:	63ab      	str	r3, [r5, #56]	; 0x38
 8004482:	e666      	b.n	8004152 <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004484:	69a1      	ldr	r1, [r4, #24]
 8004486:	2301      	movs	r3, #1
 8004488:	4d41      	ldr	r5, [pc, #260]	; (8004590 <HAL_RCC_OscConfig+0x4d4>)
 800448a:	4a42      	ldr	r2, [pc, #264]	; (8004594 <HAL_RCC_OscConfig+0x4d8>)
 800448c:	2900      	cmp	r1, #0
 800448e:	d018      	beq.n	80044c2 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8004490:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004492:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8004494:	4319      	orrs	r1, r3
 8004496:	60a9      	str	r1, [r5, #8]
 8004498:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800449a:	430b      	orrs	r3, r1
 800449c:	636b      	str	r3, [r5, #52]	; 0x34
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	6a11      	ldr	r1, [r2, #32]
 80044a2:	019b      	lsls	r3, r3, #6
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80044a8:	f7ff f9be 	bl	8003828 <HAL_GetTick>
 80044ac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80044ae:	68ab      	ldr	r3, [r5, #8]
 80044b0:	4233      	tst	r3, r6
 80044b2:	d000      	beq.n	80044b6 <HAL_RCC_OscConfig+0x3fa>
 80044b4:	e651      	b.n	800415a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044b6:	f7ff f9b7 	bl	8003828 <HAL_GetTick>
 80044ba:	1bc0      	subs	r0, r0, r7
 80044bc:	2802      	cmp	r0, #2
 80044be:	d9f6      	bls.n	80044ae <HAL_RCC_OscConfig+0x3f2>
 80044c0:	e67e      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
        __HAL_RCC_HSI48_DISABLE();
 80044c2:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80044c4:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 80044c6:	4399      	bics	r1, r3
 80044c8:	60a9      	str	r1, [r5, #8]
 80044ca:	6a13      	ldr	r3, [r2, #32]
 80044cc:	4932      	ldr	r1, [pc, #200]	; (8004598 <HAL_RCC_OscConfig+0x4dc>)
 80044ce:	400b      	ands	r3, r1
 80044d0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80044d2:	f7ff f9a9 	bl	8003828 <HAL_GetTick>
 80044d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80044d8:	68ab      	ldr	r3, [r5, #8]
 80044da:	4233      	tst	r3, r6
 80044dc:	d100      	bne.n	80044e0 <HAL_RCC_OscConfig+0x424>
 80044de:	e63c      	b.n	800415a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044e0:	f7ff f9a2 	bl	8003828 <HAL_GetTick>
 80044e4:	1bc0      	subs	r0, r0, r7
 80044e6:	2802      	cmp	r0, #2
 80044e8:	d9f6      	bls.n	80044d8 <HAL_RCC_OscConfig+0x41c>
 80044ea:	e669      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ec:	220c      	movs	r2, #12
 80044ee:	4d28      	ldr	r5, [pc, #160]	; (8004590 <HAL_RCC_OscConfig+0x4d4>)
      return HAL_ERROR;
 80044f0:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f2:	68eb      	ldr	r3, [r5, #12]
 80044f4:	4013      	ands	r3, r2
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d100      	bne.n	80044fc <HAL_RCC_OscConfig+0x440>
 80044fa:	e64a      	b.n	8004192 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	4a27      	ldr	r2, [pc, #156]	; (800459c <HAL_RCC_OscConfig+0x4e0>)
 8004500:	4013      	ands	r3, r2
 8004502:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004504:	2902      	cmp	r1, #2
 8004506:	d12b      	bne.n	8004560 <HAL_RCC_OscConfig+0x4a4>
        tickstart = HAL_GetTick();
 8004508:	f7ff f98e 	bl	8003828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800450c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800450e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004510:	04b6      	lsls	r6, r6, #18
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	4233      	tst	r3, r6
 8004516:	d11d      	bne.n	8004554 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004518:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800451a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800451c:	68ea      	ldr	r2, [r5, #12]
 800451e:	430b      	orrs	r3, r1
 8004520:	491f      	ldr	r1, [pc, #124]	; (80045a0 <HAL_RCC_OscConfig+0x4e4>)
 8004522:	400a      	ands	r2, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004528:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452a:	4313      	orrs	r3, r2
 800452c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	682a      	ldr	r2, [r5, #0]
 8004532:	045b      	lsls	r3, r3, #17
 8004534:	4313      	orrs	r3, r2
 8004536:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004538:	f7ff f976 	bl	8003828 <HAL_GetTick>
 800453c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800453e:	04a4      	lsls	r4, r4, #18
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	4223      	tst	r3, r4
 8004544:	d000      	beq.n	8004548 <HAL_RCC_OscConfig+0x48c>
 8004546:	e60c      	b.n	8004162 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004548:	f7ff f96e 	bl	8003828 <HAL_GetTick>
 800454c:	1b80      	subs	r0, r0, r6
 800454e:	2802      	cmp	r0, #2
 8004550:	d9f6      	bls.n	8004540 <HAL_RCC_OscConfig+0x484>
 8004552:	e635      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004554:	f7ff f968 	bl	8003828 <HAL_GetTick>
 8004558:	1bc0      	subs	r0, r0, r7
 800455a:	2802      	cmp	r0, #2
 800455c:	d9d9      	bls.n	8004512 <HAL_RCC_OscConfig+0x456>
 800455e:	e62f      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8004560:	f7ff f962 	bl	8003828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004564:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8004566:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004568:	04a4      	lsls	r4, r4, #18
 800456a:	682b      	ldr	r3, [r5, #0]
 800456c:	4223      	tst	r3, r4
 800456e:	d100      	bne.n	8004572 <HAL_RCC_OscConfig+0x4b6>
 8004570:	e5f7      	b.n	8004162 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004572:	f7ff f959 	bl	8003828 <HAL_GetTick>
 8004576:	1b80      	subs	r0, r0, r6
 8004578:	2802      	cmp	r0, #2
 800457a:	d9f6      	bls.n	800456a <HAL_RCC_OscConfig+0x4ae>
 800457c:	e620      	b.n	80041c0 <HAL_RCC_OscConfig+0x104>
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	fffffeff 	.word	0xfffffeff
 8004584:	fffffbff 	.word	0xfffffbff
 8004588:	00001388 	.word	0x00001388
 800458c:	efffffff 	.word	0xefffffff
 8004590:	40021000 	.word	0x40021000
 8004594:	40010000 	.word	0x40010000
 8004598:	ffffdfff 	.word	0xffffdfff
 800459c:	feffffff 	.word	0xfeffffff
 80045a0:	ff02ffff 	.word	0xff02ffff

080045a4 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 80045a4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80045a6:	4b18      	ldr	r3, [pc, #96]	; (8004608 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80045a8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80045aa:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80045ac:	400a      	ands	r2, r1
 80045ae:	2a08      	cmp	r2, #8
 80045b0:	d026      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x5c>
 80045b2:	2a0c      	cmp	r2, #12
 80045b4:	d006      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x20>
 80045b6:	2a04      	cmp	r2, #4
 80045b8:	d11a      	bne.n	80045f0 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	06db      	lsls	r3, r3, #27
 80045be:	d421      	bmi.n	8004604 <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 80045c0:	4812      	ldr	r0, [pc, #72]	; (800460c <HAL_RCC_GetSysClockFreq+0x68>)
}
 80045c2:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80045c4:	028a      	lsls	r2, r1, #10
 80045c6:	4812      	ldr	r0, [pc, #72]	; (8004610 <HAL_RCC_GetSysClockFreq+0x6c>)
 80045c8:	0f12      	lsrs	r2, r2, #28
 80045ca:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 80045cc:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ce:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 80045d0:	0f89      	lsrs	r1, r1, #30
 80045d2:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045d4:	03c0      	lsls	r0, r0, #15
 80045d6:	d504      	bpl.n	80045e2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80045d8:	480e      	ldr	r0, [pc, #56]	; (8004614 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80045da:	4350      	muls	r0, r2
 80045dc:	f7fb fd9e 	bl	800011c <__udivsi3>
 80045e0:	e7ef      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	06db      	lsls	r3, r3, #27
 80045e6:	d501      	bpl.n	80045ec <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80045e8:	480b      	ldr	r0, [pc, #44]	; (8004618 <HAL_RCC_GetSysClockFreq+0x74>)
 80045ea:	e7f6      	b.n	80045da <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 80045ec:	4807      	ldr	r0, [pc, #28]	; (800460c <HAL_RCC_GetSysClockFreq+0x68>)
 80045ee:	e7f4      	b.n	80045da <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 80045f0:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80045f2:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 80045f4:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 80045fa:	3301      	adds	r3, #1
 80045fc:	4098      	lsls	r0, r3
 80045fe:	e7e0      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8004600:	4804      	ldr	r0, [pc, #16]	; (8004614 <HAL_RCC_GetSysClockFreq+0x70>)
 8004602:	e7de      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8004604:	4804      	ldr	r0, [pc, #16]	; (8004618 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8004606:	e7dc      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x1e>
 8004608:	40021000 	.word	0x40021000
 800460c:	00f42400 	.word	0x00f42400
 8004610:	08007f18 	.word	0x08007f18
 8004614:	007a1200 	.word	0x007a1200
 8004618:	003d0900 	.word	0x003d0900

0800461c <HAL_RCC_ClockConfig>:
{
 800461c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800461e:	2201      	movs	r2, #1
 8004620:	4c53      	ldr	r4, [pc, #332]	; (8004770 <HAL_RCC_ClockConfig+0x154>)
{
 8004622:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004624:	6823      	ldr	r3, [r4, #0]
{
 8004626:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004628:	4013      	ands	r3, r2
 800462a:	428b      	cmp	r3, r1
 800462c:	d328      	bcc.n	8004680 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462e:	6832      	ldr	r2, [r6, #0]
 8004630:	0793      	lsls	r3, r2, #30
 8004632:	d431      	bmi.n	8004698 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004634:	07d3      	lsls	r3, r2, #31
 8004636:	d437      	bmi.n	80046a8 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004638:	2301      	movs	r3, #1
 800463a:	6822      	ldr	r2, [r4, #0]
 800463c:	9901      	ldr	r1, [sp, #4]
 800463e:	401a      	ands	r2, r3
 8004640:	4291      	cmp	r1, r2
 8004642:	d200      	bcs.n	8004646 <HAL_RCC_ClockConfig+0x2a>
 8004644:	e085      	b.n	8004752 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004646:	6832      	ldr	r2, [r6, #0]
 8004648:	4c4a      	ldr	r4, [pc, #296]	; (8004774 <HAL_RCC_ClockConfig+0x158>)
 800464a:	0753      	lsls	r3, r2, #29
 800464c:	d500      	bpl.n	8004650 <HAL_RCC_ClockConfig+0x34>
 800464e:	e087      	b.n	8004760 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004650:	0713      	lsls	r3, r2, #28
 8004652:	d506      	bpl.n	8004662 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004654:	68e2      	ldr	r2, [r4, #12]
 8004656:	6933      	ldr	r3, [r6, #16]
 8004658:	4947      	ldr	r1, [pc, #284]	; (8004778 <HAL_RCC_ClockConfig+0x15c>)
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	400a      	ands	r2, r1
 800465e:	4313      	orrs	r3, r2
 8004660:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004662:	f7ff ff9f 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	4a44      	ldr	r2, [pc, #272]	; (800477c <HAL_RCC_ClockConfig+0x160>)
 800466a:	061b      	lsls	r3, r3, #24
 800466c:	0f1b      	lsrs	r3, r3, #28
 800466e:	5cd3      	ldrb	r3, [r2, r3]
 8004670:	40d8      	lsrs	r0, r3
 8004672:	4b43      	ldr	r3, [pc, #268]	; (8004780 <HAL_RCC_ClockConfig+0x164>)
 8004674:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004676:	2003      	movs	r0, #3
 8004678:	f002 fb0a 	bl	8006c90 <HAL_InitTick>
  return HAL_OK;
 800467c:	2000      	movs	r0, #0
 800467e:	e00a      	b.n	8004696 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	9901      	ldr	r1, [sp, #4]
 8004684:	4393      	bics	r3, r2
 8004686:	430b      	orrs	r3, r1
 8004688:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	4013      	ands	r3, r2
 800468e:	9a01      	ldr	r2, [sp, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d0cc      	beq.n	800462e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8004694:	2001      	movs	r0, #1
}
 8004696:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004698:	20f0      	movs	r0, #240	; 0xf0
 800469a:	4936      	ldr	r1, [pc, #216]	; (8004774 <HAL_RCC_ClockConfig+0x158>)
 800469c:	68cb      	ldr	r3, [r1, #12]
 800469e:	4383      	bics	r3, r0
 80046a0:	68b0      	ldr	r0, [r6, #8]
 80046a2:	4303      	orrs	r3, r0
 80046a4:	60cb      	str	r3, [r1, #12]
 80046a6:	e7c5      	b.n	8004634 <HAL_RCC_ClockConfig+0x18>
 80046a8:	4d32      	ldr	r5, [pc, #200]	; (8004774 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046aa:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ac:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ae:	2a02      	cmp	r2, #2
 80046b0:	d119      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	039b      	lsls	r3, r3, #14
 80046b4:	d5ee      	bpl.n	8004694 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b6:	2103      	movs	r1, #3
 80046b8:	68eb      	ldr	r3, [r5, #12]
 80046ba:	438b      	bics	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80046c0:	f7ff f8b2 	bl	8003828 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80046c6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d119      	bne.n	8004700 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046cc:	220c      	movs	r2, #12
 80046ce:	68eb      	ldr	r3, [r5, #12]
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d0b0      	beq.n	8004638 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d6:	f7ff f8a7 	bl	8003828 <HAL_GetTick>
 80046da:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <HAL_RCC_ClockConfig+0x168>)
 80046dc:	1bc0      	subs	r0, r0, r7
 80046de:	4298      	cmp	r0, r3
 80046e0:	d9f4      	bls.n	80046cc <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80046e2:	2003      	movs	r0, #3
 80046e4:	e7d7      	b.n	8004696 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e6:	2a03      	cmp	r2, #3
 80046e8:	d102      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ea:	019b      	lsls	r3, r3, #6
 80046ec:	d4e3      	bmi.n	80046b6 <HAL_RCC_ClockConfig+0x9a>
 80046ee:	e7d1      	b.n	8004694 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046f0:	2a01      	cmp	r2, #1
 80046f2:	d102      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	075b      	lsls	r3, r3, #29
 80046f6:	d4de      	bmi.n	80046b6 <HAL_RCC_ClockConfig+0x9a>
 80046f8:	e7cc      	b.n	8004694 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80046fa:	059b      	lsls	r3, r3, #22
 80046fc:	d4db      	bmi.n	80046b6 <HAL_RCC_ClockConfig+0x9a>
 80046fe:	e7c9      	b.n	8004694 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004700:	2b03      	cmp	r3, #3
 8004702:	d10c      	bne.n	800471e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004704:	220c      	movs	r2, #12
 8004706:	68eb      	ldr	r3, [r5, #12]
 8004708:	4013      	ands	r3, r2
 800470a:	4293      	cmp	r3, r2
 800470c:	d100      	bne.n	8004710 <HAL_RCC_ClockConfig+0xf4>
 800470e:	e793      	b.n	8004638 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004710:	f7ff f88a 	bl	8003828 <HAL_GetTick>
 8004714:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_RCC_ClockConfig+0x168>)
 8004716:	1bc0      	subs	r0, r0, r7
 8004718:	4298      	cmp	r0, r3
 800471a:	d9f3      	bls.n	8004704 <HAL_RCC_ClockConfig+0xe8>
 800471c:	e7e1      	b.n	80046e2 <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800471e:	2b01      	cmp	r3, #1
 8004720:	d011      	beq.n	8004746 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004722:	220c      	movs	r2, #12
 8004724:	68eb      	ldr	r3, [r5, #12]
 8004726:	4213      	tst	r3, r2
 8004728:	d100      	bne.n	800472c <HAL_RCC_ClockConfig+0x110>
 800472a:	e785      	b.n	8004638 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472c:	f7ff f87c 	bl	8003828 <HAL_GetTick>
 8004730:	4b14      	ldr	r3, [pc, #80]	; (8004784 <HAL_RCC_ClockConfig+0x168>)
 8004732:	1bc0      	subs	r0, r0, r7
 8004734:	4298      	cmp	r0, r3
 8004736:	d9f4      	bls.n	8004722 <HAL_RCC_ClockConfig+0x106>
 8004738:	e7d3      	b.n	80046e2 <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800473a:	f7ff f875 	bl	8003828 <HAL_GetTick>
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <HAL_RCC_ClockConfig+0x168>)
 8004740:	1bc0      	subs	r0, r0, r7
 8004742:	4298      	cmp	r0, r3
 8004744:	d8cd      	bhi.n	80046e2 <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004746:	220c      	movs	r2, #12
 8004748:	68eb      	ldr	r3, [r5, #12]
 800474a:	4013      	ands	r3, r2
 800474c:	2b04      	cmp	r3, #4
 800474e:	d1f4      	bne.n	800473a <HAL_RCC_ClockConfig+0x11e>
 8004750:	e772      	b.n	8004638 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	439a      	bics	r2, r3
 8004756:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004758:	6822      	ldr	r2, [r4, #0]
 800475a:	421a      	tst	r2, r3
 800475c:	d19a      	bne.n	8004694 <HAL_RCC_ClockConfig+0x78>
 800475e:	e772      	b.n	8004646 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004760:	68e3      	ldr	r3, [r4, #12]
 8004762:	4909      	ldr	r1, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x16c>)
 8004764:	400b      	ands	r3, r1
 8004766:	68f1      	ldr	r1, [r6, #12]
 8004768:	430b      	orrs	r3, r1
 800476a:	60e3      	str	r3, [r4, #12]
 800476c:	e770      	b.n	8004650 <HAL_RCC_ClockConfig+0x34>
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	40022000 	.word	0x40022000
 8004774:	40021000 	.word	0x40021000
 8004778:	ffffc7ff 	.word	0xffffc7ff
 800477c:	08007f21 	.word	0x08007f21
 8004780:	20000030 	.word	0x20000030
 8004784:	00001388 	.word	0x00001388
 8004788:	fffff8ff 	.word	0xfffff8ff

0800478c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800478e:	4a05      	ldr	r2, [pc, #20]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	055b      	lsls	r3, r3, #21
 8004794:	0f5b      	lsrs	r3, r3, #29
 8004796:	5cd3      	ldrb	r3, [r2, r3]
 8004798:	4a03      	ldr	r2, [pc, #12]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800479a:	6810      	ldr	r0, [r2, #0]
 800479c:	40d8      	lsrs	r0, r3
}    
 800479e:	4770      	bx	lr
 80047a0:	40021000 	.word	0x40021000
 80047a4:	08007f31 	.word	0x08007f31
 80047a8:	20000030 	.word	0x20000030

080047ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80047ac:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80047ae:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	049b      	lsls	r3, r3, #18
 80047b4:	0f5b      	lsrs	r3, r3, #29
 80047b6:	5cd3      	ldrb	r3, [r2, r3]
 80047b8:	4a03      	ldr	r2, [pc, #12]	; (80047c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80047ba:	6810      	ldr	r0, [r2, #0]
 80047bc:	40d8      	lsrs	r0, r3
} 
 80047be:	4770      	bx	lr
 80047c0:	40021000 	.word	0x40021000
 80047c4:	08007f31 	.word	0x08007f31
 80047c8:	20000030 	.word	0x20000030

080047cc <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80047cc:	2382      	movs	r3, #130	; 0x82
{
 80047ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80047d0:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80047d2:	011b      	lsls	r3, r3, #4
{
 80047d4:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80047d6:	421a      	tst	r2, r3
 80047d8:	d048      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047da:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80047dc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047de:	4c65      	ldr	r4, [pc, #404]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80047e0:	055b      	lsls	r3, r3, #21
 80047e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80047e4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	421a      	tst	r2, r3
 80047e8:	d104      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047ec:	4313      	orrs	r3, r2
 80047ee:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80047f0:	2301      	movs	r3, #1
 80047f2:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	2780      	movs	r7, #128	; 0x80
 80047f6:	4e60      	ldr	r6, [pc, #384]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047f8:	007f      	lsls	r7, r7, #1
 80047fa:	6833      	ldr	r3, [r6, #0]
 80047fc:	423b      	tst	r3, r7
 80047fe:	d077      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004800:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004802:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004804:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	0392      	lsls	r2, r2, #14
 800480a:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800480c:	4010      	ands	r0, r2
 800480e:	4283      	cmp	r3, r0
 8004810:	d103      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004812:	68a8      	ldr	r0, [r5, #8]
 8004814:	4002      	ands	r2, r0
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800481a:	23c0      	movs	r3, #192	; 0xc0
 800481c:	000a      	movs	r2, r1
 800481e:	029b      	lsls	r3, r3, #10
 8004820:	401a      	ands	r2, r3
 8004822:	429a      	cmp	r2, r3
 8004824:	d103      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004826:	6823      	ldr	r3, [r4, #0]
      {
        /* To update HSE divider, first switch-OFF HSE clock oscillator*/
        return HAL_ERROR; 
 8004828:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800482a:	039b      	lsls	r3, r3, #14
 800482c:	d471      	bmi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x146>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800482e:	22c0      	movs	r2, #192	; 0xc0
 8004830:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004832:	0292      	lsls	r2, r2, #10
 8004834:	4013      	ands	r3, r2
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004836:	d000      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004838:	e06c      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800483a:	6869      	ldr	r1, [r5, #4]
 800483c:	23c0      	movs	r3, #192	; 0xc0
 800483e:	000a      	movs	r2, r1
 8004840:	029b      	lsls	r3, r3, #10
 8004842:	401a      	ands	r2, r3
 8004844:	429a      	cmp	r2, r3
 8004846:	d107      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	484c      	ldr	r0, [pc, #304]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800484c:	4003      	ands	r3, r0
 800484e:	20c0      	movs	r0, #192	; 0xc0
 8004850:	0380      	lsls	r0, r0, #14
 8004852:	4001      	ands	r1, r0
 8004854:	430b      	orrs	r3, r1
 8004856:	6023      	str	r3, [r4, #0]
 8004858:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800485a:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800485c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800485e:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004860:	2b01      	cmp	r3, #1
 8004862:	d103      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004866:	4a46      	ldr	r2, [pc, #280]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004868:	4013      	ands	r3, r2
 800486a:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	07da      	lsls	r2, r3, #31
 8004870:	d506      	bpl.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004872:	2003      	movs	r0, #3
 8004874:	493f      	ldr	r1, [pc, #252]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004876:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004878:	4382      	bics	r2, r0
 800487a:	68e8      	ldr	r0, [r5, #12]
 800487c:	4302      	orrs	r2, r0
 800487e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004880:	079a      	lsls	r2, r3, #30
 8004882:	d506      	bpl.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004884:	200c      	movs	r0, #12
 8004886:	493b      	ldr	r1, [pc, #236]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004888:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800488a:	4382      	bics	r2, r0
 800488c:	6928      	ldr	r0, [r5, #16]
 800488e:	4302      	orrs	r2, r0
 8004890:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004892:	075a      	lsls	r2, r3, #29
 8004894:	d506      	bpl.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004896:	4937      	ldr	r1, [pc, #220]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004898:	483a      	ldr	r0, [pc, #232]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800489c:	4002      	ands	r2, r0
 800489e:	6968      	ldr	r0, [r5, #20]
 80048a0:	4302      	orrs	r2, r0
 80048a2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048a4:	071a      	lsls	r2, r3, #28
 80048a6:	d506      	bpl.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048a8:	4932      	ldr	r1, [pc, #200]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80048aa:	4837      	ldr	r0, [pc, #220]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80048ac:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80048ae:	4002      	ands	r2, r0
 80048b0:	69a8      	ldr	r0, [r5, #24]
 80048b2:	4302      	orrs	r2, r0
 80048b4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048b6:	05da      	lsls	r2, r3, #23
 80048b8:	d506      	bpl.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ba:	492e      	ldr	r1, [pc, #184]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80048bc:	4833      	ldr	r0, [pc, #204]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048be:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80048c0:	4002      	ands	r2, r0
 80048c2:	69e8      	ldr	r0, [r5, #28]
 80048c4:	4302      	orrs	r2, r0
 80048c6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048c8:	065a      	lsls	r2, r3, #25
 80048ca:	d506      	bpl.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048cc:	4929      	ldr	r1, [pc, #164]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80048ce:	4830      	ldr	r0, [pc, #192]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048d0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80048d2:	4002      	ands	r2, r0
 80048d4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80048d6:	4302      	orrs	r2, r0
 80048d8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80048da:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	d518      	bpl.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80048e0:	4a24      	ldr	r2, [pc, #144]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80048e2:	492c      	ldr	r1, [pc, #176]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80048e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80048e6:	400b      	ands	r3, r1
 80048e8:	6a29      	ldr	r1, [r5, #32]
 80048ea:	430b      	orrs	r3, r1
 80048ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048ee:	e010      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048f0:	6833      	ldr	r3, [r6, #0]
 80048f2:	433b      	orrs	r3, r7
 80048f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80048f6:	f7fe ff97 	bl	8003828 <HAL_GetTick>
 80048fa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	6833      	ldr	r3, [r6, #0]
 80048fe:	423b      	tst	r3, r7
 8004900:	d000      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8004902:	e77d      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004904:	f7fe ff90 	bl	8003828 <HAL_GetTick>
 8004908:	9b01      	ldr	r3, [sp, #4]
 800490a:	1ac0      	subs	r0, r0, r3
 800490c:	2864      	cmp	r0, #100	; 0x64
 800490e:	d9f5      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 8004910:	2003      	movs	r0, #3
}
 8004912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004914:	4011      	ands	r1, r2
 8004916:	428b      	cmp	r3, r1
 8004918:	d002      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800491a:	6829      	ldr	r1, [r5, #0]
 800491c:	0689      	lsls	r1, r1, #26
 800491e:	d408      	bmi.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004920:	68a9      	ldr	r1, [r5, #8]
 8004922:	400a      	ands	r2, r1
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004928:	e787      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	051b      	lsls	r3, r3, #20
 800492e:	d400      	bmi.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004930:	e783      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004932:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004934:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004936:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004938:	0312      	lsls	r2, r2, #12
 800493a:	4302      	orrs	r2, r0
 800493c:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800493e:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004940:	4b12      	ldr	r3, [pc, #72]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004942:	4815      	ldr	r0, [pc, #84]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004944:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004946:	4002      	ands	r2, r0
 8004948:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800494a:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800494c:	05cb      	lsls	r3, r1, #23
 800494e:	d400      	bmi.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004950:	e773      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 8004952:	f7fe ff69 	bl	8003828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004956:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004958:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495a:	00bf      	lsls	r7, r7, #2
 800495c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800495e:	423b      	tst	r3, r7
 8004960:	d000      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004962:	e76a      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004964:	f7fe ff60 	bl	8003828 <HAL_GetTick>
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496a:	1b80      	subs	r0, r0, r6
 800496c:	4298      	cmp	r0, r3
 800496e:	d9f5      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004970:	e7ce      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	40021000 	.word	0x40021000
 8004978:	40007000 	.word	0x40007000
 800497c:	ffcfffff 	.word	0xffcfffff
 8004980:	efffffff 	.word	0xefffffff
 8004984:	fffff3ff 	.word	0xfffff3ff
 8004988:	ffffcfff 	.word	0xffffcfff
 800498c:	fffcffff 	.word	0xfffcffff
 8004990:	fbffffff 	.word	0xfbffffff
 8004994:	fff3ffff 	.word	0xfff3ffff
 8004998:	fff7ffff 	.word	0xfff7ffff
 800499c:	00001388 	.word	0x00001388

080049a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049a0:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80049a2:	2810      	cmp	r0, #16
 80049a4:	d100      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 80049a6:	e0cd      	b.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80049a8:	d81e      	bhi.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
 80049aa:	2802      	cmp	r0, #2
 80049ac:	d100      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80049ae:	e09e      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
 80049b0:	d804      	bhi.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 80049b2:	2801      	cmp	r0, #1
 80049b4:	d100      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80049b6:	e081      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 80049b8:	2000      	movs	r0, #0
 80049ba:	e03b      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 80049bc:	2804      	cmp	r0, #4
 80049be:	d100      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 80049c0:	e0a6      	b.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80049c2:	2808      	cmp	r0, #8
 80049c4:	d1f8      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      break;
    }    
  case RCC_PERIPHCLK_I2C1:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80049c6:	21c0      	movs	r1, #192	; 0xc0
 80049c8:	4a6a      	ldr	r2, [pc, #424]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 80049ca:	0189      	lsls	r1, r1, #6
 80049cc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80049ce:	400b      	ands	r3, r1

      /* Check if I2C1 clock selection is PCLK1 */
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80049d0:	d100      	bne.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 80049d2:	e091      	b.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C1 clock selection is HSI */
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	0189      	lsls	r1, r1, #6
 80049d8:	428b      	cmp	r3, r1
 80049da:	d100      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80049dc:	e078      	b.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C1 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	0152      	lsls	r2, r2, #5
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d1e8      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80049e6:	e079      	b.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  switch (PeriphClk)
 80049e8:	2840      	cmp	r0, #64	; 0x40
 80049ea:	d03f      	beq.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80049ec:	d80f      	bhi.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 80049ee:	2820      	cmp	r0, #32
 80049f0:	d1e2      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80049f2:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80049f4:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 80049f6:	495f      	ldr	r1, [pc, #380]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80049f8:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 80049fa:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80049fc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80049fe:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004a00:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8004a02:	4282      	cmp	r2, r0
 8004a04:	d10d      	bne.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8004a06:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 8004a08:	0fc0      	lsrs	r0, r0, #31
 8004a0a:	03c0      	lsls	r0, r0, #15
 8004a0c:	e012      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	4298      	cmp	r0, r3
 8004a14:	d100      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8004a16:	e09d      	b.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	4298      	cmp	r0, r3
 8004a1e:	d0e8      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004a20:	e7ca      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8004a22:	2480      	movs	r4, #128	; 0x80
 8004a24:	02a4      	lsls	r4, r4, #10
 8004a26:	42a2      	cmp	r2, r4
 8004a28:	d105      	bne.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8004a2a:	2002      	movs	r0, #2
 8004a2c:	4003      	ands	r3, r0
            frequency = 0U;
 8004a2e:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8004a30:	d000      	beq.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = LSI_VALUE;
 8004a32:	4851      	ldr	r0, [pc, #324]	; (8004b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
    {
      break;
    }
  }
  return(frequency);
}
 8004a34:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 8004a36:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a38:	42aa      	cmp	r2, r5
 8004a3a:	d1fb      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8004a3c:	680b      	ldr	r3, [r1, #0]
 8004a3e:	4223      	tst	r3, r4
 8004a40:	d0f8      	beq.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8004a42:	22c0      	movs	r2, #192	; 0xc0
 8004a44:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 8004a46:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8004a48:	0392      	lsls	r2, r2, #14
 8004a4a:	4013      	ands	r3, r2
        switch (clkprediv)
 8004a4c:	0389      	lsls	r1, r1, #14
 8004a4e:	428b      	cmp	r3, r1
 8004a50:	d008      	beq.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d100      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8004a56:	e08a      	b.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004a58:	2280      	movs	r2, #128	; 0x80
 8004a5a:	0352      	lsls	r2, r2, #13
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d103      	bne.n	8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
            frequency = HSE_VALUE / 4U;
 8004a60:	4846      	ldr	r0, [pc, #280]	; (8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
            break;
 8004a62:	e7e7      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 8U;
 8004a64:	4846      	ldr	r0, [pc, #280]	; (8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8004a66:	e7e5      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSE_VALUE / 2U;
 8004a68:	4846      	ldr	r0, [pc, #280]	; (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
            break;
 8004a6a:	e7e3      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004a6c:	2080      	movs	r0, #128	; 0x80
 8004a6e:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8004a70:	04c0      	lsls	r0, r0, #19
 8004a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a74:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8004a76:	d11a      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	0192      	lsls	r2, r2, #6
 8004a7c:	d5da      	bpl.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8004a7e:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8004a80:	4841      	ldr	r0, [pc, #260]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8004a82:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8004a84:	0292      	lsls	r2, r2, #10
 8004a86:	0f12      	lsrs	r2, r2, #28
 8004a88:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8004a8a:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8004a8c:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8004a8e:	0f89      	lsrs	r1, r1, #30
 8004a90:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8004a92:	03d2      	lsls	r2, r2, #15
 8004a94:	d407      	bmi.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x106>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	06db      	lsls	r3, r3, #27
 8004a9a:	d406      	bmi.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
                    pllvco =  HSI_VALUE;
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
            pllvco = (pllvco * pllmul);
 8004a9e:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 8004aa0:	f7fb fb3c 	bl	800011c <__udivsi3>
 8004aa4:	e7c6      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
                pllvco = HSE_VALUE;
 8004aa6:	4b3a      	ldr	r3, [pc, #232]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8004aa8:	e7f9      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
                    pllvco =  (HSI_VALUE >> 2U);
 8004aaa:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8004aac:	e7f7      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8004aae:	2202      	movs	r2, #2
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	4013      	ands	r3, r2
            frequency = 0U;
 8004ab4:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8004ab6:	d0bd      	beq.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = HSI48_VALUE;
 8004ab8:	4836      	ldr	r0, [pc, #216]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004aba:	e7bb      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004abc:	2103      	movs	r1, #3
 8004abe:	4a2d      	ldr	r2, [pc, #180]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8004ac0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004ac2:	400b      	ands	r3, r1
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004ac4:	d102      	bne.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8004ac6:	f7ff fe71 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8004aca:	e7b3      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d103      	bne.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004ad0:	6813      	ldr	r3, [r2, #0]
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	e027      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d102      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        frequency = HAL_RCC_GetSysClockFreq();
 8004adc:	f7ff fd62 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8004ae0:	e7a8      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
            frequency = 0U;
 8004ae2:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d1a5      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8004ae8:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8004aea:	0580      	lsls	r0, r0, #22
 8004aec:	e78c      	b.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004aee:	210c      	movs	r1, #12
 8004af0:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8004af2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004af4:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004af6:	d102      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7ff fe48 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8004afc:	e79a      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d0e6      	beq.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d0ea      	beq.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 8004b06:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d000      	beq.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8004b0c:	e792      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8004b0e:	e7eb      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004b10:	21c0      	movs	r1, #192	; 0xc0
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8004b14:	0109      	lsls	r1, r1, #4
 8004b16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004b18:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8004b1a:	d0ed      	beq.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004b1c:	2480      	movs	r4, #128	; 0x80
 8004b1e:	0124      	lsls	r4, r4, #4
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	d106      	bne.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x192>
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	4003      	ands	r3, r0
            frequency = 0U;
 8004b28:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004b2a:	d100      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8004b2c:	e782      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = HSI_VALUE;
 8004b2e:	4817      	ldr	r0, [pc, #92]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>)
 8004b30:	e780      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004b32:	2080      	movs	r0, #128	; 0x80
 8004b34:	00c0      	lsls	r0, r0, #3
 8004b36:	4283      	cmp	r3, r0
 8004b38:	d0d0      	beq.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
            frequency = 0U;
 8004b3a:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	d000      	beq.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004b40:	e778      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8004b42:	e7d1      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8004b46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	03db      	lsls	r3, r3, #15
 8004b4c:	4018      	ands	r0, r3
 8004b4e:	d100      	bne.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8004b50:	e770      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8004b52:	e7d1      	b.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004b54:	21c0      	movs	r1, #192	; 0xc0
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8004b58:	0289      	lsls	r1, r1, #10
 8004b5a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004b5c:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8004b5e:	d0cb      	beq.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004b60:	2180      	movs	r1, #128	; 0x80
 8004b62:	0289      	lsls	r1, r1, #10
 8004b64:	428b      	cmp	r3, r1
 8004b66:	d0b3      	beq.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8004b68:	2280      	movs	r2, #128	; 0x80
 8004b6a:	0252      	lsls	r2, r2, #9
 8004b6c:	e739      	b.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
            frequency = HSE_VALUE / 16U;
 8004b6e:	480a      	ldr	r0, [pc, #40]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004b70:	e760      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	40021000 	.word	0x40021000
 8004b78:	00009088 	.word	0x00009088
 8004b7c:	001e8480 	.word	0x001e8480
 8004b80:	000f4240 	.word	0x000f4240
 8004b84:	003d0900 	.word	0x003d0900
 8004b88:	08007f18 	.word	0x08007f18
 8004b8c:	00f42400 	.word	0x00f42400
 8004b90:	007a1200 	.word	0x007a1200
 8004b94:	02dc6c00 	.word	0x02dc6c00
 8004b98:	0007a120 	.word	0x0007a120

08004b9c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b9e:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ba0:	1c45      	adds	r5, r0, #1
 8004ba2:	7feb      	ldrb	r3, [r5, #31]
{
 8004ba4:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004ba6:	0038      	movs	r0, r7
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d024      	beq.n	8004bf6 <HAL_RTC_DeactivateAlarm+0x5a>
 8004bac:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bae:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 8004bb0:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bb2:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bb4:	19e6      	adds	r6, r4, r7
 8004bb6:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004bba:	3a77      	subs	r2, #119	; 0x77
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8004bbe:	32ad      	adds	r2, #173	; 0xad
 8004bc0:	4291      	cmp	r1, r2
 8004bc2:	d128      	bne.n	8004c16 <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	4921      	ldr	r1, [pc, #132]	; (8004c4c <HAL_RTC_DeactivateAlarm+0xb0>)
 8004bc8:	400a      	ands	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	4920      	ldr	r1, [pc, #128]	; (8004c50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004bd4:	f7fe fe28 	bl	8003828 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004bd8:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 8004bda:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	68df      	ldr	r7, [r3, #12]
 8004be2:	9b01      	ldr	r3, [sp, #4]
 8004be4:	401f      	ands	r7, r3
 8004be6:	d007      	beq.n	8004bf8 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be8:	22ff      	movs	r2, #255	; 0xff
 8004bea:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bec:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8004bf4:	77e8      	strb	r0, [r5, #31]

  return HAL_OK; 
}
 8004bf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bf8:	f7fe fe16 	bl	8003828 <HAL_GetTick>
 8004bfc:	9b00      	ldr	r3, [sp, #0]
 8004bfe:	1ac0      	subs	r0, r0, r3
 8004c00:	23fa      	movs	r3, #250	; 0xfa
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4298      	cmp	r0, r3
 8004c06:	d9ea      	bls.n	8004bde <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c08:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c0a:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c10:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004c12:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 8004c14:	e7ef      	b.n	8004bf6 <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	490e      	ldr	r1, [pc, #56]	; (8004c54 <HAL_RTC_DeactivateAlarm+0xb8>)
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	490d      	ldr	r1, [pc, #52]	; (8004c58 <HAL_RTC_DeactivateAlarm+0xbc>)
 8004c22:	400a      	ands	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004c26:	f7fe fdff 	bl	8003828 <HAL_GetTick>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004c2a:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 8004c2c:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	68df      	ldr	r7, [r3, #12]
 8004c32:	9b01      	ldr	r3, [sp, #4]
 8004c34:	401f      	ands	r7, r3
 8004c36:	d1d7      	bne.n	8004be8 <HAL_RTC_DeactivateAlarm+0x4c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c38:	f7fe fdf6 	bl	8003828 <HAL_GetTick>
 8004c3c:	9b00      	ldr	r3, [sp, #0]
 8004c3e:	1ac0      	subs	r0, r0, r3
 8004c40:	23fa      	movs	r3, #250	; 0xfa
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4298      	cmp	r0, r3
 8004c46:	d9f2      	bls.n	8004c2e <HAL_RTC_DeactivateAlarm+0x92>
 8004c48:	e7de      	b.n	8004c08 <HAL_RTC_DeactivateAlarm+0x6c>
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	fffffeff 	.word	0xfffffeff
 8004c50:	ffffefff 	.word	0xffffefff
 8004c54:	fffffdff 	.word	0xfffffdff
 8004c58:	ffffdfff 	.word	0xffffdfff

08004c5c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c5c:	21a0      	movs	r1, #160	; 0xa0
 8004c5e:	6802      	ldr	r2, [r0, #0]
{
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c62:	68d3      	ldr	r3, [r2, #12]
{
 8004c64:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c66:	438b      	bics	r3, r1
 8004c68:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004c6a:	f7fe fddd 	bl	8003828 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c6e:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004c70:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c72:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c74:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	422b      	tst	r3, r5
 8004c7c:	d001      	beq.n	8004c82 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004c7e:	2000      	movs	r0, #0
}
 8004c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c82:	f7fe fdd1 	bl	8003828 <HAL_GetTick>
 8004c86:	1b80      	subs	r0, r0, r6
 8004c88:	42b8      	cmp	r0, r7
 8004c8a:	d9f4      	bls.n	8004c76 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004c8c:	2003      	movs	r0, #3
 8004c8e:	e7f7      	b.n	8004c80 <HAL_RTC_WaitForSynchro+0x24>

08004c90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c92:	2440      	movs	r4, #64	; 0x40
 8004c94:	6803      	ldr	r3, [r0, #0]
{
 8004c96:	0005      	movs	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	4222      	tst	r2, r4
 8004c9c:	d001      	beq.n	8004ca2 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004c9e:	2000      	movs	r0, #0
}
 8004ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	4252      	negs	r2, r2
 8004ca6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004ca8:	f7fe fdbe 	bl	8003828 <HAL_GetTick>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cac:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004cae:	0006      	movs	r6, r0
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cb0:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	4223      	tst	r3, r4
 8004cb8:	d1f1      	bne.n	8004c9e <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cba:	f7fe fdb5 	bl	8003828 <HAL_GetTick>
 8004cbe:	1b80      	subs	r0, r0, r6
 8004cc0:	42b8      	cmp	r0, r7
 8004cc2:	d9f6      	bls.n	8004cb2 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8004cc4:	2003      	movs	r0, #3
 8004cc6:	e7eb      	b.n	8004ca0 <RTC_EnterInitMode+0x10>

08004cc8 <HAL_RTC_Init>:
{
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	0004      	movs	r4, r0
     return HAL_ERROR;
 8004ccc:	2001      	movs	r0, #1
  if(hrtc == NULL)
 8004cce:	2c00      	cmp	r4, #0
 8004cd0:	d01b      	beq.n	8004d0a <HAL_RTC_Init+0x42>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004cd2:	1ca5      	adds	r5, r4, #2
 8004cd4:	7feb      	ldrb	r3, [r5, #31]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <HAL_RTC_Init+0x1e>
    hrtc->Lock = HAL_UNLOCKED;
 8004cdc:	1822      	adds	r2, r4, r0
 8004cde:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8004ce0:	0020      	movs	r0, r4
 8004ce2:	f001 fff5 	bl	8006cd0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ce6:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ce8:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cea:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cec:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cee:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cf2:	3a77      	subs	r2, #119	; 0x77
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cf6:	f7ff ffcb 	bl	8004c90 <RTC_EnterInitMode>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d00:	22ff      	movs	r2, #255	; 0xff
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d04:	2304      	movs	r3, #4
    return HAL_ERROR;
 8004d06:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d08:	77eb      	strb	r3, [r5, #31]
}
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	4912      	ldr	r1, [pc, #72]	; (8004d58 <HAL_RTC_Init+0x90>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d10:	6926      	ldr	r6, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d12:	400a      	ands	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d16:	6862      	ldr	r2, [r4, #4]
 8004d18:	6899      	ldr	r1, [r3, #8]
 8004d1a:	4332      	orrs	r2, r6
 8004d1c:	69a6      	ldr	r6, [r4, #24]
 8004d1e:	4332      	orrs	r2, r6
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d24:	68e2      	ldr	r2, [r4, #12]
 8004d26:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d28:	68a2      	ldr	r2, [r4, #8]
 8004d2a:	6919      	ldr	r1, [r3, #16]
 8004d2c:	0412      	lsls	r2, r2, #16
 8004d2e:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d30:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d32:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	438a      	bics	r2, r1
 8004d38:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d3c:	397d      	subs	r1, #125	; 0x7d
 8004d3e:	438a      	bics	r2, r1
 8004d40:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004d42:	69e2      	ldr	r2, [r4, #28]
 8004d44:	6964      	ldr	r4, [r4, #20]
 8004d46:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004d48:	4322      	orrs	r2, r4
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d4e:	22ff      	movs	r2, #255	; 0xff
 8004d50:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004d52:	2301      	movs	r3, #1
 8004d54:	77eb      	strb	r3, [r5, #31]
    return HAL_OK;
 8004d56:	e7d8      	b.n	8004d0a <HAL_RTC_Init+0x42>
 8004d58:	ff8fffbf 	.word	0xff8fffbf

08004d5c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004d5c:	2300      	movs	r3, #0

  while(Value >= 10U)
 8004d5e:	2809      	cmp	r0, #9
 8004d60:	d803      	bhi.n	8004d6a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	4318      	orrs	r0, r3
 8004d66:	b2c0      	uxtb	r0, r0
}
 8004d68:	4770      	bx	lr
    Value -= 10U;
 8004d6a:	380a      	subs	r0, #10
    bcdhigh++;
 8004d6c:	3301      	adds	r3, #1
    Value -= 10U;
 8004d6e:	b2c0      	uxtb	r0, r0
 8004d70:	e7f5      	b.n	8004d5e <RTC_ByteToBcd2+0x2>
	...

08004d74 <HAL_RTC_SetTime>:
{
 8004d74:	2302      	movs	r3, #2
 8004d76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004d78:	1c47      	adds	r7, r0, #1
{
 8004d7a:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004d7c:	7ff9      	ldrb	r1, [r7, #31]
{
 8004d7e:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004d80:	001e      	movs	r6, r3
 8004d82:	2901      	cmp	r1, #1
 8004d84:	d036      	beq.n	8004df4 <HAL_RTC_SetTime+0x80>
 8004d86:	2101      	movs	r1, #1
 8004d88:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d8a:	18c1      	adds	r1, r0, r3
 8004d8c:	77cb      	strb	r3, [r1, #31]
 8004d8e:	9100      	str	r1, [sp, #0]
 8004d90:	2140      	movs	r1, #64	; 0x40
 8004d92:	6803      	ldr	r3, [r0, #0]
 8004d94:	7866      	ldrb	r6, [r4, #1]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	7820      	ldrb	r0, [r4, #0]
 8004d9a:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8004d9c:	2a00      	cmp	r2, #0
 8004d9e:	d12b      	bne.n	8004df8 <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d100      	bne.n	8004da6 <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 8004da4:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004da6:	f7ff ffd9 	bl	8004d5c <RTC_ByteToBcd2>
 8004daa:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004dac:	0030      	movs	r0, r6
 8004dae:	f7ff ffd5 	bl	8004d5c <RTC_ByteToBcd2>
 8004db2:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004db4:	78a0      	ldrb	r0, [r4, #2]
 8004db6:	f7ff ffd1 	bl	8004d5c <RTC_ByteToBcd2>
 8004dba:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004dbc:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004dbe:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004dc0:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004dc2:	4318      	orrs	r0, r3
 8004dc4:	9b01      	ldr	r3, [sp, #4]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	4318      	orrs	r0, r3
 8004dca:	4330      	orrs	r0, r6
 8004dcc:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dce:	22ca      	movs	r2, #202	; 0xca
 8004dd0:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004dd2:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24
 8004dd6:	3a77      	subs	r2, #119	; 0x77
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004dda:	f7ff ff59 	bl	8004c90 <RTC_EnterInitMode>
 8004dde:	682b      	ldr	r3, [r5, #0]
 8004de0:	1e06      	subs	r6, r0, #0
 8004de2:	d016      	beq.n	8004e12 <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004de4:	22ff      	movs	r2, #255	; 0xff
 8004de6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004de8:	2304      	movs	r3, #4
 8004dea:	9a00      	ldr	r2, [sp, #0]
 8004dec:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004dee:	2300      	movs	r3, #0
 8004df0:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004df2:	2601      	movs	r6, #1
}
 8004df4:	0030      	movs	r0, r6
 8004df6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d100      	bne.n	8004dfe <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 8004dfc:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004dfe:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e00:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e02:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 8004e04:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e06:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004e08:	78e0      	ldrb	r0, [r4, #3]
 8004e0a:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e0c:	4306      	orrs	r6, r0
 8004e0e:	9601      	str	r6, [sp, #4]
 8004e10:	e7dd      	b.n	8004dce <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e12:	4815      	ldr	r0, [pc, #84]	; (8004e68 <HAL_RTC_SetTime+0xf4>)
 8004e14:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e16:	4915      	ldr	r1, [pc, #84]	; (8004e6c <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e18:	4002      	ands	r2, r0
 8004e1a:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e1c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e1e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e20:	400a      	ands	r2, r1
 8004e22:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e24:	68e2      	ldr	r2, [r4, #12]
 8004e26:	6899      	ldr	r1, [r3, #8]
 8004e28:	4302      	orrs	r2, r0
 8004e2a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e2c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e2e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	438a      	bics	r2, r1
 8004e34:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	069b      	lsls	r3, r3, #26
 8004e3a:	d40c      	bmi.n	8004e56 <HAL_RTC_SetTime+0xe2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e3c:	0028      	movs	r0, r5
 8004e3e:	f7ff ff0d 	bl	8004c5c <HAL_RTC_WaitForSynchro>
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d007      	beq.n	8004e56 <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e46:	22ff      	movs	r2, #255	; 0xff
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	9a00      	ldr	r2, [sp, #0]
 8004e50:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004e52:	77fe      	strb	r6, [r7, #31]
 8004e54:	e7cd      	b.n	8004df2 <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e56:	22ff      	movs	r2, #255	; 0xff
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	9a00      	ldr	r2, [sp, #0]
 8004e60:	77d3      	strb	r3, [r2, #31]
   __HAL_UNLOCK(hrtc); 
 8004e62:	2300      	movs	r3, #0
 8004e64:	77fb      	strb	r3, [r7, #31]
   return HAL_OK;
 8004e66:	e7c5      	b.n	8004df4 <HAL_RTC_SetTime+0x80>
 8004e68:	007f7f7f 	.word	0x007f7f7f
 8004e6c:	fffbffff 	.word	0xfffbffff

08004e70 <HAL_RTC_SetDate>:
{
 8004e70:	2302      	movs	r3, #2
 8004e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8004e74:	1c47      	adds	r7, r0, #1
{
 8004e76:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 8004e78:	7ff9      	ldrb	r1, [r7, #31]
{
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	0004      	movs	r4, r0
 __HAL_LOCK(hrtc);
 8004e7e:	001e      	movs	r6, r3
 8004e80:	2901      	cmp	r1, #1
 8004e82:	d035      	beq.n	8004ef0 <HAL_RTC_SetDate+0x80>
 8004e84:	2101      	movs	r1, #1
 8004e86:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e88:	18c1      	adds	r1, r0, r3
 8004e8a:	9101      	str	r1, [sp, #4]
 8004e8c:	77cb      	strb	r3, [r1, #31]
 8004e8e:	786b      	ldrb	r3, [r5, #1]
 8004e90:	78e8      	ldrb	r0, [r5, #3]
 8004e92:	78ae      	ldrb	r6, [r5, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	d14e      	bne.n	8004f36 <HAL_RTC_SetDate+0xc6>
 8004e98:	3210      	adds	r2, #16
 8004e9a:	4213      	tst	r3, r2
 8004e9c:	d002      	beq.n	8004ea4 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e9e:	4393      	bics	r3, r2
 8004ea0:	330a      	adds	r3, #10
 8004ea2:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ea4:	f7ff ff5a 	bl	8004d5c <RTC_ByteToBcd2>
 8004ea8:	9002      	str	r0, [sp, #8]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004eaa:	7868      	ldrb	r0, [r5, #1]
 8004eac:	f7ff ff56 	bl	8004d5c <RTC_ByteToBcd2>
 8004eb0:	9003      	str	r0, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004eb2:	0030      	movs	r0, r6
 8004eb4:	f7ff ff52 	bl	8004d5c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004eb8:	9b02      	ldr	r3, [sp, #8]
                 ((uint32_t)sDate->WeekDay << 13U));
 8004eba:	782d      	ldrb	r5, [r5, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ebc:	041e      	lsls	r6, r3, #16
                 ((uint32_t)sDate->WeekDay << 13U));
 8004ebe:	036d      	lsls	r5, r5, #13
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ec0:	9b03      	ldr	r3, [sp, #12]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ec2:	4305      	orrs	r5, r0
 8004ec4:	4335      	orrs	r5, r6
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ec6:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ec8:	22ca      	movs	r2, #202	; 0xca
 8004eca:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ecc:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24
 8004ed0:	3a77      	subs	r2, #119	; 0x77
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ed4:	f7ff fedc 	bl	8004c90 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ed8:	4335      	orrs	r5, r6
 8004eda:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004edc:	1e06      	subs	r6, r0, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ee0:	22ff      	movs	r2, #255	; 0xff
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	9a01      	ldr	r2, [sp, #4]
 8004ee8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004eea:	2300      	movs	r3, #0
 8004eec:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8004eee:	2601      	movs	r6, #1
}
 8004ef0:	0030      	movs	r0, r6
 8004ef2:	b005      	add	sp, #20
 8004ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ef6:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ef8:	4812      	ldr	r0, [pc, #72]	; (8004f44 <HAL_RTC_SetDate+0xd4>)
 8004efa:	4005      	ands	r5, r0
 8004efc:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	438a      	bics	r2, r1
 8004f02:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	069b      	lsls	r3, r3, #26
 8004f08:	d40c      	bmi.n	8004f24 <HAL_RTC_SetDate+0xb4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f0a:	0020      	movs	r0, r4
 8004f0c:	f7ff fea6 	bl	8004c5c <HAL_RTC_WaitForSynchro>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004f14:	22ff      	movs	r2, #255	; 0xff
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f1a:	2304      	movs	r3, #4
 8004f1c:	9a01      	ldr	r2, [sp, #4]
 8004f1e:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8004f20:	77fe      	strb	r6, [r7, #31]
 8004f22:	e7e4      	b.n	8004eee <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f24:	22ff      	movs	r2, #255	; 0xff
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	9a01      	ldr	r2, [sp, #4]
 8004f2e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004f30:	2300      	movs	r3, #0
 8004f32:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8004f34:	e7dc      	b.n	8004ef0 <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f36:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f38:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004f3a:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004f3c:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8004f3e:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004f40:	036d      	lsls	r5, r5, #13
 8004f42:	e7c1      	b.n	8004ec8 <HAL_RTC_SetDate+0x58>
 8004f44:	00ffff3f 	.word	0x00ffff3f

08004f48 <HAL_RTC_SetAlarm_IT>:
{
 8004f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	9300      	str	r3, [sp, #0]
{
 8004f4e:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8004f50:	7fd9      	ldrb	r1, [r3, #31]
 8004f52:	2302      	movs	r3, #2
{
 8004f54:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004f56:	0018      	movs	r0, r3
 8004f58:	2901      	cmp	r1, #1
 8004f5a:	d100      	bne.n	8004f5e <HAL_RTC_SetAlarm_IT+0x16>
 8004f5c:	e08d      	b.n	800507a <HAL_RTC_SetAlarm_IT+0x132>
 8004f5e:	2101      	movs	r1, #1
 8004f60:	1860      	adds	r0, r4, r1
 8004f62:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f64:	18e1      	adds	r1, r4, r3
 8004f66:	77cb      	strb	r3, [r1, #31]
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	7828      	ldrb	r0, [r5, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	786e      	ldrb	r6, [r5, #1]
 8004f72:	78af      	ldrb	r7, [r5, #2]
 8004f74:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	d15d      	bne.n	8005036 <HAL_RTC_SetAlarm_IT+0xee>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d100      	bne.n	8004f80 <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f7e:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f80:	f7ff feec 	bl	8004d5c <RTC_ByteToBcd2>
 8004f84:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004f86:	0030      	movs	r0, r6
 8004f88:	f7ff fee8 	bl	8004d5c <RTC_ByteToBcd2>
 8004f8c:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004f8e:	0038      	movs	r0, r7
 8004f90:	f7ff fee4 	bl	8004d5c <RTC_ByteToBcd2>
 8004f94:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004f96:	1c6b      	adds	r3, r5, #1
 8004f98:	7fd8      	ldrb	r0, [r3, #31]
 8004f9a:	f7ff fedf 	bl	8004d5c <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f9e:	696a      	ldr	r2, [r5, #20]
 8004fa0:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004fa2:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fa4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004fa6:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004fa8:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004faa:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fac:	4313      	orrs	r3, r2
 8004fae:	431f      	orrs	r7, r3
 8004fb0:	9b01      	ldr	r3, [sp, #4]
 8004fb2:	041b      	lsls	r3, r3, #16
 8004fb4:	431f      	orrs	r7, r3
 8004fb6:	4337      	orrs	r7, r6
 8004fb8:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004fba:	69aa      	ldr	r2, [r5, #24]
 8004fbc:	686b      	ldr	r3, [r5, #4]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004fbe:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004fc0:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc2:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004fc4:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8004fca:	3a77      	subs	r2, #119	; 0x77
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004fce:	32ad      	adds	r2, #173	; 0xad
 8004fd0:	4291      	cmp	r1, r2
 8004fd2:	d153      	bne.n	800507c <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	493c      	ldr	r1, [pc, #240]	; (80050c8 <HAL_RTC_SetAlarm_IT+0x180>)
 8004fd8:	400a      	ands	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004fdc:	68d9      	ldr	r1, [r3, #12]
 8004fde:	4a3b      	ldr	r2, [pc, #236]	; (80050cc <HAL_RTC_SetAlarm_IT+0x184>)
 8004fe0:	b2c9      	uxtb	r1, r1
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004fe6:	f7fe fc1f 	bl	8003828 <HAL_GetTick>
 8004fea:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004fec:	2201      	movs	r2, #1
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	68dd      	ldr	r5, [r3, #12]
 8004ff2:	4015      	ands	r5, r2
 8004ff4:	d032      	beq.n	800505c <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ff6:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004ff8:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ffa:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ffc:	2280      	movs	r2, #128	; 0x80
 8004ffe:	6899      	ldr	r1, [r3, #8]
 8005000:	0052      	lsls	r2, r2, #1
 8005002:	430a      	orrs	r2, r1
 8005004:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	6899      	ldr	r1, [r3, #8]
 800500a:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <HAL_RTC_SetAlarm_IT+0x188>)
 8005014:	0292      	lsls	r2, r2, #10
 8005016:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8005018:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800501a:	4311      	orrs	r1, r2
 800501c:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800501e:	6899      	ldr	r1, [r3, #8]
 8005020:	430a      	orrs	r2, r1
 8005022:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005024:	22ff      	movs	r2, #255	; 0xff
 8005026:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY; 
 8005028:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800502a:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 800502c:	2301      	movs	r3, #1
 800502e:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 8005030:	9b00      	ldr	r3, [sp, #0]
 8005032:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 8005034:	e021      	b.n	800507a <HAL_RTC_SetAlarm_IT+0x132>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005036:	2b00      	cmp	r3, #0
 8005038:	d100      	bne.n	800503c <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800503a:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800503c:	69eb      	ldr	r3, [r5, #28]
 800503e:	696a      	ldr	r2, [r5, #20]
 8005040:	0400      	lsls	r0, r0, #16
 8005042:	4313      	orrs	r3, r2
 8005044:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005046:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005048:	4307      	orrs	r7, r0
 800504a:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800504c:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800504e:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005050:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005052:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005054:	7fde      	ldrb	r6, [r3, #31]
 8005056:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005058:	4337      	orrs	r7, r6
 800505a:	e7ae      	b.n	8004fba <HAL_RTC_SetAlarm_IT+0x72>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800505c:	f7fe fbe4 	bl	8003828 <HAL_GetTick>
 8005060:	23fa      	movs	r3, #250	; 0xfa
 8005062:	1b80      	subs	r0, r0, r6
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4298      	cmp	r0, r3
 8005068:	d9c0      	bls.n	8004fec <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800506a:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800506c:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800506e:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005070:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005072:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8005074:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005076:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 8005078:	77dd      	strb	r5, [r3, #31]
}
 800507a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	4915      	ldr	r1, [pc, #84]	; (80050d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8005080:	400a      	ands	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005084:	68d9      	ldr	r1, [r3, #12]
 8005086:	4a14      	ldr	r2, [pc, #80]	; (80050d8 <HAL_RTC_SetAlarm_IT+0x190>)
 8005088:	b2c9      	uxtb	r1, r1
 800508a:	430a      	orrs	r2, r1
 800508c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800508e:	f7fe fbcb 	bl	8003828 <HAL_GetTick>
 8005092:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005094:	2202      	movs	r2, #2
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	68dd      	ldr	r5, [r3, #12]
 800509a:	4015      	ands	r5, r2
 800509c:	d00b      	beq.n	80050b6 <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800509e:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80050a0:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80050a2:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	6899      	ldr	r1, [r3, #8]
 80050a8:	0092      	lsls	r2, r2, #2
 80050aa:	430a      	orrs	r2, r1
 80050ac:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80050ae:	2280      	movs	r2, #128	; 0x80
 80050b0:	6899      	ldr	r1, [r3, #8]
 80050b2:	0192      	lsls	r2, r2, #6
 80050b4:	e7aa      	b.n	800500c <HAL_RTC_SetAlarm_IT+0xc4>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80050b6:	f7fe fbb7 	bl	8003828 <HAL_GetTick>
 80050ba:	23fa      	movs	r3, #250	; 0xfa
 80050bc:	1b80      	subs	r0, r0, r6
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4298      	cmp	r0, r3
 80050c2:	d9e7      	bls.n	8005094 <HAL_RTC_SetAlarm_IT+0x14c>
 80050c4:	e7d1      	b.n	800506a <HAL_RTC_SetAlarm_IT+0x122>
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	fffffeff 	.word	0xfffffeff
 80050cc:	fffffe7f 	.word	0xfffffe7f
 80050d0:	40010400 	.word	0x40010400
 80050d4:	fffffdff 	.word	0xfffffdff
 80050d8:	fffffd7f 	.word	0xfffffd7f

080050dc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80050dc:	230a      	movs	r3, #10
 80050de:	0902      	lsrs	r2, r0, #4
 80050e0:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 80050e2:	220f      	movs	r2, #15
 80050e4:	4010      	ands	r0, r2
 80050e6:	1818      	adds	r0, r3, r0
 80050e8:	b2c0      	uxtb	r0, r0
}
 80050ea:	4770      	bx	lr

080050ec <HAL_RTC_GetTime>:
{
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80050f0:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80050f2:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80050f4:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80050f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80050f8:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80050fa:	690b      	ldr	r3, [r1, #16]
 80050fc:	045b      	lsls	r3, r3, #17
 80050fe:	0c5b      	lsrs	r3, r3, #17
 8005100:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005102:	680b      	ldr	r3, [r1, #0]
 8005104:	490d      	ldr	r1, [pc, #52]	; (800513c <HAL_RTC_GetTime+0x50>)
 8005106:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8005108:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800510a:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800510c:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800510e:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005110:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005112:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005114:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005116:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8005118:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800511a:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800511c:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 800511e:	2a00      	cmp	r2, #0
 8005120:	d10a      	bne.n	8005138 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005122:	f7ff ffdb 	bl	80050dc <RTC_Bcd2ToByte>
 8005126:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005128:	0030      	movs	r0, r6
 800512a:	f7ff ffd7 	bl	80050dc <RTC_Bcd2ToByte>
 800512e:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005130:	0028      	movs	r0, r5
 8005132:	f7ff ffd3 	bl	80050dc <RTC_Bcd2ToByte>
 8005136:	70a0      	strb	r0, [r4, #2]
}
 8005138:	2000      	movs	r0, #0
 800513a:	bd70      	pop	{r4, r5, r6, pc}
 800513c:	007f7f7f 	.word	0x007f7f7f

08005140 <HAL_RTC_GetDate>:
{
 8005140:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005142:	253f      	movs	r5, #63	; 0x3f
{
 8005144:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005146:	6803      	ldr	r3, [r0, #0]
 8005148:	490d      	ldr	r1, [pc, #52]	; (8005180 <HAL_RTC_GetDate+0x40>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800514e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005150:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005152:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8005154:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005156:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8005158:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800515a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800515c:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800515e:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8005160:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8005162:	2a00      	cmp	r2, #0
 8005164:	d10a      	bne.n	800517c <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005166:	f7ff ffb9 	bl	80050dc <RTC_Bcd2ToByte>
 800516a:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800516c:	0030      	movs	r0, r6
 800516e:	f7ff ffb5 	bl	80050dc <RTC_Bcd2ToByte>
 8005172:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005174:	0028      	movs	r0, r5
 8005176:	f7ff ffb1 	bl	80050dc <RTC_Bcd2ToByte>
 800517a:	70a0      	strb	r0, [r4, #2]
}
 800517c:	2000      	movs	r0, #0
 800517e:	bd70      	pop	{r4, r5, r6, pc}
 8005180:	00ffff3f 	.word	0x00ffff3f

08005184 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005184:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005186:	1c41      	adds	r1, r0, #1
 8005188:	7fca      	ldrb	r2, [r1, #31]
{
 800518a:	0003      	movs	r3, r0
 800518c:	2002      	movs	r0, #2
  __HAL_LOCK(hrtc);
 800518e:	2a01      	cmp	r2, #1
 8005190:	d010      	beq.n	80051b4 <HAL_RTCEx_EnableBypassShadow+0x30>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005192:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005194:	181c      	adds	r4, r3, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005196:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005198:	77e0      	strb	r0, [r4, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800519a:	625a      	str	r2, [r3, #36]	; 0x24
 800519c:	3a77      	subs	r2, #119	; 0x77
 800519e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80051a0:	6898      	ldr	r0, [r3, #8]
 80051a2:	3a33      	subs	r2, #51	; 0x33
 80051a4:	4302      	orrs	r2, r0
 80051a6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051a8:	22ff      	movs	r2, #255	; 0xff

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051aa:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80051ae:	2301      	movs	r3, #1
 80051b0:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 80051b2:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 80051b4:	bd10      	pop	{r4, pc}
	...

080051b8 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status Flag status to check: RESET or set
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80051b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ba:	001d      	movs	r5, r3
 80051bc:	0004      	movs	r4, r0
 80051be:	000e      	movs	r6, r1
 80051c0:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80051c2:	f7fe fb31 	bl	8003828 <HAL_GetTick>

  /* Wait until flag is set */
  if(Status == RESET)
 80051c6:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80051c8:	0007      	movs	r7, r0
  if(Status == RESET)
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d035      	beq.n	800523a <SPI_WaitOnFlagUntilTimeout+0x82>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	6893      	ldr	r3, [r2, #8]
 80051d2:	4033      	ands	r3, r6
 80051d4:	429e      	cmp	r6, r3
 80051d6:	d135      	bne.n	8005244 <SPI_WaitOnFlagUntilTimeout+0x8c>
    {
      if(Timeout != HAL_MAX_DELAY)
 80051d8:	1c6b      	adds	r3, r5, #1
 80051da:	d0f9      	beq.n	80051d0 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80051dc:	2d00      	cmp	r5, #0
 80051de:	d009      	beq.n	80051f4 <SPI_WaitOnFlagUntilTimeout+0x3c>
 80051e0:	f7fe fb22 	bl	8003828 <HAL_GetTick>
 80051e4:	1bc0      	subs	r0, r0, r7
 80051e6:	4285      	cmp	r5, r0
 80051e8:	d2f1      	bcs.n	80051ce <SPI_WaitOnFlagUntilTimeout+0x16>
 80051ea:	e003      	b.n	80051f4 <SPI_WaitOnFlagUntilTimeout+0x3c>
      if(Timeout != HAL_MAX_DELAY)
 80051ec:	1c6b      	adds	r3, r5, #1
 80051ee:	d025      	beq.n	800523c <SPI_WaitOnFlagUntilTimeout+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	d11d      	bne.n	8005230 <SPI_WaitOnFlagUntilTimeout+0x78>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051f4:	21e0      	movs	r1, #224	; 0xe0
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	438a      	bics	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	39a0      	subs	r1, #160	; 0xa0
 8005202:	438a      	bics	r2, r1

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005204:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 8005206:	601a      	str	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005208:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800520a:	0189      	lsls	r1, r1, #6
 800520c:	428a      	cmp	r2, r1
 800520e:	d106      	bne.n	800521e <SPI_WaitOnFlagUntilTimeout+0x66>
          {
            SPI_RESET_CRC(hspi);
 8005210:	6819      	ldr	r1, [r3, #0]
 8005212:	480d      	ldr	r0, [pc, #52]	; (8005248 <SPI_WaitOnFlagUntilTimeout+0x90>)
 8005214:	4001      	ands	r1, r0
 8005216:	6019      	str	r1, [r3, #0]
 8005218:	6819      	ldr	r1, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 800521e:	0023      	movs	r3, r4
 8005220:	2201      	movs	r2, #1
 8005222:	3351      	adds	r3, #81	; 0x51
 8005224:	701a      	strb	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8005226:	2300      	movs	r3, #0
 8005228:	3450      	adds	r4, #80	; 0x50
 800522a:	7023      	strb	r3, [r4, #0]

          return HAL_TIMEOUT;
 800522c:	2003      	movs	r0, #3
 800522e:	e00a      	b.n	8005246 <SPI_WaitOnFlagUntilTimeout+0x8e>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005230:	f7fe fafa 	bl	8003828 <HAL_GetTick>
 8005234:	1bc0      	subs	r0, r0, r7
 8005236:	4285      	cmp	r5, r0
 8005238:	d3dc      	bcc.n	80051f4 <SPI_WaitOnFlagUntilTimeout+0x3c>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	6893      	ldr	r3, [r2, #8]
 800523e:	4033      	ands	r3, r6
 8005240:	429e      	cmp	r6, r3
 8005242:	d1d3      	bne.n	80051ec <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8005244:	2000      	movs	r0, #0
}
 8005246:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005248:	ffffdfff 	.word	0xffffdfff

0800524c <HAL_SPI_MspInit>:
 800524c:	4770      	bx	lr
	...

08005250 <HAL_SPI_Init>:
{
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005254:	2001      	movs	r0, #1
  if(hspi == NULL)
 8005256:	2c00      	cmp	r4, #0
 8005258:	d037      	beq.n	80052ca <HAL_SPI_Init+0x7a>
  if(hspi->State == HAL_SPI_STATE_RESET)
 800525a:	0025      	movs	r5, r4
 800525c:	3551      	adds	r5, #81	; 0x51
 800525e:	782b      	ldrb	r3, [r5, #0]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 8005266:	0022      	movs	r2, r4
 8005268:	3250      	adds	r2, #80	; 0x50
 800526a:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 800526c:	0020      	movs	r0, r4
 800526e:	f7ff ffed 	bl	800524c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005272:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005274:	2240      	movs	r2, #64	; 0x40
 8005276:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005278:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800527a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800527c:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800527e:	4393      	bics	r3, r2
 8005280:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005282:	6863      	ldr	r3, [r4, #4]
 8005284:	69a2      	ldr	r2, [r4, #24]
 8005286:	4303      	orrs	r3, r0
 8005288:	68e0      	ldr	r0, [r4, #12]
 800528a:	4303      	orrs	r3, r0
 800528c:	6920      	ldr	r0, [r4, #16]
 800528e:	4303      	orrs	r3, r0
 8005290:	6960      	ldr	r0, [r4, #20]
 8005292:	4303      	orrs	r3, r0
 8005294:	69e0      	ldr	r0, [r4, #28]
 8005296:	4303      	orrs	r3, r0
 8005298:	6a20      	ldr	r0, [r4, #32]
 800529a:	4303      	orrs	r3, r0
 800529c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800529e:	4303      	orrs	r3, r0
 80052a0:	2080      	movs	r0, #128	; 0x80
 80052a2:	0080      	lsls	r0, r0, #2
 80052a4:	4010      	ands	r0, r2
 80052a6:	4303      	orrs	r3, r0
 80052a8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052aa:	2304      	movs	r3, #4
 80052ac:	0c12      	lsrs	r2, r2, #16
 80052ae:	401a      	ands	r2, r3
 80052b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052b2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052b4:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80052b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052b8:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80052ba:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052bc:	69cb      	ldr	r3, [r1, #28]
 80052be:	4a03      	ldr	r2, [pc, #12]	; (80052cc <HAL_SPI_Init+0x7c>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80052c4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052c6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80052c8:	702b      	strb	r3, [r5, #0]
}
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	fffff7ff 	.word	0xfffff7ff

080052d0 <HAL_SPI_TransmitReceive>:
{
 80052d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d2:	b085      	sub	sp, #20
 80052d4:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 80052d6:	a802      	add	r0, sp, #8
 80052d8:	3006      	adds	r0, #6
 80052da:	9001      	str	r0, [sp, #4]
 80052dc:	2000      	movs	r0, #0
 80052de:	9d01      	ldr	r5, [sp, #4]
 80052e0:	8028      	strh	r0, [r5, #0]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80052e2:	0025      	movs	r5, r4
 80052e4:	3551      	adds	r5, #81	; 0x51
 80052e6:	7828      	ldrb	r0, [r5, #0]
 80052e8:	2801      	cmp	r0, #1
 80052ea:	d004      	beq.n	80052f6 <HAL_SPI_TransmitReceive+0x26>
 80052ec:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 80052ee:	2002      	movs	r0, #2
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80052f0:	2e22      	cmp	r6, #34	; 0x22
 80052f2:	d000      	beq.n	80052f6 <HAL_SPI_TransmitReceive+0x26>
 80052f4:	e083      	b.n	80053fe <HAL_SPI_TransmitReceive+0x12e>
      return  HAL_ERROR;
 80052f6:	2001      	movs	r0, #1
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 80052f8:	2900      	cmp	r1, #0
 80052fa:	d100      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x2e>
 80052fc:	e07f      	b.n	80053fe <HAL_SPI_TransmitReceive+0x12e>
 80052fe:	2a00      	cmp	r2, #0
 8005300:	d100      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x34>
 8005302:	e07c      	b.n	80053fe <HAL_SPI_TransmitReceive+0x12e>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d07a      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x12e>
    __HAL_LOCK(hspi);
 8005308:	0026      	movs	r6, r4
 800530a:	3650      	adds	r6, #80	; 0x50
 800530c:	7830      	ldrb	r0, [r6, #0]
 800530e:	4684      	mov	ip, r0
 8005310:	4667      	mov	r7, ip
    return HAL_BUSY;
 8005312:	2002      	movs	r0, #2
    __HAL_LOCK(hspi);
 8005314:	2f01      	cmp	r7, #1
 8005316:	d072      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x12e>
 8005318:	3801      	subs	r0, #1
 800531a:	7030      	strb	r0, [r6, #0]
    if(hspi->State == HAL_SPI_STATE_READY)
 800531c:	7828      	ldrb	r0, [r5, #0]
 800531e:	2801      	cmp	r0, #1
 8005320:	d101      	bne.n	8005326 <HAL_SPI_TransmitReceive+0x56>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005322:	3031      	adds	r0, #49	; 0x31
 8005324:	7028      	strb	r0, [r5, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005326:	2000      	movs	r0, #0
    hspi->RxXferSize  = Size;
 8005328:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800532a:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->TxXferSize  = Size; 
 800532c:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->RxXferCount = Size;  
 800532e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->TxXferCount = Size;
 8005330:	86e3      	strh	r3, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005332:	2380      	movs	r3, #128	; 0x80
    hspi->RxISR = 0U;
 8005334:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 8005336:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005338:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hspi->pRxBuffPtr  = pRxData;
 800533a:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->pTxBuffPtr  = pTxData;
 800533c:	6321      	str	r1, [r4, #48]	; 0x30
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800533e:	019b      	lsls	r3, r3, #6
 8005340:	4298      	cmp	r0, r3
 8005342:	d107      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x84>
      SPI_RESET_CRC(hspi);
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	4f9d      	ldr	r7, [pc, #628]	; (80055bc <HAL_SPI_TransmitReceive+0x2ec>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	403a      	ands	r2, r7
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4302      	orrs	r2, r0
 8005352:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4694      	mov	ip, r2
 800535a:	2240      	movs	r2, #64	; 0x40
 800535c:	4667      	mov	r7, ip
 800535e:	4217      	tst	r7, r2
 8005360:	d102      	bne.n	8005368 <HAL_SPI_TransmitReceive+0x98>
      __HAL_SPI_ENABLE(hspi);
 8005362:	681f      	ldr	r7, [r3, #0]
 8005364:	433a      	orrs	r2, r7
 8005366:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005368:	2280      	movs	r2, #128	; 0x80
 800536a:	0112      	lsls	r2, r2, #4
 800536c:	4694      	mov	ip, r2
 800536e:	68e7      	ldr	r7, [r4, #12]
 8005370:	6862      	ldr	r2, [r4, #4]
 8005372:	4567      	cmp	r7, ip
 8005374:	d000      	beq.n	8005378 <HAL_SPI_TransmitReceive+0xa8>
 8005376:	e07e      	b.n	8005476 <HAL_SPI_TransmitReceive+0x1a6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8005378:	2a00      	cmp	r2, #0
 800537a:	d006      	beq.n	800538a <HAL_SPI_TransmitReceive+0xba>
 800537c:	2782      	movs	r7, #130	; 0x82
 800537e:	007f      	lsls	r7, r7, #1
 8005380:	42ba      	cmp	r2, r7
 8005382:	d10a      	bne.n	800539a <HAL_SPI_TransmitReceive+0xca>
 8005384:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005386:	2a01      	cmp	r2, #1
 8005388:	d107      	bne.n	800539a <HAL_SPI_TransmitReceive+0xca>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800538a:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr+=2U;
 800538c:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800538e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8005390:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr+=2U;
 8005392:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005394:	3a01      	subs	r2, #1
 8005396:	b292      	uxth	r2, r2
 8005398:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 800539a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800539c:	2a00      	cmp	r2, #0
 800539e:	d162      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x196>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053a0:	2280      	movs	r2, #128	; 0x80
 80053a2:	0192      	lsls	r2, r2, #6
 80053a4:	4290      	cmp	r0, r2
 80053a6:	d104      	bne.n	80053b2 <HAL_SPI_TransmitReceive+0xe2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	0152      	lsls	r2, r2, #5
 80053ae:	430a      	orrs	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80053b2:	2200      	movs	r2, #0
 80053b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80053b6:	2101      	movs	r1, #1
 80053b8:	0020      	movs	r0, r4
 80053ba:	f7ff fefd 	bl	80051b8 <SPI_WaitOnFlagUntilTimeout>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d11c      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053c6:	68d2      	ldr	r2, [r2, #12]
 80053c8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 80053ca:	3302      	adds	r3, #2
 80053cc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 80053ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80053da:	019b      	lsls	r3, r3, #6
 80053dc:	429a      	cmp	r2, r3
 80053de:	d000      	beq.n	80053e2 <HAL_SPI_TransmitReceive+0x112>
 80053e0:	e0c4      	b.n	800556c <HAL_SPI_TransmitReceive+0x29c>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80053e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e4:	2200      	movs	r2, #0
 80053e6:	2101      	movs	r1, #1
 80053e8:	0020      	movs	r0, r4
 80053ea:	f7ff fee5 	bl	80051b8 <SPI_WaitOnFlagUntilTimeout>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d100      	bne.n	80053f4 <HAL_SPI_TransmitReceive+0x124>
 80053f2:	e0b4      	b.n	800555e <HAL_SPI_TransmitReceive+0x28e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80053f4:	2302      	movs	r3, #2
 80053f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f8:	4313      	orrs	r3, r2
 80053fa:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80053fc:	2003      	movs	r0, #3
}
 80053fe:	b005      	add	sp, #20
 8005400:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005404:	2200      	movs	r2, #0
 8005406:	2102      	movs	r1, #2
 8005408:	0020      	movs	r0, r4
 800540a:	f7ff fed5 	bl	80051b8 <SPI_WaitOnFlagUntilTimeout>
 800540e:	2800      	cmp	r0, #0
 8005410:	d1f4      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8005412:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005414:	6822      	ldr	r2, [r4, #0]
 8005416:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr+=2U;
 8005418:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800541a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2U;
 800541c:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 800541e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005420:	3b01      	subs	r3, #1
 8005422:	b29b      	uxth	r3, r3
 8005424:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005426:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x172>
 800542c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800542e:	0019      	movs	r1, r3
 8005430:	2380      	movs	r3, #128	; 0x80
 8005432:	019b      	lsls	r3, r3, #6
 8005434:	4299      	cmp	r1, r3
 8005436:	d104      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x172>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005438:	2180      	movs	r1, #128	; 0x80
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	0149      	lsls	r1, r1, #5
 800543e:	430b      	orrs	r3, r1
 8005440:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005444:	2200      	movs	r2, #0
 8005446:	2101      	movs	r1, #1
 8005448:	0020      	movs	r0, r4
 800544a:	f7ff feb5 	bl	80051b8 <SPI_WaitOnFlagUntilTimeout>
 800544e:	2800      	cmp	r0, #0
 8005450:	d1d4      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005456:	68d2      	ldr	r2, [r2, #12]
 8005458:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 800545a:	3302      	adds	r3, #2
 800545c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 800545e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005460:	3b01      	subs	r3, #1
 8005462:	b29b      	uxth	r3, r3
 8005464:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8005466:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ca      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x132>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800546c:	6862      	ldr	r2, [r4, #4]
 800546e:	2a00      	cmp	r2, #0
 8005470:	d1b1      	bne.n	80053d6 <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005474:	e79f      	b.n	80053b6 <HAL_SPI_TransmitReceive+0xe6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 8005476:	2a00      	cmp	r2, #0
 8005478:	d006      	beq.n	8005488 <HAL_SPI_TransmitReceive+0x1b8>
 800547a:	2782      	movs	r7, #130	; 0x82
 800547c:	007f      	lsls	r7, r7, #1
 800547e:	42ba      	cmp	r2, r7
 8005480:	d10a      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x1c8>
 8005482:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005484:	2a01      	cmp	r2, #1
 8005486:	d107      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x1c8>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005488:	1c4a      	adds	r2, r1, #1
 800548a:	6322      	str	r2, [r4, #48]	; 0x30
 800548c:	780a      	ldrb	r2, [r1, #0]
 800548e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8005490:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005492:	3a01      	subs	r2, #1
 8005494:	b292      	uxth	r2, r2
 8005496:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 8005498:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800549a:	2a00      	cmp	r2, #0
 800549c:	d149      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x262>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800549e:	2280      	movs	r2, #128	; 0x80
 80054a0:	0192      	lsls	r2, r2, #6
 80054a2:	4290      	cmp	r0, r2
 80054a4:	d104      	bne.n	80054b0 <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80054a6:	2280      	movs	r2, #128	; 0x80
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	0152      	lsls	r2, r2, #5
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80054b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054b2:	2200      	movs	r2, #0
 80054b4:	2101      	movs	r1, #1
 80054b6:	0020      	movs	r0, r4
 80054b8:	f7ff fe7e 	bl	80051b8 <SPI_WaitOnFlagUntilTimeout>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d19d      	bne.n	80053fc <HAL_SPI_TransmitReceive+0x12c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	7013      	strb	r3, [r2, #0]
 80054c8:	e781      	b.n	80053ce <HAL_SPI_TransmitReceive+0xfe>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80054ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054cc:	2200      	movs	r2, #0
 80054ce:	2102      	movs	r1, #2
 80054d0:	0020      	movs	r0, r4
 80054d2:	f7ff fe71 	bl	80051b8 <SPI_WaitOnFlagUntilTimeout>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d000      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x20c>
 80054da:	e78f      	b.n	80053fc <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80054dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80054de:	6822      	ldr	r2, [r4, #0]
 80054e0:	1c59      	adds	r1, r3, #1
 80054e2:	6321      	str	r1, [r4, #48]	; 0x30
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 80054e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80054f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <HAL_SPI_TransmitReceive+0x23c>
 80054f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054f8:	0019      	movs	r1, r3
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	4299      	cmp	r1, r3
 8005500:	d104      	bne.n	800550c <HAL_SPI_TransmitReceive+0x23c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005502:	2180      	movs	r1, #128	; 0x80
 8005504:	6813      	ldr	r3, [r2, #0]
 8005506:	0149      	lsls	r1, r1, #5
 8005508:	430b      	orrs	r3, r1
 800550a:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800550c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800550e:	2200      	movs	r2, #0
 8005510:	2101      	movs	r1, #1
 8005512:	0020      	movs	r0, r4
 8005514:	f7ff fe50 	bl	80051b8 <SPI_WaitOnFlagUntilTimeout>
 8005518:	2800      	cmp	r0, #0
 800551a:	d000      	beq.n	800551e <HAL_SPI_TransmitReceive+0x24e>
 800551c:	e76e      	b.n	80053fc <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800551e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	63a2      	str	r2, [r4, #56]	; 0x38
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	68d2      	ldr	r2, [r2, #12]
 8005528:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800552a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800552c:	3b01      	subs	r3, #1
 800552e:	b29b      	uxth	r3, r3
 8005530:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8005532:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1c8      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x1fa>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8005538:	6862      	ldr	r2, [r4, #4]
 800553a:	2a00      	cmp	r2, #0
 800553c:	d000      	beq.n	8005540 <HAL_SPI_TransmitReceive+0x270>
 800553e:	e74a      	b.n	80053d6 <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005542:	2101      	movs	r1, #1
 8005544:	0020      	movs	r0, r4
 8005546:	f7ff fe37 	bl	80051b8 <SPI_WaitOnFlagUntilTimeout>
 800554a:	2800      	cmp	r0, #0
 800554c:	d000      	beq.n	8005550 <HAL_SPI_TransmitReceive+0x280>
 800554e:	e755      	b.n	80053fc <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8005550:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	63a2      	str	r2, [r4, #56]	; 0x38
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	68d2      	ldr	r2, [r2, #12]
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	e737      	b.n	80053ce <HAL_SPI_TransmitReceive+0xfe>
      tmpreg = hspi->Instance->DR;
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	9a01      	ldr	r2, [sp, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 8005568:	0013      	movs	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 800556c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800556e:	2201      	movs	r2, #1
 8005570:	2180      	movs	r1, #128	; 0x80
 8005572:	0020      	movs	r0, r4
 8005574:	f7ff fe20 	bl	80051b8 <SPI_WaitOnFlagUntilTimeout>
 8005578:	2800      	cmp	r0, #0
 800557a:	d002      	beq.n	8005582 <HAL_SPI_TransmitReceive+0x2b2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800557c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800557e:	2320      	movs	r3, #32
 8005580:	e73a      	b.n	80053f8 <HAL_SPI_TransmitReceive+0x128>
    hspi->State = HAL_SPI_STATE_READY;
 8005582:	2701      	movs	r7, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 8005588:	702f      	strb	r7, [r5, #0]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800558a:	019b      	lsls	r3, r3, #6
 800558c:	429a      	cmp	r2, r3
 800558e:	d111      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x2e4>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	6899      	ldr	r1, [r3, #8]
 8005594:	06c9      	lsls	r1, r1, #27
 8005596:	d50d      	bpl.n	80055b4 <HAL_SPI_TransmitReceive+0x2e4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005598:	2102      	movs	r1, #2
 800559a:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800559c:	4329      	orrs	r1, r5
 800559e:	6561      	str	r1, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 80055a0:	6819      	ldr	r1, [r3, #0]
 80055a2:	4c06      	ldr	r4, [pc, #24]	; (80055bc <HAL_SPI_TransmitReceive+0x2ec>)
 80055a4:	4021      	ands	r1, r4
 80055a6:	6019      	str	r1, [r3, #0]
 80055a8:	6819      	ldr	r1, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 80055ae:	7030      	strb	r0, [r6, #0]
      return HAL_ERROR; 
 80055b0:	0038      	movs	r0, r7
 80055b2:	e724      	b.n	80053fe <HAL_SPI_TransmitReceive+0x12e>
    __HAL_UNLOCK(hspi);
 80055b4:	2300      	movs	r3, #0
 80055b6:	7033      	strb	r3, [r6, #0]
    return HAL_OK;
 80055b8:	e721      	b.n	80053fe <HAL_SPI_TransmitReceive+0x12e>
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	ffffdfff 	.word	0xffffdfff

080055c0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c0:	6803      	ldr	r3, [r0, #0]
 80055c2:	4906      	ldr	r1, [pc, #24]	; (80055dc <UART_EndRxTransfer+0x1c>)
 80055c4:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c6:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c8:	400a      	ands	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	3123      	adds	r1, #35	; 0x23
 80055d0:	31ff      	adds	r1, #255	; 0xff
 80055d2:	438a      	bics	r2, r1
 80055d4:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80055d6:	2320      	movs	r3, #32
 80055d8:	7003      	strb	r3, [r0, #0]
}
 80055da:	4770      	bx	lr
 80055dc:	fffffedf 	.word	0xfffffedf

080055e0 <HAL_UART_Transmit_DMA>:
{
 80055e0:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80055e2:	0002      	movs	r2, r0
{
 80055e4:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80055e6:	3269      	adds	r2, #105	; 0x69
 80055e8:	7814      	ldrb	r4, [r2, #0]
{
 80055ea:	0005      	movs	r5, r0
    return HAL_BUSY;
 80055ec:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 80055ee:	2c20      	cmp	r4, #32
 80055f0:	d134      	bne.n	800565c <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 80055f2:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d031      	beq.n	800565c <HAL_UART_Transmit_DMA+0x7c>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d02f      	beq.n	800565c <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055fc:	2480      	movs	r4, #128	; 0x80
 80055fe:	68ae      	ldr	r6, [r5, #8]
 8005600:	0164      	lsls	r4, r4, #5
 8005602:	42a6      	cmp	r6, r4
 8005604:	d104      	bne.n	8005610 <HAL_UART_Transmit_DMA+0x30>
 8005606:	692c      	ldr	r4, [r5, #16]
 8005608:	2c00      	cmp	r4, #0
 800560a:	d101      	bne.n	8005610 <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1) != 0)
 800560c:	4201      	tst	r1, r0
 800560e:	d125      	bne.n	800565c <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8005610:	002e      	movs	r6, r5
 8005612:	3668      	adds	r6, #104	; 0x68
 8005614:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 8005616:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005618:	2c01      	cmp	r4, #1
 800561a:	d01f      	beq.n	800565c <HAL_UART_Transmit_DMA+0x7c>
 800561c:	3801      	subs	r0, #1
 800561e:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 8005620:	0028      	movs	r0, r5
 8005622:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8005624:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005626:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 8005628:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 800562a:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562c:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562e:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005630:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005632:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 8005636:	6384      	str	r4, [r0, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005638:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800563a:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <HAL_UART_Transmit_DMA+0x84>)
 800563c:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <HAL_UART_Transmit_DMA+0x88>)
 8005640:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8005642:	682a      	ldr	r2, [r5, #0]
 8005644:	3228      	adds	r2, #40	; 0x28
 8005646:	f7fe fa9d 	bl	8003b84 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800564a:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 800564c:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800564e:	682b      	ldr	r3, [r5, #0]
 8005650:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005652:	6899      	ldr	r1, [r3, #8]
 8005654:	1892      	adds	r2, r2, r2
 8005656:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8005658:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	bd70      	pop	{r4, r5, r6, pc}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	0800566d 	.word	0x0800566d
 8005664:	0800569f 	.word	0x0800569f
 8005668:	0800572b 	.word	0x0800572b

0800566c <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800566c:	2120      	movs	r1, #32
 800566e:	6803      	ldr	r3, [r0, #0]
{
 8005670:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8005672:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8005674:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8005676:	400b      	ands	r3, r1
 8005678:	d10c      	bne.n	8005694 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 800567a:	0011      	movs	r1, r2
 800567c:	3152      	adds	r1, #82	; 0x52
 800567e:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005680:	2180      	movs	r1, #128	; 0x80
 8005682:	6813      	ldr	r3, [r2, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	438a      	bics	r2, r1
 8005688:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	6819      	ldr	r1, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8005692:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8005694:	0010      	movs	r0, r2
 8005696:	f001 fcbb 	bl	8007010 <HAL_UART_TxCpltCallback>
}
 800569a:	e7fa      	b.n	8005692 <UART_DMATransmitCplt+0x26>

0800569c <HAL_UART_TxHalfCpltCallback>:
 800569c:	4770      	bx	lr

0800569e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800569e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 80056a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80056a2:	f7ff fffb 	bl	800569c <HAL_UART_TxHalfCpltCallback>
}
 80056a6:	bd10      	pop	{r4, pc}

080056a8 <HAL_UART_RxCpltCallback>:
 80056a8:	4770      	bx	lr
	...

080056ac <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ac:	0002      	movs	r2, r0
{
 80056ae:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b0:	326a      	adds	r2, #106	; 0x6a
 80056b2:	7811      	ldrb	r1, [r2, #0]
 80056b4:	6803      	ldr	r3, [r0, #0]
 80056b6:	2922      	cmp	r1, #34	; 0x22
 80056b8:	d12d      	bne.n	8005716 <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 80056ba:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056bc:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80056be:	315c      	adds	r1, #92	; 0x5c
 80056c0:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c4:	0164      	lsls	r4, r4, #5
 80056c6:	4029      	ands	r1, r5
 80056c8:	6885      	ldr	r5, [r0, #8]
 80056ca:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80056cc:	42a5      	cmp	r5, r4
 80056ce:	d11e      	bne.n	800570e <UART_Receive_IT+0x62>
 80056d0:	6904      	ldr	r4, [r0, #16]
 80056d2:	2c00      	cmp	r4, #0
 80056d4:	d11b      	bne.n	800570e <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80056d6:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2;
 80056d8:	3302      	adds	r3, #2
 80056da:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80056dc:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 80056de:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 80056e0:	315a      	adds	r1, #90	; 0x5a
 80056e2:	880b      	ldrh	r3, [r1, #0]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	800b      	strh	r3, [r1, #0]
 80056ea:	42a3      	cmp	r3, r4
 80056ec:	d10d      	bne.n	800570a <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ee:	6803      	ldr	r3, [r0, #0]
 80056f0:	4d0c      	ldr	r5, [pc, #48]	; (8005724 <UART_Receive_IT+0x78>)
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	4029      	ands	r1, r5
 80056f6:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f8:	6899      	ldr	r1, [r3, #8]
 80056fa:	3523      	adds	r5, #35	; 0x23
 80056fc:	35ff      	adds	r5, #255	; 0xff
 80056fe:	43a9      	bics	r1, r5
 8005700:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8005702:	2320      	movs	r3, #32
 8005704:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8005706:	f7ff ffcf 	bl	80056a8 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800570a:	0020      	movs	r0, r4
 800570c:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800570e:	1c5c      	adds	r4, r3, #1
 8005710:	6544      	str	r4, [r0, #84]	; 0x54
 8005712:	7019      	strb	r1, [r3, #0]
 8005714:	e7e2      	b.n	80056dc <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005716:	2208      	movs	r2, #8
 8005718:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 800571a:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8005720:	e7f3      	b.n	800570a <UART_Receive_IT+0x5e>
 8005722:	46c0      	nop			; (mov r8, r8)
 8005724:	fffffedf 	.word	0xfffffedf

08005728 <HAL_UART_ErrorCallback>:
 8005728:	4770      	bx	lr

0800572a <UART_DMAError>:
{
 800572a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800572c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800572e:	0021      	movs	r1, r4
 8005730:	3169      	adds	r1, #105	; 0x69
 8005732:	780b      	ldrb	r3, [r1, #0]
 8005734:	2b21      	cmp	r3, #33	; 0x21
 8005736:	d10d      	bne.n	8005754 <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	0612      	lsls	r2, r2, #24
 800573e:	d509      	bpl.n	8005754 <UART_DMAError+0x2a>
    huart->TxXferCount = 0;
 8005740:	0022      	movs	r2, r4
 8005742:	2000      	movs	r0, #0
 8005744:	3252      	adds	r2, #82	; 0x52
 8005746:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	30c0      	adds	r0, #192	; 0xc0
 800574c:	4382      	bics	r2, r0
 800574e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005750:	2320      	movs	r3, #32
 8005752:	700b      	strb	r3, [r1, #0]
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005754:	0023      	movs	r3, r4
 8005756:	336a      	adds	r3, #106	; 0x6a
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b22      	cmp	r3, #34	; 0x22
 800575c:	d10a      	bne.n	8005774 <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	065b      	lsls	r3, r3, #25
 8005764:	d506      	bpl.n	8005774 <UART_DMAError+0x4a>
    huart->RxXferCount = 0;
 8005766:	0023      	movs	r3, r4
 8005768:	2200      	movs	r2, #0
 800576a:	335a      	adds	r3, #90	; 0x5a
 800576c:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800576e:	0020      	movs	r0, r4
 8005770:	f7ff ff26 	bl	80055c0 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005774:	2310      	movs	r3, #16
 8005776:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8005778:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800577a:	4313      	orrs	r3, r2
 800577c:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800577e:	f7ff ffd3 	bl	8005728 <HAL_UART_ErrorCallback>
}
 8005782:	bd10      	pop	{r4, pc}

08005784 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005784:	210f      	movs	r1, #15
{
 8005786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005788:	6803      	ldr	r3, [r0, #0]
{
 800578a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800578c:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800578e:	6818      	ldr	r0, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005790:	4011      	ands	r1, r2
  if (errorflags == RESET)
 8005792:	d108      	bne.n	80057a6 <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005794:	2520      	movs	r5, #32
 8005796:	422a      	tst	r2, r5
 8005798:	d005      	beq.n	80057a6 <HAL_UART_IRQHandler+0x22>
 800579a:	4228      	tst	r0, r5
 800579c:	d003      	beq.n	80057a6 <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 800579e:	0020      	movs	r0, r4
 80057a0:	f7ff ff84 	bl	80056ac <UART_Receive_IT>
}
 80057a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 80057a6:	689e      	ldr	r6, [r3, #8]
  if(   (errorflags != RESET)
 80057a8:	2900      	cmp	r1, #0
 80057aa:	d061      	beq.n	8005870 <HAL_UART_IRQHandler+0xec>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80057ac:	2101      	movs	r1, #1
 80057ae:	0035      	movs	r5, r6
 80057b0:	400d      	ands	r5, r1
 80057b2:	d103      	bne.n	80057bc <HAL_UART_IRQHandler+0x38>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80057b4:	2790      	movs	r7, #144	; 0x90
 80057b6:	007f      	lsls	r7, r7, #1
 80057b8:	4238      	tst	r0, r7
 80057ba:	d059      	beq.n	8005870 <HAL_UART_IRQHandler+0xec>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057bc:	420a      	tst	r2, r1
 80057be:	d005      	beq.n	80057cc <HAL_UART_IRQHandler+0x48>
 80057c0:	05c6      	lsls	r6, r0, #23
 80057c2:	d503      	bpl.n	80057cc <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80057c4:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057c6:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80057c8:	4331      	orrs	r1, r6
 80057ca:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057cc:	2102      	movs	r1, #2
 80057ce:	420a      	tst	r2, r1
 80057d0:	d006      	beq.n	80057e0 <HAL_UART_IRQHandler+0x5c>
 80057d2:	2d00      	cmp	r5, #0
 80057d4:	d004      	beq.n	80057e0 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80057d6:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057d8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80057da:	1849      	adds	r1, r1, r1
 80057dc:	4331      	orrs	r1, r6
 80057de:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057e0:	2104      	movs	r1, #4
 80057e2:	420a      	tst	r2, r1
 80057e4:	d006      	beq.n	80057f4 <HAL_UART_IRQHandler+0x70>
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	d004      	beq.n	80057f4 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80057ea:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057ec:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80057ee:	3902      	subs	r1, #2
 80057f0:	4331      	orrs	r1, r6
 80057f2:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80057f4:	0711      	lsls	r1, r2, #28
 80057f6:	d508      	bpl.n	800580a <HAL_UART_IRQHandler+0x86>
 80057f8:	0681      	lsls	r1, r0, #26
 80057fa:	d401      	bmi.n	8005800 <HAL_UART_IRQHandler+0x7c>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	d004      	beq.n	800580a <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8005800:	2108      	movs	r1, #8
 8005802:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005804:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005806:	4319      	orrs	r1, r3
 8005808:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800580a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0c9      	beq.n	80057a4 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005810:	2320      	movs	r3, #32
 8005812:	421a      	tst	r2, r3
 8005814:	d004      	beq.n	8005820 <HAL_UART_IRQHandler+0x9c>
 8005816:	4218      	tst	r0, r3
 8005818:	d002      	beq.n	8005820 <HAL_UART_IRQHandler+0x9c>
        UART_Receive_IT(huart);
 800581a:	0020      	movs	r0, r4
 800581c:	f7ff ff46 	bl	80056ac <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005820:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8005822:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005824:	071b      	lsls	r3, r3, #28
 8005826:	d404      	bmi.n	8005832 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	689d      	ldr	r5, [r3, #8]
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005830:	d01a      	beq.n	8005868 <HAL_UART_IRQHandler+0xe4>
        UART_EndRxTransfer(huart);
 8005832:	f7ff fec5 	bl	80055c0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005836:	2140      	movs	r1, #64	; 0x40
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	420a      	tst	r2, r1
 800583e:	d00f      	beq.n	8005860 <HAL_UART_IRQHandler+0xdc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005840:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8005842:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005844:	438a      	bics	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8005848:	2800      	cmp	r0, #0
 800584a:	d009      	beq.n	8005860 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800584c:	4b32      	ldr	r3, [pc, #200]	; (8005918 <HAL_UART_IRQHandler+0x194>)
 800584e:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005850:	f7fe f9c4 	bl	8003bdc <HAL_DMA_Abort_IT>
 8005854:	2800      	cmp	r0, #0
 8005856:	d0a5      	beq.n	80057a4 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005858:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800585a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800585c:	4798      	blx	r3
 800585e:	e7a1      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8005860:	0020      	movs	r0, r4
 8005862:	f7ff ff61 	bl	8005728 <HAL_UART_ErrorCallback>
 8005866:	e79d      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8005868:	f7ff ff5e 	bl	8005728 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800586e:	e799      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	0349      	lsls	r1, r1, #13
 8005874:	420a      	tst	r2, r1
 8005876:	d00b      	beq.n	8005890 <HAL_UART_IRQHandler+0x10c>
 8005878:	0275      	lsls	r5, r6, #9
 800587a:	d509      	bpl.n	8005890 <HAL_UART_IRQHandler+0x10c>
    huart->gState  = HAL_UART_STATE_READY;
 800587c:	0022      	movs	r2, r4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 800587e:	6219      	str	r1, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8005880:	2320      	movs	r3, #32
 8005882:	3269      	adds	r2, #105	; 0x69
 8005884:	7013      	strb	r3, [r2, #0]
    HAL_UARTEx_WakeupCallback(huart);
 8005886:	0020      	movs	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8005888:	7053      	strb	r3, [r2, #1]
    HAL_UARTEx_WakeupCallback(huart);
 800588a:	f000 fa85 	bl	8005d98 <HAL_UARTEx_WakeupCallback>
    return;
 800588e:	e789      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005890:	2180      	movs	r1, #128	; 0x80
 8005892:	420a      	tst	r2, r1
 8005894:	d02d      	beq.n	80058f2 <HAL_UART_IRQHandler+0x16e>
 8005896:	4208      	tst	r0, r1
 8005898:	d02b      	beq.n	80058f2 <HAL_UART_IRQHandler+0x16e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800589a:	0022      	movs	r2, r4
 800589c:	3269      	adds	r2, #105	; 0x69
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	2a21      	cmp	r2, #33	; 0x21
 80058a2:	d000      	beq.n	80058a6 <HAL_UART_IRQHandler+0x122>
 80058a4:	e77e      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
    if(huart->TxXferCount == 0U)
 80058a6:	0020      	movs	r0, r4
 80058a8:	3052      	adds	r0, #82	; 0x52
 80058aa:	8802      	ldrh	r2, [r0, #0]
 80058ac:	2a00      	cmp	r2, #0
 80058ae:	d107      	bne.n	80058c0 <HAL_UART_IRQHandler+0x13c>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	438a      	bics	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058b6:	2240      	movs	r2, #64	; 0x40
 80058b8:	6819      	ldr	r1, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e771      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c0:	2180      	movs	r1, #128	; 0x80
 80058c2:	68a5      	ldr	r5, [r4, #8]
 80058c4:	0149      	lsls	r1, r1, #5
 80058c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80058c8:	428d      	cmp	r5, r1
 80058ca:	d10d      	bne.n	80058e8 <HAL_UART_IRQHandler+0x164>
 80058cc:	6921      	ldr	r1, [r4, #16]
 80058ce:	2900      	cmp	r1, #0
 80058d0:	d10a      	bne.n	80058e8 <HAL_UART_IRQHandler+0x164>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80058d2:	8811      	ldrh	r1, [r2, #0]
        huart->pTxBuffPtr += 2U;
 80058d4:	3202      	adds	r2, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80058d6:	05c9      	lsls	r1, r1, #23
 80058d8:	0dc9      	lsrs	r1, r1, #23
 80058da:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80058dc:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 80058de:	8803      	ldrh	r3, [r0, #0]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8003      	strh	r3, [r0, #0]
 80058e6:	e75d      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80058e8:	1c51      	adds	r1, r2, #1
 80058ea:	64e1      	str	r1, [r4, #76]	; 0x4c
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
 80058f0:	e7f5      	b.n	80058de <HAL_UART_IRQHandler+0x15a>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058f2:	2140      	movs	r1, #64	; 0x40
 80058f4:	420a      	tst	r2, r1
 80058f6:	d100      	bne.n	80058fa <HAL_UART_IRQHandler+0x176>
 80058f8:	e754      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
 80058fa:	4208      	tst	r0, r1
 80058fc:	d100      	bne.n	8005900 <HAL_UART_IRQHandler+0x17c>
 80058fe:	e751      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005900:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8005902:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005904:	438a      	bics	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005908:	0023      	movs	r3, r4
 800590a:	2220      	movs	r2, #32
 800590c:	3369      	adds	r3, #105	; 0x69
 800590e:	701a      	strb	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8005910:	f001 fb7e 	bl	8007010 <HAL_UART_TxCpltCallback>
 8005914:	e746      	b.n	80057a4 <HAL_UART_IRQHandler+0x20>
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	0800591d 	.word	0x0800591d

0800591c <UART_DMAAbortOnError>:
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800591c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	0002      	movs	r2, r0
{
 8005922:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8005924:	325a      	adds	r2, #90	; 0x5a
 8005926:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0;
 8005928:	3a08      	subs	r2, #8
 800592a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800592c:	f7ff fefc 	bl	8005728 <HAL_UART_ErrorCallback>
}
 8005930:	bd10      	pop	{r4, pc}
	...

08005934 <UART_SetConfig>:
{
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	0005      	movs	r5, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8005938:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800593a:	6882      	ldr	r2, [r0, #8]
 800593c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800593e:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005940:	4302      	orrs	r2, r0
 8005942:	6968      	ldr	r0, [r5, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005944:	4e83      	ldr	r6, [pc, #524]	; (8005b54 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005946:	4302      	orrs	r2, r0
 8005948:	69e8      	ldr	r0, [r5, #28]
 800594a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800594c:	4882      	ldr	r0, [pc, #520]	; (8005b58 <UART_SetConfig+0x224>)
 800594e:	4001      	ands	r1, r0
 8005950:	430a      	orrs	r2, r1
 8005952:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4981      	ldr	r1, [pc, #516]	; (8005b5c <UART_SetConfig+0x228>)
 8005958:	400a      	ands	r2, r1
 800595a:	68e9      	ldr	r1, [r5, #12]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005960:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005962:	42b3      	cmp	r3, r6
 8005964:	d001      	beq.n	800596a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8005966:	6a2a      	ldr	r2, [r5, #32]
 8005968:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	487c      	ldr	r0, [pc, #496]	; (8005b60 <UART_SetConfig+0x22c>)
 800596e:	4002      	ands	r2, r0
 8005970:	430a      	orrs	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005974:	4a7b      	ldr	r2, [pc, #492]	; (8005b64 <UART_SetConfig+0x230>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d117      	bne.n	80059aa <UART_SetConfig+0x76>
 800597a:	2203      	movs	r2, #3
 800597c:	4b7a      	ldr	r3, [pc, #488]	; (8005b68 <UART_SetConfig+0x234>)
 800597e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005980:	4013      	ands	r3, r2
 8005982:	4a7a      	ldr	r2, [pc, #488]	; (8005b6c <UART_SetConfig+0x238>)
 8005984:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8005986:	2002      	movs	r0, #2
 8005988:	f7ff f80a 	bl	80049a0 <HAL_RCCEx_GetPeriphCLKFreq>
  if(UART_INSTANCE_LOWPOWER(huart))
 800598c:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800598e:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8005990:	42b7      	cmp	r7, r6
 8005992:	d168      	bne.n	8005a66 <UART_SetConfig+0x132>
    switch (clocksource)
 8005994:	2c08      	cmp	r4, #8
 8005996:	d900      	bls.n	800599a <UART_SetConfig+0x66>
 8005998:	e0d9      	b.n	8005b4e <UART_SetConfig+0x21a>
 800599a:	0020      	movs	r0, r4
 800599c:	f7fa fbb4 	bl	8000108 <__gnu_thumb1_case_uqi>
 80059a0:	d73bd733 	.word	0xd73bd733
 80059a4:	d7d7d75b 	.word	0xd7d7d75b
 80059a8:	5e          	.byte	0x5e
 80059a9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059aa:	4a71      	ldr	r2, [pc, #452]	; (8005b70 <UART_SetConfig+0x23c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d107      	bne.n	80059c0 <UART_SetConfig+0x8c>
 80059b0:	220c      	movs	r2, #12
 80059b2:	4b6d      	ldr	r3, [pc, #436]	; (8005b68 <UART_SetConfig+0x234>)
 80059b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b6:	401a      	ands	r2, r3
 80059b8:	4b6c      	ldr	r3, [pc, #432]	; (8005b6c <UART_SetConfig+0x238>)
 80059ba:	189b      	adds	r3, r3, r2
 80059bc:	791c      	ldrb	r4, [r3, #4]
 80059be:	e7e2      	b.n	8005986 <UART_SetConfig+0x52>
 80059c0:	4a6c      	ldr	r2, [pc, #432]	; (8005b74 <UART_SetConfig+0x240>)
 80059c2:	2400      	movs	r4, #0
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d0de      	beq.n	8005986 <UART_SetConfig+0x52>
 80059c8:	4a6b      	ldr	r2, [pc, #428]	; (8005b78 <UART_SetConfig+0x244>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d0db      	beq.n	8005986 <UART_SetConfig+0x52>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80059ce:	3410      	adds	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d0:	42b3      	cmp	r3, r6
 80059d2:	d1d8      	bne.n	8005986 <UART_SetConfig+0x52>
 80059d4:	22c0      	movs	r2, #192	; 0xc0
 80059d6:	2180      	movs	r1, #128	; 0x80
 80059d8:	4b63      	ldr	r3, [pc, #396]	; (8005b68 <UART_SetConfig+0x234>)
 80059da:	0112      	lsls	r2, r2, #4
 80059dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059de:	00c9      	lsls	r1, r1, #3
 80059e0:	4013      	ands	r3, r2
 80059e2:	3c0c      	subs	r4, #12
 80059e4:	428b      	cmp	r3, r1
 80059e6:	d0ce      	beq.n	8005986 <UART_SetConfig+0x52>
 80059e8:	d804      	bhi.n	80059f4 <UART_SetConfig+0xc0>
 80059ea:	2400      	movs	r4, #0
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d0ca      	beq.n	8005986 <UART_SetConfig+0x52>
 80059f0:	2410      	movs	r4, #16
 80059f2:	e7c8      	b.n	8005986 <UART_SetConfig+0x52>
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	2402      	movs	r4, #2
 80059f8:	0109      	lsls	r1, r1, #4
 80059fa:	428b      	cmp	r3, r1
 80059fc:	d0c3      	beq.n	8005986 <UART_SetConfig+0x52>
 80059fe:	3406      	adds	r4, #6
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d0c0      	beq.n	8005986 <UART_SetConfig+0x52>
 8005a04:	e7f4      	b.n	80059f0 <UART_SetConfig+0xbc>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8005a06:	f7fe fec1 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8005a0a:	2400      	movs	r4, #0
      tmpreg = HAL_RCC_GetSysClockFreq();
 8005a0c:	0003      	movs	r3, r0
    if (tmpreg != 0)
 8005a0e:	42a0      	cmp	r0, r4
 8005a10:	d106      	bne.n	8005a20 <UART_SetConfig+0xec>
}
 8005a12:	0020      	movs	r0, r4
 8005a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a16:	4b54      	ldr	r3, [pc, #336]	; (8005b68 <UART_SetConfig+0x234>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	06db      	lsls	r3, r3, #27
 8005a1c:	d421      	bmi.n	8005a62 <UART_SetConfig+0x12e>
        tmpreg = (uint32_t) HSI_VALUE;
 8005a1e:	4b57      	ldr	r3, [pc, #348]	; (8005b7c <UART_SetConfig+0x248>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8005a20:	2103      	movs	r1, #3
 8005a22:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 8005a24:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8005a26:	4351      	muls	r1, r2
 8005a28:	4299      	cmp	r1, r3
 8005a2a:	d8f2      	bhi.n	8005a12 <UART_SetConfig+0xde>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8005a2c:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8005a2e:	4299      	cmp	r1, r3
 8005a30:	d3ef      	bcc.n	8005a12 <UART_SetConfig+0xde>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8005a32:	2700      	movs	r7, #0
 8005a34:	0856      	lsrs	r6, r2, #1
 8005a36:	0e19      	lsrs	r1, r3, #24
 8005a38:	0218      	lsls	r0, r3, #8
 8005a3a:	1980      	adds	r0, r0, r6
 8005a3c:	4179      	adcs	r1, r7
 8005a3e:	003b      	movs	r3, r7
 8005a40:	f7fa fd20 	bl	8000484 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8005a44:	4b4e      	ldr	r3, [pc, #312]	; (8005b80 <UART_SetConfig+0x24c>)
 8005a46:	18c2      	adds	r2, r0, r3
 8005a48:	4b4e      	ldr	r3, [pc, #312]	; (8005b84 <UART_SetConfig+0x250>)
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d8e1      	bhi.n	8005a12 <UART_SetConfig+0xde>
           huart->Instance->BRR = tmpreg;
 8005a4e:	682b      	ldr	r3, [r5, #0]
 8005a50:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a52:	2400      	movs	r4, #0
      break;
 8005a54:	e7dd      	b.n	8005a12 <UART_SetConfig+0xde>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8005a56:	f7fe fda5 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8005a5a:	e7d6      	b.n	8005a0a <UART_SetConfig+0xd6>
      tmpreg = (uint32_t) LSE_VALUE;
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	e7de      	b.n	8005a20 <UART_SetConfig+0xec>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8005a62:	4b49      	ldr	r3, [pc, #292]	; (8005b88 <UART_SetConfig+0x254>)
 8005a64:	e7dc      	b.n	8005a20 <UART_SetConfig+0xec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	69e9      	ldr	r1, [r5, #28]
 8005a6a:	0212      	lsls	r2, r2, #8
 8005a6c:	4291      	cmp	r1, r2
 8005a6e:	d13f      	bne.n	8005af0 <UART_SetConfig+0x1bc>
    switch (clocksource)
 8005a70:	2c08      	cmp	r4, #8
 8005a72:	d83a      	bhi.n	8005aea <UART_SetConfig+0x1b6>
 8005a74:	0020      	movs	r0, r4
 8005a76:	f7fa fb47 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005a7a:	0f05      	.short	0x0f05
 8005a7c:	38303817 	.word	0x38303817
 8005a80:	3838      	.short	0x3838
 8005a82:	33          	.byte	0x33
 8005a83:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8005a84:	686a      	ldr	r2, [r5, #4]
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	0011      	movs	r1, r2
 8005a8a:	0850      	lsrs	r0, r2, #1
 8005a8c:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005a8e:	f7fa fb45 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a92:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005a94:	b280      	uxth	r0, r0
      break;
 8005a96:	e016      	b.n	8005ac6 <UART_SetConfig+0x192>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005a98:	f7fe fe88 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005a9c:	686b      	ldr	r3, [r5, #4]
 8005a9e:	0040      	lsls	r0, r0, #1
 8005aa0:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005aa2:	18c0      	adds	r0, r0, r3
 8005aa4:	6869      	ldr	r1, [r5, #4]
 8005aa6:	e7f2      	b.n	8005a8e <UART_SetConfig+0x15a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aa8:	4b2f      	ldr	r3, [pc, #188]	; (8005b68 <UART_SetConfig+0x234>)
 8005aaa:	6869      	ldr	r1, [r5, #4]
 8005aac:	681c      	ldr	r4, [r3, #0]
 8005aae:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005ab0:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ab2:	401c      	ands	r4, r3
 8005ab4:	d002      	beq.n	8005abc <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005ab6:	4b35      	ldr	r3, [pc, #212]	; (8005b8c <UART_SetConfig+0x258>)
 8005ab8:	18c0      	adds	r0, r0, r3
 8005aba:	e7e8      	b.n	8005a8e <UART_SetConfig+0x15a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8005abc:	4b34      	ldr	r3, [pc, #208]	; (8005b90 <UART_SetConfig+0x25c>)
 8005abe:	18c0      	adds	r0, r0, r3
 8005ac0:	f7fa fb2c 	bl	800011c <__udivsi3>
 8005ac4:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 8005ac6:	230f      	movs	r3, #15
 8005ac8:	0002      	movs	r2, r0
 8005aca:	439a      	bics	r2, r3
 8005acc:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8005ace:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 8005ad0:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8005ad2:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8005ad4:	4318      	orrs	r0, r3
 8005ad6:	60d0      	str	r0, [r2, #12]
 8005ad8:	e79b      	b.n	8005a12 <UART_SetConfig+0xde>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ada:	f7fe fd63 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8005ade:	e7dd      	b.n	8005a9c <UART_SetConfig+0x168>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ae0:	686b      	ldr	r3, [r5, #4]
 8005ae2:	0858      	lsrs	r0, r3, #1
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	025b      	lsls	r3, r3, #9
 8005ae8:	e7db      	b.n	8005aa2 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8005aea:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 8005aec:	2000      	movs	r0, #0
 8005aee:	e7ea      	b.n	8005ac6 <UART_SetConfig+0x192>
    switch (clocksource)
 8005af0:	2c08      	cmp	r4, #8
 8005af2:	d82c      	bhi.n	8005b4e <UART_SetConfig+0x21a>
 8005af4:	0020      	movs	r0, r4
 8005af6:	f7fa fb07 	bl	8000108 <__gnu_thumb1_case_uqi>
 8005afa:	0f05      	.short	0x0f05
 8005afc:	2a222a12 	.word	0x2a222a12
 8005b00:	2a2a      	.short	0x2a2a
 8005b02:	25          	.byte	0x25
 8005b03:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b04:	f7fe fe42 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8005b08:	6869      	ldr	r1, [r5, #4]
 8005b0a:	084b      	lsrs	r3, r1, #1
 8005b0c:	1818      	adds	r0, r3, r0
 8005b0e:	f7fa fb05 	bl	800011c <__udivsi3>
 8005b12:	b280      	uxth	r0, r0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	e79c      	b.n	8005a52 <UART_SetConfig+0x11e>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005b18:	f7fe fe48 	bl	80047ac <HAL_RCC_GetPCLK2Freq>
 8005b1c:	e7f4      	b.n	8005b08 <UART_SetConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <UART_SetConfig+0x234>)
 8005b20:	6869      	ldr	r1, [r5, #4]
 8005b22:	681c      	ldr	r4, [r3, #0]
 8005b24:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005b26:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b28:	401c      	ands	r4, r3
 8005b2a:	d001      	beq.n	8005b30 <UART_SetConfig+0x1fc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005b2c:	4b16      	ldr	r3, [pc, #88]	; (8005b88 <UART_SetConfig+0x254>)
 8005b2e:	e7ed      	b.n	8005b0c <UART_SetConfig+0x1d8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005b30:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <UART_SetConfig+0x248>)
 8005b32:	18c0      	adds	r0, r0, r3
 8005b34:	f7fa faf2 	bl	800011c <__udivsi3>
 8005b38:	b280      	uxth	r0, r0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	e769      	b.n	8005a12 <UART_SetConfig+0xde>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b3e:	f7fe fd31 	bl	80045a4 <HAL_RCC_GetSysClockFreq>
 8005b42:	e7e1      	b.n	8005b08 <UART_SetConfig+0x1d4>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	6869      	ldr	r1, [r5, #4]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	0848      	lsrs	r0, r1, #1
 8005b4c:	e7de      	b.n	8005b0c <UART_SetConfig+0x1d8>
        ret = HAL_ERROR;
 8005b4e:	2401      	movs	r4, #1
 8005b50:	e75f      	b.n	8005a12 <UART_SetConfig+0xde>
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	40004800 	.word	0x40004800
 8005b58:	efff69f3 	.word	0xefff69f3
 8005b5c:	ffffcfff 	.word	0xffffcfff
 8005b60:	fffff4ff 	.word	0xfffff4ff
 8005b64:	40013800 	.word	0x40013800
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	08007f39 	.word	0x08007f39
 8005b70:	40004400 	.word	0x40004400
 8005b74:	40004c00 	.word	0x40004c00
 8005b78:	40005000 	.word	0x40005000
 8005b7c:	00f42400 	.word	0x00f42400
 8005b80:	fffffd00 	.word	0xfffffd00
 8005b84:	000ffcff 	.word	0x000ffcff
 8005b88:	003d0900 	.word	0x003d0900
 8005b8c:	007a1200 	.word	0x007a1200
 8005b90:	01e84800 	.word	0x01e84800

08005b94 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b94:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005b96:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b98:	07da      	lsls	r2, r3, #31
 8005b9a:	d506      	bpl.n	8005baa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b9c:	6801      	ldr	r1, [r0, #0]
 8005b9e:	4c28      	ldr	r4, [pc, #160]	; (8005c40 <UART_AdvFeatureConfig+0xac>)
 8005ba0:	684a      	ldr	r2, [r1, #4]
 8005ba2:	4022      	ands	r2, r4
 8005ba4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005ba6:	4322      	orrs	r2, r4
 8005ba8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005baa:	079a      	lsls	r2, r3, #30
 8005bac:	d506      	bpl.n	8005bbc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bae:	6801      	ldr	r1, [r0, #0]
 8005bb0:	4c24      	ldr	r4, [pc, #144]	; (8005c44 <UART_AdvFeatureConfig+0xb0>)
 8005bb2:	684a      	ldr	r2, [r1, #4]
 8005bb4:	4022      	ands	r2, r4
 8005bb6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005bb8:	4322      	orrs	r2, r4
 8005bba:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bbc:	075a      	lsls	r2, r3, #29
 8005bbe:	d506      	bpl.n	8005bce <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bc0:	6801      	ldr	r1, [r0, #0]
 8005bc2:	4c21      	ldr	r4, [pc, #132]	; (8005c48 <UART_AdvFeatureConfig+0xb4>)
 8005bc4:	684a      	ldr	r2, [r1, #4]
 8005bc6:	4022      	ands	r2, r4
 8005bc8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005bca:	4322      	orrs	r2, r4
 8005bcc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bce:	071a      	lsls	r2, r3, #28
 8005bd0:	d506      	bpl.n	8005be0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bd2:	6801      	ldr	r1, [r0, #0]
 8005bd4:	4c1d      	ldr	r4, [pc, #116]	; (8005c4c <UART_AdvFeatureConfig+0xb8>)
 8005bd6:	684a      	ldr	r2, [r1, #4]
 8005bd8:	4022      	ands	r2, r4
 8005bda:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005bdc:	4322      	orrs	r2, r4
 8005bde:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005be0:	06da      	lsls	r2, r3, #27
 8005be2:	d506      	bpl.n	8005bf2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005be4:	6801      	ldr	r1, [r0, #0]
 8005be6:	4c1a      	ldr	r4, [pc, #104]	; (8005c50 <UART_AdvFeatureConfig+0xbc>)
 8005be8:	688a      	ldr	r2, [r1, #8]
 8005bea:	4022      	ands	r2, r4
 8005bec:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005bee:	4322      	orrs	r2, r4
 8005bf0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bf2:	069a      	lsls	r2, r3, #26
 8005bf4:	d506      	bpl.n	8005c04 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf6:	6801      	ldr	r1, [r0, #0]
 8005bf8:	4c16      	ldr	r4, [pc, #88]	; (8005c54 <UART_AdvFeatureConfig+0xc0>)
 8005bfa:	688a      	ldr	r2, [r1, #8]
 8005bfc:	4022      	ands	r2, r4
 8005bfe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005c00:	4322      	orrs	r2, r4
 8005c02:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c04:	065a      	lsls	r2, r3, #25
 8005c06:	d510      	bpl.n	8005c2a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c08:	6801      	ldr	r1, [r0, #0]
 8005c0a:	4d13      	ldr	r5, [pc, #76]	; (8005c58 <UART_AdvFeatureConfig+0xc4>)
 8005c0c:	684a      	ldr	r2, [r1, #4]
 8005c0e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005c10:	402a      	ands	r2, r5
 8005c12:	4322      	orrs	r2, r4
 8005c14:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	0352      	lsls	r2, r2, #13
 8005c1a:	4294      	cmp	r4, r2
 8005c1c:	d105      	bne.n	8005c2a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c1e:	684a      	ldr	r2, [r1, #4]
 8005c20:	4c0e      	ldr	r4, [pc, #56]	; (8005c5c <UART_AdvFeatureConfig+0xc8>)
 8005c22:	4022      	ands	r2, r4
 8005c24:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005c26:	4322      	orrs	r2, r4
 8005c28:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c2a:	061b      	lsls	r3, r3, #24
 8005c2c:	d506      	bpl.n	8005c3c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c2e:	6802      	ldr	r2, [r0, #0]
 8005c30:	490b      	ldr	r1, [pc, #44]	; (8005c60 <UART_AdvFeatureConfig+0xcc>)
 8005c32:	6853      	ldr	r3, [r2, #4]
 8005c34:	400b      	ands	r3, r1
 8005c36:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	6053      	str	r3, [r2, #4]
}
 8005c3c:	bd30      	pop	{r4, r5, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	fffdffff 	.word	0xfffdffff
 8005c44:	fffeffff 	.word	0xfffeffff
 8005c48:	fffbffff 	.word	0xfffbffff
 8005c4c:	ffff7fff 	.word	0xffff7fff
 8005c50:	ffffefff 	.word	0xffffefff
 8005c54:	ffffdfff 	.word	0xffffdfff
 8005c58:	ffefffff 	.word	0xffefffff
 8005c5c:	ff9fffff 	.word	0xff9fffff
 8005c60:	fff7ffff 	.word	0xfff7ffff

08005c64 <UART_WaitOnFlagUntilTimeout>:
{
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	0004      	movs	r4, r0
 8005c68:	000e      	movs	r6, r1
 8005c6a:	0015      	movs	r5, r2
 8005c6c:	001f      	movs	r7, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	69d3      	ldr	r3, [r2, #28]
 8005c72:	4033      	ands	r3, r6
 8005c74:	1b9b      	subs	r3, r3, r6
 8005c76:	4259      	negs	r1, r3
 8005c78:	414b      	adcs	r3, r1
 8005c7a:	42ab      	cmp	r3, r5
 8005c7c:	d001      	beq.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8005c7e:	2000      	movs	r0, #0
 8005c80:	e018      	b.n	8005cb4 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8005c82:	9b06      	ldr	r3, [sp, #24]
 8005c84:	3301      	adds	r3, #1
 8005c86:	d0f3      	beq.n	8005c70 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005c88:	9b06      	ldr	r3, [sp, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d113      	bne.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	490c      	ldr	r1, [pc, #48]	; (8005cc4 <UART_WaitOnFlagUntilTimeout+0x60>)
 8005c92:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8005c94:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c96:	400a      	ands	r2, r1
 8005c98:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	31a3      	adds	r1, #163	; 0xa3
 8005c9e:	31ff      	adds	r1, #255	; 0xff
 8005ca0:	438a      	bics	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8005ca4:	0022      	movs	r2, r4
 8005ca6:	2320      	movs	r3, #32
 8005ca8:	3269      	adds	r2, #105	; 0x69
 8005caa:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8005cac:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8005cae:	2300      	movs	r3, #0
 8005cb0:	3468      	adds	r4, #104	; 0x68
 8005cb2:	7023      	strb	r3, [r4, #0]
}
 8005cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005cb6:	f7fd fdb7 	bl	8003828 <HAL_GetTick>
 8005cba:	9b06      	ldr	r3, [sp, #24]
 8005cbc:	1bc0      	subs	r0, r0, r7
 8005cbe:	4283      	cmp	r3, r0
 8005cc0:	d2d5      	bcs.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xa>
 8005cc2:	e7e4      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x2a>
 8005cc4:	fffffe5f 	.word	0xfffffe5f

08005cc8 <UART_CheckIdleState>:
{
 8005cc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cca:	2600      	movs	r6, #0
{
 8005ccc:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cce:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8005cd0:	f7fd fdaa 	bl	8003828 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cd4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005cd6:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	071b      	lsls	r3, r3, #28
 8005cdc:	d417      	bmi.n	8005d0e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	075b      	lsls	r3, r3, #29
 8005ce4:	d50a      	bpl.n	8005cfc <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce6:	2180      	movs	r1, #128	; 0x80
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <UART_CheckIdleState+0x60>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	03c9      	lsls	r1, r1, #15
 8005cf0:	002b      	movs	r3, r5
 8005cf2:	0020      	movs	r0, r4
 8005cf4:	f7ff ffb6 	bl	8005c64 <UART_WaitOnFlagUntilTimeout>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d113      	bne.n	8005d24 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8005cfc:	0022      	movs	r2, r4
 8005cfe:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005d00:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8005d02:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8005d04:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8005d06:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8005d08:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8005d0a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005d0c:	e00b      	b.n	8005d26 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d0e:	2180      	movs	r1, #128	; 0x80
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <UART_CheckIdleState+0x60>)
 8005d12:	0032      	movs	r2, r6
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	0389      	lsls	r1, r1, #14
 8005d18:	0003      	movs	r3, r0
 8005d1a:	0020      	movs	r0, r4
 8005d1c:	f7ff ffa2 	bl	8005c64 <UART_WaitOnFlagUntilTimeout>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d0dc      	beq.n	8005cde <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005d24:	2003      	movs	r0, #3
}
 8005d26:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005d28:	01ffffff 	.word	0x01ffffff

08005d2c <HAL_UART_Init>:
{
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8005d30:	d101      	bne.n	8005d36 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005d32:	2001      	movs	r0, #1
}
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8005d36:	0005      	movs	r5, r0
 8005d38:	3569      	adds	r5, #105	; 0x69
 8005d3a:	782b      	ldrb	r3, [r5, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8005d42:	0002      	movs	r2, r0
 8005d44:	3268      	adds	r2, #104	; 0x68
 8005d46:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005d48:	f001 f9aa 	bl	80070a0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005d4c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005d4e:	2101      	movs	r1, #1
 8005d50:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005d52:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8005d54:	6813      	ldr	r3, [r2, #0]
 8005d56:	438b      	bics	r3, r1
 8005d58:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 8005d60:	0020      	movs	r0, r4
 8005d62:	f7ff ff17 	bl	8005b94 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d66:	0020      	movs	r0, r4
 8005d68:	f7ff fde4 	bl	8005934 <UART_SetConfig>
 8005d6c:	2801      	cmp	r0, #1
 8005d6e:	d0e0      	beq.n	8005d32 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	4908      	ldr	r1, [pc, #32]	; (8005d94 <HAL_UART_Init+0x68>)
 8005d74:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005d76:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d78:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d7a:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	438a      	bics	r2, r1
 8005d82:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005d84:	2201      	movs	r2, #1
 8005d86:	6819      	ldr	r1, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005d8c:	f7ff ff9c 	bl	8005cc8 <UART_CheckIdleState>
 8005d90:	e7d0      	b.n	8005d34 <HAL_UART_Init+0x8>
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	ffffb7ff 	.word	0xffffb7ff

08005d98 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d98:	4770      	bx	lr
	...

08005d9c <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8005d9c:	b510      	push	{r4, lr}
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d9e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005da2:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8005da4:	2900      	cmp	r1, #0
 8005da6:	d008      	beq.n	8005dba <LPM_SetOffMode+0x1e>
 8005da8:	2901      	cmp	r1, #1
 8005daa:	d103      	bne.n	8005db4 <LPM_SetOffMode+0x18>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 8005dac:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <LPM_SetOffMode+0x28>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4310      	orrs	r0, r2
 8005db2:	6018      	str	r0, [r3, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db4:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 8005db8:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 8005dba:	4a02      	ldr	r2, [pc, #8]	; (8005dc4 <LPM_SetOffMode+0x28>)
 8005dbc:	6813      	ldr	r3, [r2, #0]
 8005dbe:	4383      	bics	r3, r0
 8005dc0:	6013      	str	r3, [r2, #0]
      break;
 8005dc2:	e7f7      	b.n	8005db4 <LPM_SetOffMode+0x18>
 8005dc4:	200001c0 	.word	0x200001c0

08005dc8 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8005dc8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005dca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005dce:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	d008      	beq.n	8005de6 <LPM_SetStopMode+0x1e>
 8005dd4:	2901      	cmp	r1, #1
 8005dd6:	d103      	bne.n	8005de0 <LPM_SetStopMode+0x18>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <LPM_SetStopMode+0x28>)
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	4310      	orrs	r0, r2
 8005dde:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de0:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 8005de4:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 8005de6:	4a02      	ldr	r2, [pc, #8]	; (8005df0 <LPM_SetStopMode+0x28>)
 8005de8:	6853      	ldr	r3, [r2, #4]
 8005dea:	4383      	bics	r3, r0
 8005dec:	6053      	str	r3, [r2, #4]
      break;
 8005dee:	e7f7      	b.n	8005de0 <LPM_SetStopMode+0x18>
 8005df0:	200001c0 	.word	0x200001c0

08005df4 <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005df4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005df8:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
  {
    mode_selected = LPM_SleepMode;
 8005dfa:	2000      	movs	r0, #0
  if(StopModeDisable )
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <LPM_GetMode+0x20>)
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	4281      	cmp	r1, r0
 8005e02:	d103      	bne.n	8005e0c <LPM_GetMode+0x18>
  }
  else
  {
    if(OffModeDisable)
 8005e04:	681b      	ldr	r3, [r3, #0]
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 8005e06:	4258      	negs	r0, r3
 8005e08:	4158      	adcs	r0, r3
 8005e0a:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0c:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 8005e10:	4770      	bx	lr
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	200001c0 	.word	0x200001c0

08005e18 <LPM_ExitSleepMode>:
 8005e18:	4770      	bx	lr

08005e1a <LPM_EnterOffMode>:
 8005e1a:	4770      	bx	lr

08005e1c <LPM_ExitOffMode>:
__weak void LPM_EnterSleepMode(void) {}
__weak void LPM_ExitSleepMode(void) {}
__weak void LPM_EnterStopMode(void) {}
__weak void LPM_ExitStopMode(void) {}
__weak void LPM_EnterOffMode(void) {}
__weak void LPM_ExitOffMode(void) {}
 8005e1c:	4770      	bx	lr
	...

08005e20 <LPM_EnterLowPower>:
  if( StopModeDisable )
 8005e20:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <LPM_EnterLowPower+0x30>)
{
 8005e22:	b510      	push	{r4, lr}
  if( StopModeDisable )
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	2a00      	cmp	r2, #0
 8005e28:	d004      	beq.n	8005e34 <LPM_EnterLowPower+0x14>
    LPM_EnterSleepMode();
 8005e2a:	f001 f871 	bl	8006f10 <LPM_EnterSleepMode>
    LPM_ExitSleepMode();
 8005e2e:	f7ff fff3 	bl	8005e18 <LPM_ExitSleepMode>
}
 8005e32:	bd10      	pop	{r4, pc}
    if( OffModeDisable )
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <LPM_EnterLowPower+0x24>
      LPM_EnterStopMode();
 8005e3a:	f001 f81d 	bl	8006e78 <LPM_EnterStopMode>
      LPM_ExitStopMode();
 8005e3e:	f001 f837 	bl	8006eb0 <LPM_ExitStopMode>
 8005e42:	e7f6      	b.n	8005e32 <LPM_EnterLowPower+0x12>
      LPM_EnterOffMode();
 8005e44:	f7ff ffe9 	bl	8005e1a <LPM_EnterOffMode>
      LPM_ExitOffMode();
 8005e48:	f7ff ffe8 	bl	8005e1c <LPM_ExitOffMode>
  return;
 8005e4c:	e7f1      	b.n	8005e32 <LPM_EnterLowPower+0x12>
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	200001c0 	.word	0x200001c0

08005e54 <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 8005e54:	8843      	ldrh	r3, [r0, #2]
{
 8005e56:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	6884      	ldr	r4, [r0, #8]
 8005e5c:	8042      	strh	r2, [r0, #2]
 8005e5e:	0a0a      	lsrs	r2, r1, #8
 8005e60:	54e2      	strb	r2, [r4, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8005e62:	8842      	ldrh	r2, [r0, #2]
 8005e64:	88c3      	ldrh	r3, [r0, #6]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d101      	bne.n	8005e6e <add_elementSize_and_inc_writeIdx+0x1a>
  {
    queue->queue_write_idx=0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	8043      	strh	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 8005e6e:	8843      	ldrh	r3, [r0, #2]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	8042      	strh	r2, [r0, #2]
 8005e74:	6882      	ldr	r2, [r0, #8]
 8005e76:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8005e78:	8842      	ldrh	r2, [r0, #2]
 8005e7a:	88c3      	ldrh	r3, [r0, #6]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d101      	bne.n	8005e84 <add_elementSize_and_inc_writeIdx+0x30>
  {
    queue->queue_write_idx=0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	8043      	strh	r3, [r0, #2]
  }
}
 8005e84:	bd10      	pop	{r4, pc}

08005e86 <circular_queue_init>:
  queue->queue_read_idx=0;
 8005e86:	2300      	movs	r3, #0
  queue->queue_buff=queue_buff;
 8005e88:	6081      	str	r1, [r0, #8]
  queue->queue_read_idx=0;
 8005e8a:	8003      	strh	r3, [r0, #0]
  queue->queue_write_idx=0;
 8005e8c:	8043      	strh	r3, [r0, #2]
  queue->queue_nb_element=0;
 8005e8e:	8083      	strh	r3, [r0, #4]
  queue->queue_size=queue_size;
 8005e90:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 8005e92:	7303      	strb	r3, [r0, #12]
}
 8005e94:	4770      	bx	lr

08005e96 <circular_queue_add>:
{
 8005e96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8005e98:	8803      	ldrh	r3, [r0, #0]
{
 8005e9a:	0015      	movs	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8005e9c:	8842      	ldrh	r2, [r0, #2]
{
 8005e9e:	0004      	movs	r4, r0
 8005ea0:	000f      	movs	r7, r1
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d301      	bcc.n	8005eaa <circular_queue_add+0x14>
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 8005ea6:	88c1      	ldrh	r1, [r0, #6]
 8005ea8:	185b      	adds	r3, r3, r1
  if ( queue->queue_full==1)
 8005eaa:	7b21      	ldrb	r1, [r4, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	b21b      	sxth	r3, r3
  if ( queue->queue_full==1)
 8005eb0:	2901      	cmp	r1, #1
 8005eb2:	d100      	bne.n	8005eb6 <circular_queue_add+0x20>
    free_size=0;
 8005eb4:	2300      	movs	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 8005eb6:	1c69      	adds	r1, r5, #1
 8005eb8:	4299      	cmp	r1, r3
 8005eba:	da27      	bge.n	8005f0c <circular_queue_add+0x76>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 8005ebc:	18a8      	adds	r0, r5, r2
 8005ebe:	88e1      	ldrh	r1, [r4, #6]
 8005ec0:	3001      	adds	r0, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 8005ec2:	4288      	cmp	r0, r1
 8005ec4:	db02      	blt.n	8005ecc <circular_queue_add+0x36>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 8005ec6:	3902      	subs	r1, #2
 8005ec8:	428a      	cmp	r2, r1
 8005eca:	db1f      	blt.n	8005f0c <circular_queue_add+0x76>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 8005ecc:	0029      	movs	r1, r5
 8005ece:	0020      	movs	r0, r4
 8005ed0:	f7ff ffc0 	bl	8005e54 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 8005ed4:	68a3      	ldr	r3, [r4, #8]
 8005ed6:	8862      	ldrh	r2, [r4, #2]
 8005ed8:	189a      	adds	r2, r3, r2
 8005eda:	2300      	movs	r3, #0
  while(size--)
 8005edc:	429d      	cmp	r5, r3
 8005ede:	d111      	bne.n	8005f04 <circular_queue_add+0x6e>
    queue->queue_write_idx+=buff_size;
 8005ee0:	8863      	ldrh	r3, [r4, #2]
 8005ee2:	18ed      	adds	r5, r5, r3
    if (queue->queue_write_idx==queue->queue_size)
 8005ee4:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 8005ee6:	b2ad      	uxth	r5, r5
 8005ee8:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 8005eea:	42ab      	cmp	r3, r5
 8005eec:	d101      	bne.n	8005ef2 <circular_queue_add+0x5c>
        queue->queue_write_idx=0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	8063      	strh	r3, [r4, #2]
    queue->queue_nb_element++; 
 8005ef2:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 8005ef4:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 8005efa:	8823      	ldrh	r3, [r4, #0]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d031      	beq.n	8005f64 <circular_queue_add+0xce>
    status=0;
 8005f00:	2000      	movs	r0, #0
}
 8005f02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 8005f04:	5cf9      	ldrb	r1, [r7, r3]
 8005f06:	54d1      	strb	r1, [r2, r3]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	e7e7      	b.n	8005edc <circular_queue_add+0x46>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 8005f0c:	1ce9      	adds	r1, r5, #3
 8005f0e:	428b      	cmp	r3, r1
 8005f10:	dd33      	ble.n	8005f7a <circular_queue_add+0xe4>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 8005f12:	2600      	movs	r6, #0
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 8005f14:	88e3      	ldrh	r3, [r4, #6]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 8005f16:	0020      	movs	r0, r4
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 8005f18:	3b02      	subs	r3, #2
 8005f1a:	1a9a      	subs	r2, r3, r2
 8005f1c:	b293      	uxth	r3, r2
    add_elementSize_and_inc_writeIdx(queue,top_size);
 8005f1e:	0019      	movs	r1, r3
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 8005f20:	9301      	str	r3, [sp, #4]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 8005f22:	f7ff ff97 	bl	8005e54 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 8005f26:	8863      	ldrh	r3, [r4, #2]
 8005f28:	68a2      	ldr	r2, [r4, #8]
 8005f2a:	18d3      	adds	r3, r2, r3
  while(size--)
 8005f2c:	9a01      	ldr	r2, [sp, #4]
 8005f2e:	4296      	cmp	r6, r2
 8005f30:	d11b      	bne.n	8005f6a <circular_queue_add+0xd4>
    queue->queue_write_idx=0;
 8005f32:	2300      	movs	r3, #0
    buff_size-=top_size;
 8005f34:	1bad      	subs	r5, r5, r6
 8005f36:	b2ad      	uxth	r5, r5
    queue->queue_write_idx=0;
 8005f38:	8063      	strh	r3, [r4, #2]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 8005f3a:	0029      	movs	r1, r5
 8005f3c:	0020      	movs	r0, r4
 8005f3e:	f7ff ff89 	bl	8005e54 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 8005f42:	68a3      	ldr	r3, [r4, #8]
 8005f44:	8862      	ldrh	r2, [r4, #2]
 8005f46:	19be      	adds	r6, r7, r6
 8005f48:	189a      	adds	r2, r3, r2
 8005f4a:	2300      	movs	r3, #0
  while(size--)
 8005f4c:	429d      	cmp	r5, r3
 8005f4e:	d110      	bne.n	8005f72 <circular_queue_add+0xdc>
    queue->queue_write_idx+=buff_size;
 8005f50:	8863      	ldrh	r3, [r4, #2]
 8005f52:	18ed      	adds	r5, r5, r3
    queue->queue_nb_element+=2;
 8005f54:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 8005f56:	b2ad      	uxth	r5, r5
    queue->queue_nb_element+=2;
 8005f58:	3302      	adds	r3, #2
 8005f5a:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 8005f5c:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 8005f5e:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	d1cd      	bne.n	8005f00 <circular_queue_add+0x6a>
      queue->queue_full=1;
 8005f64:	2301      	movs	r3, #1
 8005f66:	7323      	strb	r3, [r4, #12]
 8005f68:	e7ca      	b.n	8005f00 <circular_queue_add+0x6a>
    *out++= *in++;
 8005f6a:	5dba      	ldrb	r2, [r7, r6]
 8005f6c:	559a      	strb	r2, [r3, r6]
 8005f6e:	3601      	adds	r6, #1
 8005f70:	e7dc      	b.n	8005f2c <circular_queue_add+0x96>
 8005f72:	5cf1      	ldrb	r1, [r6, r3]
 8005f74:	54d1      	strb	r1, [r2, r3]
 8005f76:	3301      	adds	r3, #1
 8005f78:	e7e8      	b.n	8005f4c <circular_queue_add+0xb6>
    status=-1;
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	4240      	negs	r0, r0
  return status;
 8005f7e:	e7c0      	b.n	8005f02 <circular_queue_add+0x6c>

08005f80 <circular_queue_get>:
{
 8005f80:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 8005f82:	8883      	ldrh	r3, [r0, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <circular_queue_get+0x34>
    uint16_t read_idx=queue->queue_read_idx;
 8005f88:	8804      	ldrh	r4, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 8005f8a:	6885      	ldr	r5, [r0, #8]
 8005f8c:	1c63      	adds	r3, r4, #1
    if (read_idx==queue->queue_size)
 8005f8e:	88c6      	ldrh	r6, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 8005f90:	5d2c      	ldrb	r4, [r5, r4]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	0224      	lsls	r4, r4, #8
    if (read_idx==queue->queue_size)
 8005f96:	42b3      	cmp	r3, r6
 8005f98:	d100      	bne.n	8005f9c <circular_queue_get+0x1c>
      read_idx=0;
 8005f9a:	2300      	movs	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 8005f9c:	1c58      	adds	r0, r3, #1
 8005f9e:	5ceb      	ldrb	r3, [r5, r3]
 8005fa0:	b280      	uxth	r0, r0
 8005fa2:	431c      	orrs	r4, r3
    if (read_idx==queue->queue_size)
 8005fa4:	4286      	cmp	r6, r0
 8005fa6:	d100      	bne.n	8005faa <circular_queue_get+0x2a>
      read_idx=0;
 8005fa8:	2000      	movs	r0, #0
    *buff= queue->queue_buff+read_idx;
 8005faa:	1828      	adds	r0, r5, r0
 8005fac:	6008      	str	r0, [r1, #0]
    status=0;
 8005fae:	2000      	movs	r0, #0
    * buff_size=size;
 8005fb0:	8014      	strh	r4, [r2, #0]
}
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	4240      	negs	r0, r0
  return status;
 8005fb8:	e7fb      	b.n	8005fb2 <circular_queue_get+0x32>

08005fba <circular_queue_remove>:
{
 8005fba:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 8005fbc:	8882      	ldrh	r2, [r0, #4]
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	d023      	beq.n	800600a <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 8005fc2:	8803      	ldrh	r3, [r0, #0]
 8005fc4:	6885      	ldr	r5, [r0, #8]
 8005fc6:	1c59      	adds	r1, r3, #1
 8005fc8:	b289      	uxth	r1, r1
 8005fca:	8001      	strh	r1, [r0, #0]
 8005fcc:	5ceb      	ldrb	r3, [r5, r3]
    if (queue->queue_read_idx==queue->queue_size)
 8005fce:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 8005fd0:	021b      	lsls	r3, r3, #8
    if (queue->queue_read_idx==queue->queue_size)
 8005fd2:	42a1      	cmp	r1, r4
 8005fd4:	d101      	bne.n	8005fda <circular_queue_remove+0x20>
      queue->queue_read_idx=0;
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	8001      	strh	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 8005fda:	8806      	ldrh	r6, [r0, #0]
 8005fdc:	1c71      	adds	r1, r6, #1
 8005fde:	b289      	uxth	r1, r1
 8005fe0:	8001      	strh	r1, [r0, #0]
 8005fe2:	5dad      	ldrb	r5, [r5, r6]
 8005fe4:	432b      	orrs	r3, r5
    if (queue->queue_read_idx==queue->queue_size)
 8005fe6:	428c      	cmp	r4, r1
 8005fe8:	d101      	bne.n	8005fee <circular_queue_remove+0x34>
      queue->queue_read_idx=0;
 8005fea:	2100      	movs	r1, #0
 8005fec:	8001      	strh	r1, [r0, #0]
    queue->queue_read_idx+=size;
 8005fee:	8801      	ldrh	r1, [r0, #0]
 8005ff0:	185b      	adds	r3, r3, r1
 8005ff2:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	d006      	beq.n	8006006 <circular_queue_remove+0x4c>
        queue->queue_read_idx=0;
 8005ff8:	8003      	strh	r3, [r0, #0]
    queue->queue_full=0;
 8005ffa:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 8005ffc:	3a01      	subs	r2, #1
 8005ffe:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 8006000:	7303      	strb	r3, [r0, #12]
    status=0;
 8006002:	0018      	movs	r0, r3
}
 8006004:	bd70      	pop	{r4, r5, r6, pc}
        queue->queue_read_idx=0;
 8006006:	2300      	movs	r3, #0
 8006008:	e7f6      	b.n	8005ff8 <circular_queue_remove+0x3e>
      status=-1;
 800600a:	2001      	movs	r0, #1
 800600c:	4240      	negs	r0, r0
  return status;
 800600e:	e7f9      	b.n	8006004 <circular_queue_remove+0x4a>

08006010 <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 8006010:	8880      	ldrh	r0, [r0, #4]
 8006012:	4243      	negs	r3, r0
 8006014:	4158      	adcs	r0, r3
 8006016:	4240      	negs	r0, r0
}
 8006018:	4770      	bx	lr

0800601a <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 800601a:	b570      	push	{r4, r5, r6, lr}
 800601c:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800601e:	f000 fa69 	bl	80064f4 <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 8006022:	2301      	movs	r3, #1
 8006024:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8006026:	0005      	movs	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8006028:	6826      	ldr	r6, [r4, #0]
 800602a:	f000 fa77 	bl	800651c <HW_RTC_GetTimerElapsedTime>
 800602e:	1828      	adds	r0, r5, r0
 8006030:	4286      	cmp	r6, r0
 8006032:	d203      	bcs.n	800603c <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8006034:	f000 fa72 	bl	800651c <HW_RTC_GetTimerElapsedTime>
 8006038:	182d      	adds	r5, r5, r0
 800603a:	6025      	str	r5, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	f000 fa99 	bl	8006574 <HW_RTC_SetAlarm>
}
 8006042:	bd70      	pop	{r4, r5, r6, pc}

08006044 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 8006044:	4a05      	ldr	r2, [pc, #20]	; (800605c <TimerInsertNewHeadTimer+0x18>)
{
 8006046:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 8006048:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsNext2Expire = false;
 800604e:	2100      	movs	r1, #0
 8006050:	7259      	strb	r1, [r3, #9]
  }

  obj->Next = cur;
 8006052:	6143      	str	r3, [r0, #20]
  TimerListHead = obj;
 8006054:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8006056:	f7ff ffe0 	bl	800601a <TimerSetTimeout>
}
 800605a:	bd10      	pop	{r4, pc}
 800605c:	200001c8 	.word	0x200001c8

08006060 <TimerInit>:
  obj->Timestamp = 0;
 8006060:	2300      	movs	r3, #0
  obj->Callback = callback;
 8006062:	60c1      	str	r1, [r0, #12]
  obj->Timestamp = 0;
 8006064:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 8006066:	6043      	str	r3, [r0, #4]
  obj->IsStarted = false;
 8006068:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 800606a:	7243      	strb	r3, [r0, #9]
  obj->Context = NULL;
 800606c:	6103      	str	r3, [r0, #16]
  obj->Next = NULL;
 800606e:	6143      	str	r3, [r0, #20]
}
 8006070:	4770      	bx	lr
	...

08006074 <TimerStart>:
{
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006078:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800607c:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800607e:	2800      	cmp	r0, #0
 8006080:	d010      	beq.n	80060a4 <TimerStart+0x30>
  TimerEvent_t* cur = TimerListHead;
 8006082:	4e18      	ldr	r6, [pc, #96]	; (80060e4 <TimerStart+0x70>)
 8006084:	6832      	ldr	r2, [r6, #0]
 8006086:	0013      	movs	r3, r2
  while( cur != NULL )
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10e      	bne.n	80060aa <TimerStart+0x36>
  obj->Timestamp = obj->ReloadValue;
 800608c:	6861      	ldr	r1, [r4, #4]
  obj->IsNext2Expire = false;
 800608e:	7263      	strb	r3, [r4, #9]
  obj->Timestamp = obj->ReloadValue;
 8006090:	6021      	str	r1, [r4, #0]
  obj->IsStarted = true;
 8006092:	2101      	movs	r1, #1
 8006094:	7221      	strb	r1, [r4, #8]
  if( TimerListHead == NULL )
 8006096:	2a00      	cmp	r2, #0
 8006098:	d10b      	bne.n	80060b2 <TimerStart+0x3e>
    HW_RTC_SetTimerContext( );
 800609a:	f000 fb49 	bl	8006730 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 800609e:	0020      	movs	r0, r4
 80060a0:	f7ff ffd0 	bl	8006044 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a4:	f385 8810 	msr	PRIMASK, r5
}
 80060a8:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 80060aa:	429c      	cmp	r4, r3
 80060ac:	d0fa      	beq.n	80060a4 <TimerStart+0x30>
    cur = cur->Next;
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	e7ea      	b.n	8006088 <TimerStart+0x14>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 80060b2:	f000 fa33 	bl	800651c <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	18c0      	adds	r0, r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 80060ba:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 80060bc:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4290      	cmp	r0, r2
 80060c2:	d3ec      	bcc.n	800609e <TimerStart+0x2a>
  TimerEvent_t* next = TimerListHead->Next;
 80060c4:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 80060c6:	6959      	ldr	r1, [r3, #20]
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d102      	bne.n	80060d2 <TimerStart+0x5e>
  cur->Next = obj;
 80060cc:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 80060ce:	6161      	str	r1, [r4, #20]
 80060d0:	e7e8      	b.n	80060a4 <TimerStart+0x30>
    if( obj->Timestamp  > next->Timestamp )
 80060d2:	6811      	ldr	r1, [r2, #0]
 80060d4:	4288      	cmp	r0, r1
 80060d6:	d902      	bls.n	80060de <TimerStart+0x6a>
        next = next->Next;
 80060d8:	0013      	movs	r3, r2
 80060da:	6952      	ldr	r2, [r2, #20]
 80060dc:	e7f3      	b.n	80060c6 <TimerStart+0x52>
        cur->Next = obj;
 80060de:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 80060e0:	6162      	str	r2, [r4, #20]
 80060e2:	e7df      	b.n	80060a4 <TimerStart+0x30>
 80060e4:	200001c8 	.word	0x200001c8

080060e8 <TimerIrqHandler>:
{
 80060e8:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 80060ea:	f000 fb6d 	bl	80067c8 <HW_RTC_GetTimerContext>
 80060ee:	0004      	movs	r4, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 80060f0:	f000 fb1e 	bl	8006730 <HW_RTC_SetTimerContext>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 80060f4:	1b00      	subs	r0, r0, r4
  if ( TimerListHead != NULL )
 80060f6:	4c1c      	ldr	r4, [pc, #112]	; (8006168 <TimerIrqHandler+0x80>)
 80060f8:	6822      	ldr	r2, [r4, #0]
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	d015      	beq.n	800612a <TimerIrqHandler+0x42>
 80060fe:	0013      	movs	r3, r2
        next->Timestamp = 0 ;
 8006100:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <TimerIrqHandler+0x2e>
    TimerListHead = TimerListHead->Next;
 8006108:	6951      	ldr	r1, [r2, #20]
    cur->IsStarted = false;
 800610a:	7213      	strb	r3, [r2, #8]
    exec_cb( cur->Callback, cur->Context );
 800610c:	68d3      	ldr	r3, [r2, #12]
    TimerListHead = TimerListHead->Next;
 800610e:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 8006110:	2b00      	cmp	r3, #0
 8006112:	d108      	bne.n	8006126 <TimerIrqHandler+0x3e>
 8006114:	e7fe      	b.n	8006114 <TimerIrqHandler+0x2c>
      if (next->Timestamp > DeltaContext)
 8006116:	6819      	ldr	r1, [r3, #0]
 8006118:	4288      	cmp	r0, r1
 800611a:	d202      	bcs.n	8006122 <TimerIrqHandler+0x3a>
        next->Timestamp -= DeltaContext;
 800611c:	1a09      	subs	r1, r1, r0
 800611e:	6019      	str	r1, [r3, #0]
 8006120:	e7ef      	b.n	8006102 <TimerIrqHandler+0x1a>
        next->Timestamp = 0 ;
 8006122:	601d      	str	r5, [r3, #0]
 8006124:	e7ed      	b.n	8006102 <TimerIrqHandler+0x1a>
    exec_cb( cur->Callback, cur->Context );
 8006126:	6910      	ldr	r0, [r2, #16]
 8006128:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <TimerIrqHandler+0x56>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	2800      	cmp	r0, #0
 8006134:	d111      	bne.n	800615a <TimerIrqHandler+0x72>
}
 8006136:	bd70      	pop	{r4, r5, r6, pc}
   exec_cb( cur->Callback, cur->Context );
 8006138:	6918      	ldr	r0, [r3, #16]
 800613a:	4790      	blx	r2
 800613c:	e7f5      	b.n	800612a <TimerIrqHandler+0x42>
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800613e:	681d      	ldr	r5, [r3, #0]
 8006140:	f000 f9ec 	bl	800651c <HW_RTC_GetTimerElapsedTime>
 8006144:	4285      	cmp	r5, r0
 8006146:	d2f3      	bcs.n	8006130 <TimerIrqHandler+0x48>
   cur = TimerListHead;
 8006148:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 800614a:	695a      	ldr	r2, [r3, #20]
 800614c:	6022      	str	r2, [r4, #0]
   cur->IsStarted = false;
 800614e:	2200      	movs	r2, #0
 8006150:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	2a00      	cmp	r2, #0
 8006156:	d1ef      	bne.n	8006138 <TimerIrqHandler+0x50>
 8006158:	e7fe      	b.n	8006158 <TimerIrqHandler+0x70>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800615a:	7a43      	ldrb	r3, [r0, #9]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1ea      	bne.n	8006136 <TimerIrqHandler+0x4e>
    TimerSetTimeout( TimerListHead );
 8006160:	f7ff ff5b 	bl	800601a <TimerSetTimeout>
}
 8006164:	e7e7      	b.n	8006136 <TimerIrqHandler+0x4e>
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	200001c8 	.word	0x200001c8

0800616c <TimerStop>:
{
 800616c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800616e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006172:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 8006174:	4c12      	ldr	r4, [pc, #72]	; (80061c0 <TimerStop+0x54>)
 8006176:	6823      	ldr	r3, [r4, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <TimerStop+0x14>
 800617c:	2800      	cmp	r0, #0
 800617e:	d102      	bne.n	8006186 <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006180:	f385 8810 	msr	PRIMASK, r5
}  
 8006184:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 8006186:	2200      	movs	r2, #0
 8006188:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 800618a:	4283      	cmp	r3, r0
 800618c:	d110      	bne.n	80061b0 <TimerStop+0x44>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 800618e:	7a59      	ldrb	r1, [r3, #9]
 8006190:	695e      	ldr	r6, [r3, #20]
 8006192:	4291      	cmp	r1, r2
 8006194:	d009      	beq.n	80061aa <TimerStop+0x3e>
      TimerListHead->IsNext2Expire = false;
 8006196:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 8006198:	4296      	cmp	r6, r2
 800619a:	d004      	beq.n	80061a6 <TimerStop+0x3a>
        TimerSetTimeout( TimerListHead );
 800619c:	0030      	movs	r0, r6
        TimerListHead = TimerListHead->Next;
 800619e:	6026      	str	r6, [r4, #0]
        TimerSetTimeout( TimerListHead );
 80061a0:	f7ff ff3b 	bl	800601a <TimerSetTimeout>
 80061a4:	e7ec      	b.n	8006180 <TimerStop+0x14>
        HW_RTC_StopAlarm( );
 80061a6:	f000 f9cd 	bl	8006544 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 80061aa:	6026      	str	r6, [r4, #0]
 80061ac:	e7e8      	b.n	8006180 <TimerStop+0x14>
 80061ae:	0013      	movs	r3, r2
        cur = cur->Next;
 80061b0:	695a      	ldr	r2, [r3, #20]
    while( cur != NULL )
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	d0e4      	beq.n	8006180 <TimerStop+0x14>
      if( cur == obj )
 80061b6:	4290      	cmp	r0, r2
 80061b8:	d1f9      	bne.n	80061ae <TimerStop+0x42>
        if( cur->Next != NULL )
 80061ba:	6942      	ldr	r2, [r0, #20]
 80061bc:	615a      	str	r2, [r3, #20]
 80061be:	e7df      	b.n	8006180 <TimerStop+0x14>
 80061c0:	200001c8 	.word	0x200001c8

080061c4 <TimerSetValue>:
{
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	0005      	movs	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 80061c8:	0008      	movs	r0, r1
 80061ca:	f000 f995 	bl	80064f8 <HW_RTC_ms2Tick>
 80061ce:	0004      	movs	r4, r0
  TimerStop( obj );
 80061d0:	0028      	movs	r0, r5
 80061d2:	f7ff ffcb 	bl	800616c <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 80061d6:	f000 f98d 	bl	80064f4 <HW_RTC_GetMinimumTimeout>
 80061da:	4284      	cmp	r4, r0
 80061dc:	d200      	bcs.n	80061e0 <TimerSetValue+0x1c>
 80061de:	0004      	movs	r4, r0
  obj->Timestamp = ticks;
 80061e0:	602c      	str	r4, [r5, #0]
  obj->ReloadValue = ticks;
 80061e2:	606c      	str	r4, [r5, #4]
}
 80061e4:	bd70      	pop	{r4, r5, r6, pc}

080061e6 <TimerGetCurrentTime>:
{
 80061e6:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 80061e8:	f000 f9a4 	bl	8006534 <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 80061ec:	f000 f98c 	bl	8006508 <HW_RTC_Tick2ms>
}
 80061f0:	bd10      	pop	{r4, pc}

080061f2 <TimerGetElapsedTime>:
{
 80061f2:	b570      	push	{r4, r5, r6, lr}
 80061f4:	0005      	movs	r5, r0
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 80061f6:	f000 f99d 	bl	8006534 <HW_RTC_GetTimerValue>
 80061fa:	0004      	movs	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 80061fc:	0028      	movs	r0, r5
 80061fe:	f000 f97b 	bl	80064f8 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 8006202:	1a20      	subs	r0, r4, r0
 8006204:	f000 f980 	bl	8006508 <HW_RTC_Tick2ms>
}
 8006208:	bd70      	pop	{r4, r5, r6, pc}
	...

0800620c <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 800620c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800620e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006212:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 8006214:	4c10      	ldr	r4, [pc, #64]	; (8006258 <Trace_TxCpltCallback+0x4c>)
 8006216:	0020      	movs	r0, r4
 8006218:	f7ff fecf 	bl	8005fba <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 800621c:	0020      	movs	r0, r4
 800621e:	f7ff fef7 	bl	8006010 <circular_queue_sense>

  if ( status == 0) 
 8006222:	2800      	cmp	r0, #0
 8006224:	d10d      	bne.n	8006242 <Trace_TxCpltCallback+0x36>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 8006226:	466b      	mov	r3, sp
 8006228:	1c9e      	adds	r6, r3, #2
 800622a:	0032      	movs	r2, r6
 800622c:	a901      	add	r1, sp, #4
 800622e:	0020      	movs	r0, r4
 8006230:	f7ff fea6 	bl	8005f80 <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006234:	f385 8810 	msr	PRIMASK, r5
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 8006238:	8831      	ldrh	r1, [r6, #0]
 800623a:	9801      	ldr	r0, [sp, #4]
 800623c:	f000 fede 	bl	8006ffc <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 8006240:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 8006242:	2100      	movs	r1, #0
 8006244:	2020      	movs	r0, #32
 8006246:	f7ff fdbf 	bl	8005dc8 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 800624a:	2201      	movs	r2, #1
 800624c:	4b03      	ldr	r3, [pc, #12]	; (800625c <Trace_TxCpltCallback+0x50>)
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	f385 8810 	msr	PRIMASK, r5
}
 8006254:	e7f4      	b.n	8006240 <Trace_TxCpltCallback+0x34>
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	200001cc 	.word	0x200001cc
 800625c:	20000034 	.word	0x20000034

08006260 <TraceInit>:
{
 8006260:	b510      	push	{r4, lr}
  OutputInit(Trace_TxCpltCallback);
 8006262:	4805      	ldr	r0, [pc, #20]	; (8006278 <TraceInit+0x18>)
 8006264:	f000 feae 	bl	8006fc4 <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 8006268:	4804      	ldr	r0, [pc, #16]	; (800627c <TraceInit+0x1c>)
 800626a:	2280      	movs	r2, #128	; 0x80
 800626c:	0001      	movs	r1, r0
 800626e:	0052      	lsls	r2, r2, #1
 8006270:	3110      	adds	r1, #16
 8006272:	f7ff fe08 	bl	8005e86 <circular_queue_init>
}
 8006276:	bd10      	pop	{r4, pc}
 8006278:	0800620d 	.word	0x0800620d
 800627c:	200001cc 	.word	0x200001cc

08006280 <TraceSend>:
{
 8006280:	b40f      	push	{r0, r1, r2, r3}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 8006282:	2180      	movs	r1, #128	; 0x80
{
 8006284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006286:	b0c5      	sub	sp, #276	; 0x114
 8006288:	ab4a      	add	r3, sp, #296	; 0x128
 800628a:	cb04      	ldmia	r3!, {r2}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800628c:	0049      	lsls	r1, r1, #1
 800628e:	a804      	add	r0, sp, #16
  va_start( vaArgs, strFormat);
 8006290:	9302      	str	r3, [sp, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 8006292:	f001 f821 	bl	80072d8 <vsniprintf>
 8006296:	466b      	mov	r3, sp
 8006298:	1d9c      	adds	r4, r3, #6
 800629a:	8020      	strh	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800629c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80062a0:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 80062a2:	4813      	ldr	r0, [pc, #76]	; (80062f0 <TraceSend+0x70>)
 80062a4:	8822      	ldrh	r2, [r4, #0]
 80062a6:	a904      	add	r1, sp, #16
 80062a8:	f7ff fdf5 	bl	8005e96 <circular_queue_add>
 80062ac:	1e06      	subs	r6, r0, #0
  if ((status==0 ) && (TracePeripheralReady==SET))
 80062ae:	d11b      	bne.n	80062e8 <TraceSend+0x68>
 80062b0:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <TraceSend+0x74>)
 80062b2:	781d      	ldrb	r5, [r3, #0]
 80062b4:	b2ed      	uxtb	r5, r5
 80062b6:	2d01      	cmp	r5, #1
 80062b8:	d116      	bne.n	80062e8 <TraceSend+0x68>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 80062ba:	0022      	movs	r2, r4
 80062bc:	a903      	add	r1, sp, #12
 80062be:	480c      	ldr	r0, [pc, #48]	; (80062f0 <TraceSend+0x70>)
 80062c0:	f7ff fe5e 	bl	8005f80 <circular_queue_get>
    TracePeripheralReady = RESET;
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <TraceSend+0x74>)
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 80062c6:	0029      	movs	r1, r5
 80062c8:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 80062ca:	701e      	strb	r6, [r3, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 80062cc:	f7ff fd7c 	bl	8005dc8 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d0:	f387 8810 	msr	PRIMASK, r7
    OutputTrace(buffer, bufSize);
 80062d4:	8821      	ldrh	r1, [r4, #0]
 80062d6:	9803      	ldr	r0, [sp, #12]
 80062d8:	f000 fe90 	bl	8006ffc <vcom_Trace>
}
 80062dc:	0030      	movs	r0, r6
 80062de:	b045      	add	sp, #276	; 0x114
 80062e0:	bcf0      	pop	{r4, r5, r6, r7}
 80062e2:	bc08      	pop	{r3}
 80062e4:	b004      	add	sp, #16
 80062e6:	4718      	bx	r3
 80062e8:	f387 8810 	msr	PRIMASK, r7
 80062ec:	e7f6      	b.n	80062dc <TraceSend+0x5c>
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	200001cc 	.word	0x200001cc
 80062f4:	20000034 	.word	0x20000034

080062f8 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80062f8:	2300      	movs	r3, #0
{
 80062fa:	b510      	push	{r4, lr}
    while( size-- )
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d100      	bne.n	8006302 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 8006300:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 8006302:	5ccc      	ldrb	r4, [r1, r3]
 8006304:	54c4      	strb	r4, [r0, r3]
 8006306:	3301      	adds	r3, #1
 8006308:	e7f8      	b.n	80062fc <memcpy1+0x4>
	...

0800630c <Error_Handler>:
  __HAL_RCC_DBGMCU_CLK_DISABLE( );
#endif
}

void Error_Handler(void)
{
 800630c:	b510      	push	{r4, lr}
  PRINTF("Error_Handler\n\r");
 800630e:	4802      	ldr	r0, [pc, #8]	; (8006318 <Error_Handler+0xc>)
 8006310:	f7ff ffb6 	bl	8006280 <TraceSend>
 8006314:	e7fe      	b.n	8006314 <Error_Handler+0x8>
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	08007fed 	.word	0x08007fed

0800631c <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos=0;
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 800631c:	0001      	movs	r1, r0
 800631e:	23ff      	movs	r3, #255	; 0xff
 8006320:	4399      	bics	r1, r3
 8006322:	000b      	movs	r3, r1
{
 8006324:	0002      	movs	r2, r0
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8006326:	1e58      	subs	r0, r3, #1
 8006328:	4183      	sbcs	r3, r0
 800632a:	00d8      	lsls	r0, r3, #3
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <HW_GPIO_GetBitPos+0x30>)
 800632e:	421a      	tst	r2, r3
 8006330:	d001      	beq.n	8006336 <HW_GPIO_GetBitPos+0x1a>
 8006332:	2304      	movs	r3, #4
 8006334:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 8006336:	4b06      	ldr	r3, [pc, #24]	; (8006350 <HW_GPIO_GetBitPos+0x34>)
 8006338:	421a      	tst	r2, r3
 800633a:	d001      	beq.n	8006340 <HW_GPIO_GetBitPos+0x24>
 800633c:	2302      	movs	r3, #2
 800633e:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <HW_GPIO_GetBitPos+0x38>)
 8006342:	421a      	tst	r2, r3
 8006344:	d001      	beq.n	800634a <HW_GPIO_GetBitPos+0x2e>
 8006346:	2301      	movs	r3, #1
 8006348:	4318      	orrs	r0, r3
  
  return PinPos;
}
 800634a:	4770      	bx	lr
 800634c:	fffff0f0 	.word	0xfffff0f0
 8006350:	ffffcccc 	.word	0xffffcccc
 8006354:	ffffaaaa 	.word	0xffffaaaa

08006358 <HW_GPIO_Init>:
{
 8006358:	b530      	push	{r4, r5, lr}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800635a:	4c21      	ldr	r4, [pc, #132]	; (80063e0 <HW_GPIO_Init+0x88>)
{
 800635c:	b087      	sub	sp, #28
 800635e:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <HW_GPIO_Init+0x8c>)
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 8006360:	42a0      	cmp	r0, r4
 8006362:	d02a      	beq.n	80063ba <HW_GPIO_Init+0x62>
 8006364:	d80c      	bhi.n	8006380 <HW_GPIO_Init+0x28>
 8006366:	24a0      	movs	r4, #160	; 0xa0
 8006368:	05e4      	lsls	r4, r4, #23
 800636a:	42a0      	cmp	r0, r4
 800636c:	d017      	beq.n	800639e <HW_GPIO_Init+0x46>
 800636e:	2580      	movs	r5, #128	; 0x80
 8006370:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006372:	432c      	orrs	r4, r5
 8006374:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	402b      	ands	r3, r5
 800637a:	9305      	str	r3, [sp, #20]
 800637c:	9b05      	ldr	r3, [sp, #20]
 800637e:	e016      	b.n	80063ae <HW_GPIO_Init+0x56>
 8006380:	4c19      	ldr	r4, [pc, #100]	; (80063e8 <HW_GPIO_Init+0x90>)
 8006382:	42a0      	cmp	r0, r4
 8006384:	d022      	beq.n	80063cc <HW_GPIO_Init+0x74>
 8006386:	4c19      	ldr	r4, [pc, #100]	; (80063ec <HW_GPIO_Init+0x94>)
 8006388:	42a0      	cmp	r0, r4
 800638a:	d1f0      	bne.n	800636e <HW_GPIO_Init+0x16>
 800638c:	2508      	movs	r5, #8
 800638e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006390:	432c      	orrs	r4, r5
 8006392:	62dc      	str	r4, [r3, #44]	; 0x2c
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	402b      	ands	r3, r5
 8006398:	9304      	str	r3, [sp, #16]
 800639a:	9b04      	ldr	r3, [sp, #16]
 800639c:	e007      	b.n	80063ae <HW_GPIO_Init+0x56>
 800639e:	2501      	movs	r5, #1
 80063a0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80063a2:	432c      	orrs	r4, r5
 80063a4:	62dc      	str	r4, [r3, #44]	; 0x2c
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	402b      	ands	r3, r5
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 80063ae:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init( port, initStruct );
 80063b0:	0011      	movs	r1, r2
 80063b2:	f7fd fd2b 	bl	8003e0c <HAL_GPIO_Init>
}
 80063b6:	b007      	add	sp, #28
 80063b8:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 80063ba:	2502      	movs	r5, #2
 80063bc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80063be:	432c      	orrs	r4, r5
 80063c0:	62dc      	str	r4, [r3, #44]	; 0x2c
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	402b      	ands	r3, r5
 80063c6:	9302      	str	r3, [sp, #8]
 80063c8:	9b02      	ldr	r3, [sp, #8]
 80063ca:	e7f0      	b.n	80063ae <HW_GPIO_Init+0x56>
 80063cc:	2504      	movs	r5, #4
 80063ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80063d0:	432c      	orrs	r4, r5
 80063d2:	62dc      	str	r4, [r3, #44]	; 0x2c
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	402b      	ands	r3, r5
 80063d8:	9303      	str	r3, [sp, #12]
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	e7e7      	b.n	80063ae <HW_GPIO_Init+0x56>
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	50000400 	.word	0x50000400
 80063e4:	40021000 	.word	0x40021000
 80063e8:	50000800 	.word	0x50000800
 80063ec:	50000c00 	.word	0x50000c00

080063f0 <HW_GPIO_SetIrq>:
{
 80063f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 80063f2:	0008      	movs	r0, r1
{
 80063f4:	001c      	movs	r4, r3
 80063f6:	000d      	movs	r5, r1
 80063f8:	0016      	movs	r6, r2
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 80063fa:	f7ff ff8f 	bl	800631c <HW_GPIO_GetBitPos>
 80063fe:	4b08      	ldr	r3, [pc, #32]	; (8006420 <HW_GPIO_SetIrq+0x30>)
 8006400:	0080      	lsls	r0, r0, #2
    GpioIrq[ BitPos ] = irqHandler;
 8006402:	501c      	str	r4, [r3, r0]
  if ( irqHandler != NULL)
 8006404:	2c00      	cmp	r4, #0
 8006406:	d00a      	beq.n	800641e <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn( GPIO_Pin );
 8006408:	0028      	movs	r0, r5
 800640a:	f000 fc97 	bl	8006d3c <MSP_GetIRQn>
 800640e:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8006410:	2200      	movs	r2, #0
 8006412:	0031      	movs	r1, r6
 8006414:	f7fd fae4 	bl	80039e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 8006418:	0020      	movs	r0, r4
 800641a:	f7fd fb11 	bl	8003a40 <HAL_NVIC_EnableIRQ>
}
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	200002dc 	.word	0x200002dc

08006424 <HW_GPIO_IrqHandler>:
{
 8006424:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 8006426:	f7ff ff79 	bl	800631c <HW_GPIO_GetBitPos>
  if ( GpioIrq[ BitPos ]  != NULL)
 800642a:	4b04      	ldr	r3, [pc, #16]	; (800643c <HW_GPIO_IrqHandler+0x18>)
 800642c:	0080      	lsls	r0, r0, #2
 800642e:	58c3      	ldr	r3, [r0, r3]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HW_GPIO_IrqHandler+0x14>
    GpioIrq[ BitPos ] ( NULL );
 8006434:	2000      	movs	r0, #0
 8006436:	4798      	blx	r3
}
 8006438:	bd10      	pop	{r4, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	200002dc 	.word	0x200002dc

08006440 <HW_GPIO_Write>:
{
 8006440:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	f7fd fd9e 	bl	8003f84 <HAL_GPIO_WritePin>
}
 8006448:	bd10      	pop	{r4, pc}
	...

0800644c <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800644e:	4f23      	ldr	r7, [pc, #140]	; (80064dc <HW_RTC_GetCalendarValue+0x90>)
{
 8006450:	0006      	movs	r6, r0
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8006452:	2200      	movs	r2, #0
 8006454:	0038      	movs	r0, r7
{
 8006456:	000d      	movs	r5, r1
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8006458:	f7fe fe48 	bl	80050ec <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
    first_read = RTC_TimeStruct->SubSeconds;
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 800645c:	2200      	movs	r2, #0
 800645e:	0031      	movs	r1, r6
 8006460:	0038      	movs	r0, r7
    first_read = RTC_TimeStruct->SubSeconds;
 8006462:	686c      	ldr	r4, [r5, #4]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 8006464:	f7fe fe6c 	bl	8005140 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8006468:	2200      	movs	r2, #0
 800646a:	0029      	movs	r1, r5
 800646c:	0038      	movs	r0, r7
 800646e:	f7fe fe3d 	bl	80050ec <HAL_RTC_GetTime>
  } while (first_read != RTC_TimeStruct->SubSeconds);
 8006472:	686b      	ldr	r3, [r5, #4]
 8006474:	429c      	cmp	r4, r3
 8006476:	d1f1      	bne.n	800645c <HW_RTC_GetCalendarValue+0x10>
 
  /* calculte amount of elapsed days since 01/01/2000 */
  seconds= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 8006478:	78f3      	ldrb	r3, [r6, #3]
 800647a:	4f19      	ldr	r7, [pc, #100]	; (80064e0 <HW_RTC_GetCalendarValue+0x94>)
 800647c:	435f      	muls	r7, r3
 800647e:	3703      	adds	r7, #3
 8006480:	08bf      	lsrs	r7, r7, #2

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8006482:	079b      	lsls	r3, r3, #30
 8006484:	d027      	beq.n	80064d6 <HW_RTC_GetCalendarValue+0x8a>
 8006486:	4917      	ldr	r1, [pc, #92]	; (80064e4 <HW_RTC_GetCalendarValue+0x98>)
 
  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 8006488:	223d      	movs	r2, #61	; 0x3d
 800648a:	7870      	ldrb	r0, [r6, #1]
 800648c:	3801      	subs	r0, #1
 800648e:	4342      	muls	r2, r0
 8006490:	3201      	adds	r2, #1
 8006492:	0fd3      	lsrs	r3, r2, #31
 8006494:	189b      	adds	r3, r3, r2

  seconds += (RTC_DateStruct->Date -1);
 8006496:	78b2      	ldrb	r2, [r6, #2]
  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 8006498:	105b      	asrs	r3, r3, #1
 800649a:	3a01      	subs	r2, #1
 800649c:	19d2      	adds	r2, r2, r7
 800649e:	189a      	adds	r2, r3, r2
 80064a0:	000b      	movs	r3, r1
 80064a2:	0040      	lsls	r0, r0, #1
 80064a4:	40c3      	lsrs	r3, r0
 80064a6:	2103      	movs	r1, #3
 80064a8:	400b      	ands	r3, r1
  seconds += (RTC_DateStruct->Date -1);
 80064aa:	1ad3      	subs	r3, r2, r3
  
  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY; 
 80064ac:	4a0e      	ldr	r2, [pc, #56]	; (80064e8 <HW_RTC_GetCalendarValue+0x9c>)

  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds + 
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 80064ae:	7829      	ldrb	r1, [r5, #0]
  seconds *= SECONDS_IN_1DAY; 
 80064b0:	435a      	muls	r2, r3
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 80064b2:	23e1      	movs	r3, #225	; 0xe1
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	434b      	muls	r3, r1
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 80064b8:	213c      	movs	r1, #60	; 0x3c
 80064ba:	7868      	ldrb	r0, [r5, #1]
 80064bc:	4341      	muls	r1, r0
 80064be:	185b      	adds	r3, r3, r1
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 80064c0:	78a9      	ldrb	r1, [r5, #2]


  
  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 80064c2:	4d0a      	ldr	r5, [pc, #40]	; (80064ec <HW_RTC_GetCalendarValue+0xa0>)
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 80064c4:	185b      	adds	r3, r3, r1
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 80064c6:	189b      	adds	r3, r3, r2
  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 80064c8:	0d99      	lsrs	r1, r3, #22
 80064ca:	0298      	lsls	r0, r3, #10
 80064cc:	2300      	movs	r3, #0
 80064ce:	1b2a      	subs	r2, r5, r4
 80064d0:	1880      	adds	r0, r0, r2
 80064d2:	4159      	adcs	r1, r3

  return( calendarValue );
}
 80064d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80064d6:	4906      	ldr	r1, [pc, #24]	; (80064f0 <HW_RTC_GetCalendarValue+0xa4>)
 80064d8:	e7d6      	b.n	8006488 <HW_RTC_GetCalendarValue+0x3c>
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	2000031c 	.word	0x2000031c
 80064e0:	000005b5 	.word	0x000005b5
 80064e4:	0099aaa0 	.word	0x0099aaa0
 80064e8:	00015180 	.word	0x00015180
 80064ec:	000003ff 	.word	0x000003ff
 80064f0:	00445550 	.word	0x00445550

080064f4 <HW_RTC_GetMinimumTimeout>:
}
 80064f4:	2003      	movs	r0, #3
 80064f6:	4770      	bx	lr

080064f8 <HW_RTC_ms2Tick>:
{
 80064f8:	b510      	push	{r4, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 80064fa:	0e41      	lsrs	r1, r0, #25
 80064fc:	227d      	movs	r2, #125	; 0x7d
 80064fe:	01c0      	lsls	r0, r0, #7
 8006500:	2300      	movs	r3, #0
 8006502:	f7f9 ffbf 	bl	8000484 <__aeabi_uldivmod>
}
 8006506:	bd10      	pop	{r4, pc}

08006508 <HW_RTC_Tick2ms>:
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 8006508:	22fa      	movs	r2, #250	; 0xfa
  tick = tick&PREDIV_S;  
 800650a:	0583      	lsls	r3, r0, #22
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 800650c:	0092      	lsls	r2, r2, #2
  tick = tick&PREDIV_S;  
 800650e:	0d9b      	lsrs	r3, r3, #22
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 8006510:	4353      	muls	r3, r2
  uint32_t seconds = tick>>N_PREDIV_S;
 8006512:	0a80      	lsrs	r0, r0, #10
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 8006514:	4350      	muls	r0, r2
 8006516:	0a9b      	lsrs	r3, r3, #10
 8006518:	1818      	adds	r0, r3, r0
}
 800651a:	4770      	bx	lr

0800651c <HW_RTC_GetTimerElapsedTime>:
{
 800651c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 800651e:	a901      	add	r1, sp, #4
 8006520:	4668      	mov	r0, sp
 8006522:	f7ff ff93 	bl	800644c <HW_RTC_GetCalendarValue>
  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 8006526:	4b02      	ldr	r3, [pc, #8]	; (8006530 <HW_RTC_GetTimerElapsedTime+0x14>)
 8006528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652a:	1ac0      	subs	r0, r0, r3
}
 800652c:	b007      	add	sp, #28
 800652e:	bd00      	pop	{pc}
 8006530:	2000031c 	.word	0x2000031c

08006534 <HW_RTC_GetTimerValue>:
{
 8006534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8006536:	a901      	add	r1, sp, #4
 8006538:	4668      	mov	r0, sp
 800653a:	f7ff ff87 	bl	800644c <HW_RTC_GetCalendarValue>
}
 800653e:	b007      	add	sp, #28
 8006540:	bd00      	pop	{pc}
	...

08006544 <HW_RTC_StopAlarm>:
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8006544:	2180      	movs	r1, #128	; 0x80
{
 8006546:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8006548:	4c07      	ldr	r4, [pc, #28]	; (8006568 <HW_RTC_StopAlarm+0x24>)
 800654a:	0049      	lsls	r1, r1, #1
 800654c:	0020      	movs	r0, r4
 800654e:	f7fe fb25 	bl	8004b9c <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 8006552:	6821      	ldr	r1, [r4, #0]
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <HW_RTC_StopAlarm+0x28>)
 8006556:	68ca      	ldr	r2, [r1, #12]
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	4313      	orrs	r3, r2
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800655c:	2280      	movs	r2, #128	; 0x80
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800655e:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006560:	4b03      	ldr	r3, [pc, #12]	; (8006570 <HW_RTC_StopAlarm+0x2c>)
 8006562:	0292      	lsls	r2, r2, #10
 8006564:	615a      	str	r2, [r3, #20]
}
 8006566:	bd10      	pop	{r4, pc}
 8006568:	2000031c 	.word	0x2000031c
 800656c:	fffffe7f 	.word	0xfffffe7f
 8006570:	40010400 	.word	0x40010400

08006574 <HW_RTC_SetAlarm>:
{
 8006574:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 8006576:	4c4d      	ldr	r4, [pc, #308]	; (80066ac <HW_RTC_SetAlarm+0x138>)
{
 8006578:	b087      	sub	sp, #28
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800657a:	0023      	movs	r3, r4
 800657c:	3350      	adds	r3, #80	; 0x50
{
 800657e:	0006      	movs	r6, r0
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 8006580:	2500      	movs	r5, #0
 8006582:	5f5d      	ldrsh	r5, [r3, r5]
 8006584:	f7ff ffca 	bl	800651c <HW_RTC_GetTimerElapsedTime>
 8006588:	3503      	adds	r5, #3
 800658a:	1a30      	subs	r0, r6, r0
    LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 800658c:	2100      	movs	r1, #0
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 800658e:	4285      	cmp	r5, r0
 8006590:	d300      	bcc.n	8006594 <HW_RTC_SetAlarm+0x20>
    LPM_SetStopMode(LPM_RTC_Id , LPM_Disable );
 8006592:	2101      	movs	r1, #1
 8006594:	2004      	movs	r0, #4
 8006596:	f7ff fc17 	bl	8005dc8 <LPM_SetStopMode>
  if( LPM_GetMode() == LPM_StopMode )
 800659a:	f7ff fc2b 	bl	8005df4 <LPM_GetMode>
 800659e:	2801      	cmp	r0, #1
 80065a0:	d104      	bne.n	80065ac <HW_RTC_SetAlarm+0x38>
    timeout = timeout -  McuWakeUpTimeCal;
 80065a2:	0023      	movs	r3, r4
 80065a4:	3350      	adds	r3, #80	; 0x50
 80065a6:	2200      	movs	r2, #0
 80065a8:	5e9b      	ldrsh	r3, [r3, r2]
 80065aa:	1af6      	subs	r6, r6, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80065ac:	0023      	movs	r3, r4
 80065ae:	3354      	adds	r3, #84	; 0x54
 80065b0:	795a      	ldrb	r2, [r3, #5]
 80065b2:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 80065b4:	9201      	str	r2, [sp, #4]
 80065b6:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80065b8:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80065ba:	9202      	str	r2, [sp, #8]
 80065bc:	79da      	ldrb	r2, [r3, #7]
 80065be:	791d      	ldrb	r5, [r3, #4]
 80065c0:	9203      	str	r2, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80065c2:	7e5a      	ldrb	r2, [r3, #25]
 80065c4:	7edb      	ldrb	r3, [r3, #27]
 80065c6:	9200      	str	r2, [sp, #0]
 80065c8:	9304      	str	r3, [sp, #16]
  HW_RTC_StopAlarm( );
 80065ca:	f7ff ffbb 	bl	8006544 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 80065ce:	4a38      	ldr	r2, [pc, #224]	; (80066b0 <HW_RTC_SetAlarm+0x13c>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 80065d0:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 80065d2:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 80065d4:	0d9b      	lsrs	r3, r3, #22
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	9205      	str	r2, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80065da:	4a36      	ldr	r2, [pc, #216]	; (80066b4 <HW_RTC_SetAlarm+0x140>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 80065dc:	b29b      	uxth	r3, r3
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 80065de:	0ab6      	lsrs	r6, r6, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 80065e0:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 80065e2:	4296      	cmp	r6, r2
 80065e4:	d841      	bhi.n	800666a <HW_RTC_SetAlarm+0xf6>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80065e6:	4a34      	ldr	r2, [pc, #208]	; (80066b8 <HW_RTC_SetAlarm+0x144>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80065e8:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80065ea:	4296      	cmp	r6, r2
 80065ec:	d842      	bhi.n	8006674 <HW_RTC_SetAlarm+0x100>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 80065ee:	466a      	mov	r2, sp
 80065f0:	8897      	ldrh	r7, [r2, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80065f2:	2e3b      	cmp	r6, #59	; 0x3b
 80065f4:	d843      	bhi.n	800667e <HW_RTC_SetAlarm+0x10a>
 80065f6:	0a9a      	lsrs	r2, r3, #10
 80065f8:	0294      	lsls	r4, r2, #10
 80065fa:	1b1c      	subs	r4, r3, r4
 80065fc:	9b02      	ldr	r3, [sp, #8]
 80065fe:	b2a4      	uxth	r4, r4
 8006600:	18d2      	adds	r2, r2, r3
 8006602:	1996      	adds	r6, r2, r6
 8006604:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8006606:	2e3b      	cmp	r6, #59	; 0x3b
 8006608:	d83d      	bhi.n	8006686 <HW_RTC_SetAlarm+0x112>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800660a:	2f3b      	cmp	r7, #59	; 0x3b
 800660c:	d840      	bhi.n	8006690 <HW_RTC_SetAlarm+0x11c>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800660e:	2d17      	cmp	r5, #23
 8006610:	d843      	bhi.n	800669a <HW_RTC_SetAlarm+0x126>
  if( RTC_DateStruct.Year % 4 == 0 ) 
 8006612:	9a04      	ldr	r2, [sp, #16]
 8006614:	4b29      	ldr	r3, [pc, #164]	; (80066bc <HW_RTC_SetAlarm+0x148>)
 8006616:	0792      	lsls	r2, r2, #30
 8006618:	d144      	bne.n	80066a4 <HW_RTC_SetAlarm+0x130>
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 800661a:	9a00      	ldr	r2, [sp, #0]
 800661c:	189b      	adds	r3, r3, r2
 800661e:	3b01      	subs	r3, #1
 8006620:	7819      	ldrb	r1, [r3, #0]
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 8006622:	4288      	cmp	r0, r1
 8006624:	d902      	bls.n	800662c <HW_RTC_SetAlarm+0xb8>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8006626:	f7f9 fee9 	bl	80003fc <__aeabi_idivmod>
 800662a:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 800662c:	9a05      	ldr	r2, [sp, #20]
 800662e:	4b1f      	ldr	r3, [pc, #124]	; (80066ac <HW_RTC_SetAlarm+0x138>)
 8006630:	1b14      	subs	r4, r2, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 8006632:	22a0      	movs	r2, #160	; 0xa0
 8006634:	0512      	lsls	r2, r2, #20
 8006636:	641a      	str	r2, [r3, #64]	; 0x40
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 8006638:	001a      	movs	r2, r3
 800663a:	3229      	adds	r2, #41	; 0x29
 800663c:	77d0      	strb	r0, [r2, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800663e:	466a      	mov	r2, sp
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8006640:	0019      	movs	r1, r3
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8006642:	7b12      	ldrb	r2, [r2, #12]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8006644:	2080      	movs	r0, #128	; 0x80
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8006646:	3128      	adds	r1, #40	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8006648:	70ca      	strb	r2, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800664a:	2200      	movs	r2, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800664c:	0040      	lsls	r0, r0, #1
 800664e:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8006650:	0018      	movs	r0, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 8006652:	62dc      	str	r4, [r3, #44]	; 0x2c
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8006654:	708e      	strb	r6, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8006656:	704f      	strb	r7, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8006658:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800665a:	645a      	str	r2, [r3, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800665c:	63da      	str	r2, [r3, #60]	; 0x3c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800665e:	635a      	str	r2, [r3, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8006662:	f7fe fc71 	bl	8004f48 <HAL_RTC_SetAlarm_IT>
}
 8006666:	b007      	add	sp, #28
 8006668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 800666a:	4915      	ldr	r1, [pc, #84]	; (80066c0 <HW_RTC_SetAlarm+0x14c>)
    rtcAlarmDays++;
 800666c:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 800666e:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 8006670:	b280      	uxth	r0, r0
 8006672:	e7b6      	b.n	80065e2 <HW_RTC_SetAlarm+0x6e>
    timeoutValue -= SECONDS_IN_1HOUR;
 8006674:	4913      	ldr	r1, [pc, #76]	; (80066c4 <HW_RTC_SetAlarm+0x150>)
    rtcAlarmHours++;
 8006676:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8006678:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 800667a:	b2ad      	uxth	r5, r5
 800667c:	e7b5      	b.n	80065ea <HW_RTC_SetAlarm+0x76>
    rtcAlarmMinutes++;
 800667e:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8006680:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8006682:	b2bf      	uxth	r7, r7
 8006684:	e7b5      	b.n	80065f2 <HW_RTC_SetAlarm+0x7e>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8006686:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8006688:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800668a:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 800668c:	b2bf      	uxth	r7, r7
 800668e:	e7ba      	b.n	8006606 <HW_RTC_SetAlarm+0x92>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006690:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 8006692:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8006694:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8006696:	b2ad      	uxth	r5, r5
 8006698:	e7b7      	b.n	800660a <HW_RTC_SetAlarm+0x96>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800669a:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 800669c:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 800669e:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 80066a0:	b280      	uxth	r0, r0
 80066a2:	e7b4      	b.n	800660e <HW_RTC_SetAlarm+0x9a>
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 80066a4:	9a00      	ldr	r2, [sp, #0]
 80066a6:	189b      	adds	r3, r3, r2
 80066a8:	7ad9      	ldrb	r1, [r3, #11]
 80066aa:	e7ba      	b.n	8006622 <HW_RTC_SetAlarm+0xae>
 80066ac:	2000031c 	.word	0x2000031c
 80066b0:	000003ff 	.word	0x000003ff
 80066b4:	0001517f 	.word	0x0001517f
 80066b8:	00000e0f 	.word	0x00000e0f
 80066bc:	08007f4a 	.word	0x08007f4a
 80066c0:	fffeae80 	.word	0xfffeae80
 80066c4:	fffff1f0 	.word	0xfffff1f0

080066c8 <HW_RTC_IrqHandler>:
  LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 80066c8:	2004      	movs	r0, #4
{
 80066ca:	b510      	push	{r4, lr}
  LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 80066cc:	2100      	movs	r1, #0
 80066ce:	f7ff fb7b 	bl	8005dc8 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80066d2:	2280      	movs	r2, #128	; 0x80
 80066d4:	4b09      	ldr	r3, [pc, #36]	; (80066fc <HW_RTC_IrqHandler+0x34>)
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80066d6:	480a      	ldr	r0, [pc, #40]	; (8006700 <HW_RTC_IrqHandler+0x38>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80066d8:	0292      	lsls	r2, r2, #10
 80066da:	615a      	str	r2, [r3, #20]
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80066dc:	6803      	ldr	r3, [r0, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	04d2      	lsls	r2, r2, #19
 80066e2:	d509      	bpl.n	80066f8 <HW_RTC_IrqHandler+0x30>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	05d2      	lsls	r2, r2, #23
 80066e8:	d506      	bpl.n	80066f8 <HW_RTC_IrqHandler+0x30>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF); 
 80066ea:	68d9      	ldr	r1, [r3, #12]
 80066ec:	4a05      	ldr	r2, [pc, #20]	; (8006704 <HW_RTC_IrqHandler+0x3c>)
 80066ee:	b2c9      	uxtb	r1, r1
 80066f0:	430a      	orrs	r2, r1
 80066f2:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 80066f4:	f000 fb1a 	bl	8006d2c <HAL_RTC_AlarmAEventCallback>
}
 80066f8:	bd10      	pop	{r4, pc}
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	40010400 	.word	0x40010400
 8006700:	2000031c 	.word	0x2000031c
 8006704:	fffffe7f 	.word	0xfffffe7f

08006708 <HW_RTC_DelayMs>:
{
 8006708:	b570      	push	{r4, r5, r6, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 800670a:	0e41      	lsrs	r1, r0, #25
 800670c:	227d      	movs	r2, #125	; 0x7d
 800670e:	2300      	movs	r3, #0
 8006710:	01c0      	lsls	r0, r0, #7
 8006712:	f7f9 feb7 	bl	8000484 <__aeabi_uldivmod>
 8006716:	0004      	movs	r4, r0
  timeout = HW_RTC_GetTimerValue( );
 8006718:	f7ff ff0c 	bl	8006534 <HW_RTC_GetTimerValue>
 800671c:	0005      	movs	r5, r0
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 800671e:	f7ff ff09 	bl	8006534 <HW_RTC_GetTimerValue>
 8006722:	1b40      	subs	r0, r0, r5
 8006724:	42a0      	cmp	r0, r4
 8006726:	d300      	bcc.n	800672a <HW_RTC_DelayMs+0x22>
}
 8006728:	bd70      	pop	{r4, r5, r6, pc}
    __NOP( );
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	e7f7      	b.n	800671e <HW_RTC_DelayMs+0x16>
	...

08006730 <HW_RTC_SetTimerContext>:
{
 8006730:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = ( uint32_t ) HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 8006732:	4c04      	ldr	r4, [pc, #16]	; (8006744 <HW_RTC_SetTimerContext+0x14>)
 8006734:	0021      	movs	r1, r4
 8006736:	0020      	movs	r0, r4
 8006738:	3158      	adds	r1, #88	; 0x58
 800673a:	306c      	adds	r0, #108	; 0x6c
 800673c:	f7ff fe86 	bl	800644c <HW_RTC_GetCalendarValue>
 8006740:	6560      	str	r0, [r4, #84]	; 0x54
}
 8006742:	bd10      	pop	{r4, pc}
 8006744:	2000031c 	.word	0x2000031c

08006748 <HW_RTC_Init>:
{
 8006748:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( HW_RTC_Initalized == false )
 800674a:	4d1c      	ldr	r5, [pc, #112]	; (80067bc <HW_RTC_Init+0x74>)
{
 800674c:	b087      	sub	sp, #28
  if( HW_RTC_Initalized == false )
 800674e:	002f      	movs	r7, r5
 8006750:	3770      	adds	r7, #112	; 0x70
 8006752:	783c      	ldrb	r4, [r7, #0]
 8006754:	2c00      	cmp	r4, #0
 8006756:	d12e      	bne.n	80067b6 <HW_RTC_Init+0x6e>
  RtcHandle.Instance = RTC;
 8006758:	4b19      	ldr	r3, [pc, #100]	; (80067c0 <HW_RTC_Init+0x78>)
  HAL_RTC_Init( &RtcHandle );
 800675a:	0028      	movs	r0, r5
  RtcHandle.Instance = RTC;
 800675c:	602b      	str	r3, [r5, #0]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 800675e:	231f      	movs	r3, #31
 8006760:	60ab      	str	r3, [r5, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8006762:	4b18      	ldr	r3, [pc, #96]	; (80067c4 <HW_RTC_Init+0x7c>)
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8006764:	2601      	movs	r6, #1
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8006766:	60eb      	str	r3, [r5, #12]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8006768:	606c      	str	r4, [r5, #4]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 800676a:	612c      	str	r4, [r5, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800676c:	61ac      	str	r4, [r5, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800676e:	61ec      	str	r4, [r5, #28]
  HAL_RTC_Init( &RtcHandle );
 8006770:	f7fe faaa 	bl	8004cc8 <HAL_RTC_Init>
  RTC_DateStruct.Year = 0;
 8006774:	466b      	mov	r3, sp
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 8006776:	4669      	mov	r1, sp
 8006778:	0022      	movs	r2, r4
 800677a:	0028      	movs	r0, r5
  RTC_DateStruct.Year = 0;
 800677c:	70dc      	strb	r4, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 800677e:	705e      	strb	r6, [r3, #1]
  RTC_DateStruct.Date = 1;
 8006780:	709e      	strb	r6, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8006782:	701e      	strb	r6, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 8006784:	f7fe fb74 	bl	8004e70 <HAL_RTC_SetDate>
  RTC_TimeStruct.Hours = 0;
 8006788:	a901      	add	r1, sp, #4
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 800678a:	0022      	movs	r2, r4
 800678c:	0028      	movs	r0, r5
  RTC_TimeStruct.Hours = 0;
 800678e:	700c      	strb	r4, [r1, #0]
  RTC_TimeStruct.Minutes = 0;
 8006790:	704c      	strb	r4, [r1, #1]
  RTC_TimeStruct.Seconds = 0;
 8006792:	708c      	strb	r4, [r1, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8006794:	70cc      	strb	r4, [r1, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8006796:	604c      	str	r4, [r1, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8006798:	610c      	str	r4, [r1, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 800679a:	60cc      	str	r4, [r1, #12]
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 800679c:	f7fe faea 	bl	8004d74 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 80067a0:	0028      	movs	r0, r5
 80067a2:	f7fe fcef 	bl	8005184 <HAL_RTCEx_EnableBypassShadow>
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 80067a6:	2180      	movs	r1, #128	; 0x80
 80067a8:	0028      	movs	r0, r5
 80067aa:	0049      	lsls	r1, r1, #1
 80067ac:	f7fe f9f6 	bl	8004b9c <HAL_RTC_DeactivateAlarm>
    HW_RTC_SetTimerContext( );
 80067b0:	f7ff ffbe 	bl	8006730 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 80067b4:	703e      	strb	r6, [r7, #0]
}
 80067b6:	b007      	add	sp, #28
 80067b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	2000031c 	.word	0x2000031c
 80067c0:	40002800 	.word	0x40002800
 80067c4:	000003ff 	.word	0x000003ff

080067c8 <HW_RTC_GetTimerContext>:
  return RtcTimerContext.Rtc_Time;
 80067c8:	4b01      	ldr	r3, [pc, #4]	; (80067d0 <HW_RTC_GetTimerContext+0x8>)
 80067ca:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
 80067cc:	4770      	bx	lr
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	2000031c 	.word	0x2000031c

080067d4 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit( );
}

void HW_SPI_IoInit( void )
{
 80067d4:	b530      	push	{r4, r5, lr}
 80067d6:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 80067d8:	2214      	movs	r2, #20
 80067da:	2100      	movs	r1, #0
 80067dc:	a801      	add	r0, sp, #4
  initStruct.Mode =GPIO_MODE_AF_PP;
  initStruct.Pull =GPIO_NOPULL  ;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Alternate= SPI1_AF ;

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80067de:	24a0      	movs	r4, #160	; 0xa0
  GPIO_InitTypeDef initStruct={0};
 80067e0:	f000 fd35 	bl	800724e <memset>
  initStruct.Mode =GPIO_MODE_AF_PP;
 80067e4:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80067e6:	05e4      	lsls	r4, r4, #23
  initStruct.Mode =GPIO_MODE_AF_PP;
 80067e8:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80067ea:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 80067ec:	3301      	adds	r3, #1
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80067ee:	0020      	movs	r0, r4
 80067f0:	2120      	movs	r1, #32
  initStruct.Speed = GPIO_SPEED_HIGH;
 80067f2:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80067f4:	f7ff fdb0 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 80067f8:	aa01      	add	r2, sp, #4
 80067fa:	0020      	movs	r0, r4
 80067fc:	2140      	movs	r1, #64	; 0x40
 80067fe:	f7ff fdab 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8006802:	aa01      	add	r2, sp, #4
 8006804:	0020      	movs	r0, r4
 8006806:	2180      	movs	r1, #128	; 0x80
 8006808:	f7ff fda6 	bl	8006358 <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800680c:	2501      	movs	r5, #1
  initStruct.Pull = GPIO_NOPULL;
 800680e:	2300      	movs	r3, #0

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 8006810:	4c07      	ldr	r4, [pc, #28]	; (8006830 <HW_SPI_IoInit+0x5c>)
 8006812:	aa01      	add	r2, sp, #4
 8006814:	0020      	movs	r0, r4
 8006816:	2140      	movs	r1, #64	; 0x40
  initStruct.Pull = GPIO_NOPULL;
 8006818:	9303      	str	r3, [sp, #12]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800681a:	9502      	str	r5, [sp, #8]
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800681c:	f7ff fd9c 	bl	8006358 <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8006820:	002a      	movs	r2, r5
 8006822:	2140      	movs	r1, #64	; 0x40
 8006824:	0020      	movs	r0, r4
 8006826:	f7ff fe0b 	bl	8006440 <HW_GPIO_Write>
}
 800682a:	b007      	add	sp, #28
 800682c:	bd30      	pop	{r4, r5, pc}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	50000400 	.word	0x50000400

08006834 <HW_SPI_Init>:
  hspi.Instance = SPI1;
 8006834:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <HW_SPI_Init+0x6c>)
 8006836:	481b      	ldr	r0, [pc, #108]	; (80068a4 <HW_SPI_Init+0x70>)
{
 8006838:	b510      	push	{r4, lr}
  hspi.Instance = SPI1;
 800683a:	6003      	str	r3, [r0, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 800683c:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <HW_SPI_Init+0x74>)
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 800683e:	491b      	ldr	r1, [pc, #108]	; (80068ac <HW_SPI_Init+0x78>)
  uint32_t SysClkTmp = SystemCoreClock;
 8006840:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 8006842:	2300      	movs	r3, #0
  while( SysClkTmp > hz)
 8006844:	428a      	cmp	r2, r1
 8006846:	d903      	bls.n	8006850 <HW_SPI_Init+0x1c>
  {
    divisor++;
 8006848:	3301      	adds	r3, #1
    SysClkTmp= ( SysClkTmp >> 1);
 800684a:	0852      	lsrs	r2, r2, #1
    
    if (divisor >= 7)
 800684c:	2b07      	cmp	r3, #7
 800684e:	d1f9      	bne.n	8006844 <HW_SPI_Init+0x10>
      break;
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 8006850:	075a      	lsls	r2, r3, #29
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 8006852:	0799      	lsls	r1, r3, #30
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 8006854:	0fd2      	lsrs	r2, r2, #31
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 8006856:	0fc9      	lsrs	r1, r1, #31
 8006858:	0109      	lsls	r1, r1, #4
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800685a:	0152      	lsls	r2, r2, #5
 800685c:	430a      	orrs	r2, r1
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 800685e:	2101      	movs	r1, #1
 8006860:	400b      	ands	r3, r1
 8006862:	00db      	lsls	r3, r3, #3
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 8006864:	4313      	orrs	r3, r2
  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 8006866:	61c3      	str	r3, [r0, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8006868:	2300      	movs	r3, #0
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800686a:	2282      	movs	r2, #130	; 0x82
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800686c:	6083      	str	r3, [r0, #8]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800686e:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8006870:	6143      	str	r3, [r0, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8006872:	60c3      	str	r3, [r0, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 8006874:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8006876:	6203      	str	r3, [r0, #32]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 8006878:	6243      	str	r3, [r0, #36]	; 0x24
  SPI_CLK_ENABLE(); 
 800687a:	2380      	movs	r3, #128	; 0x80
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800687c:	0052      	lsls	r2, r2, #1
 800687e:	6042      	str	r2, [r0, #4]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8006880:	32fc      	adds	r2, #252	; 0xfc
 8006882:	6182      	str	r2, [r0, #24]
  SPI_CLK_ENABLE(); 
 8006884:	4a0a      	ldr	r2, [pc, #40]	; (80068b0 <HW_SPI_Init+0x7c>)
 8006886:	015b      	lsls	r3, r3, #5
 8006888:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800688a:	430b      	orrs	r3, r1
 800688c:	6353      	str	r3, [r2, #52]	; 0x34
  if(HAL_SPI_Init( &hspi) != HAL_OK)
 800688e:	f7fe fcdf 	bl	8005250 <HAL_SPI_Init>
 8006892:	2800      	cmp	r0, #0
 8006894:	d001      	beq.n	800689a <HW_SPI_Init+0x66>
     Error_Handler();
 8006896:	f7ff fd39 	bl	800630c <Error_Handler>
  HW_SPI_IoInit(  );
 800689a:	f7ff ff9b 	bl	80067d4 <HW_SPI_IoInit>
}
 800689e:	bd10      	pop	{r4, pc}
 80068a0:	40013000 	.word	0x40013000
 80068a4:	20000390 	.word	0x20000390
 80068a8:	20000030 	.word	0x20000030
 80068ac:	00989680 	.word	0x00989680
 80068b0:	40021000 	.word	0x40021000

080068b4 <HW_SPI_IoDeInit>:
{
 80068b4:	b570      	push	{r4, r5, r6, lr}
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 80068b6:	24a0      	movs	r4, #160	; 0xa0
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80068b8:	2601      	movs	r6, #1
{
 80068ba:	b086      	sub	sp, #24
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 80068bc:	05e4      	lsls	r4, r4, #23
  GPIO_InitTypeDef initStruct={0};
 80068be:	2214      	movs	r2, #20
 80068c0:	2100      	movs	r1, #0
 80068c2:	a801      	add	r0, sp, #4
 80068c4:	f000 fcc3 	bl	800724e <memset>
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 80068c8:	aa01      	add	r2, sp, #4
 80068ca:	0020      	movs	r0, r4
 80068cc:	2180      	movs	r1, #128	; 0x80
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80068ce:	9602      	str	r6, [sp, #8]
  HW_GPIO_Init ( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct ); 
 80068d0:	f7ff fd42 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MOSI_PORT, RADIO_MOSI_PIN, 0 );
 80068d4:	0020      	movs	r0, r4
 80068d6:	2200      	movs	r2, #0
 80068d8:	2180      	movs	r1, #128	; 0x80
 80068da:	f7ff fdb1 	bl	8006440 <HW_GPIO_Write>
  initStruct.Pull =GPIO_PULLDOWN; 
 80068de:	2302      	movs	r3, #2
  initStruct.Pull =GPIO_NOPULL  ; 
 80068e0:	2500      	movs	r5, #0
  HW_GPIO_Init ( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct ); 
 80068e2:	aa01      	add	r2, sp, #4
 80068e4:	0020      	movs	r0, r4
 80068e6:	2140      	movs	r1, #64	; 0x40
  initStruct.Pull =GPIO_PULLDOWN; 
 80068e8:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init ( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct ); 
 80068ea:	f7ff fd35 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_MISO_PORT, RADIO_MISO_PIN, 0 );
 80068ee:	0020      	movs	r0, r4
 80068f0:	2200      	movs	r2, #0
 80068f2:	2140      	movs	r1, #64	; 0x40
 80068f4:	f7ff fda4 	bl	8006440 <HW_GPIO_Write>
  HW_GPIO_Init ( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct ); 
 80068f8:	aa01      	add	r2, sp, #4
 80068fa:	0020      	movs	r0, r4
 80068fc:	2120      	movs	r1, #32
  initStruct.Pull =GPIO_NOPULL  ; 
 80068fe:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init ( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct ); 
 8006900:	f7ff fd2a 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Write(  RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0 );
 8006904:	0020      	movs	r0, r4
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 8006906:	4c09      	ldr	r4, [pc, #36]	; (800692c <HW_SPI_IoDeInit+0x78>)
  HW_GPIO_Write(  RADIO_SCLK_PORT, RADIO_SCLK_PIN, 0 );
 8006908:	002a      	movs	r2, r5
 800690a:	2120      	movs	r1, #32
 800690c:	f7ff fd98 	bl	8006440 <HW_GPIO_Write>
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 8006910:	aa01      	add	r2, sp, #4
 8006912:	0020      	movs	r0, r4
 8006914:	2140      	movs	r1, #64	; 0x40
  initStruct.Pull =GPIO_NOPULL  ; 
 8006916:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init ( RADIO_NSS_PORT, RADIO_NSS_PIN , &initStruct ); 
 8006918:	f7ff fd1e 	bl	8006358 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN , 1 );
 800691c:	0032      	movs	r2, r6
 800691e:	2140      	movs	r1, #64	; 0x40
 8006920:	0020      	movs	r0, r4
 8006922:	f7ff fd8d 	bl	8006440 <HW_GPIO_Write>
}
 8006926:	b006      	add	sp, #24
 8006928:	bd70      	pop	{r4, r5, r6, pc}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	50000400 	.word	0x50000400

08006930 <HW_SPI_InOut>:
{
 8006930:	b510      	push	{r4, lr}
 8006932:	210e      	movs	r1, #14
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 8006934:	2416      	movs	r4, #22
 8006936:	2301      	movs	r3, #1
{
 8006938:	b086      	sub	sp, #24
 800693a:	4469      	add	r1, sp
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 800693c:	446c      	add	r4, sp
 800693e:	425b      	negs	r3, r3
{
 8006940:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 8006942:	0022      	movs	r2, r4
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	4803      	ldr	r0, [pc, #12]	; (8006954 <HW_SPI_InOut+0x24>)
 8006948:	3302      	adds	r3, #2
 800694a:	f7fe fcc1 	bl	80052d0 <HAL_SPI_TransmitReceive>
  return rxData;
 800694e:	8820      	ldrh	r0, [r4, #0]
}
 8006950:	b006      	add	sp, #24
 8006952:	bd10      	pop	{r4, pc}
 8006954:	20000390 	.word	0x20000390

08006958 <OnledEvent>:
    State = RX_ERROR;
    PRINTF("OnRxError\n\r");
}

static void OnledEvent( void* context )
{
 8006958:	b510      	push	{r4, lr}
  LED_Toggle( LED_BLUE ) ; 
  LED_Toggle( LED_RED1 ) ; 
  LED_Toggle( LED_RED2 ) ; 
  LED_Toggle( LED_GREEN ) ;   

  TimerStart(&timerLed );
 800695a:	4802      	ldr	r0, [pc, #8]	; (8006964 <OnledEvent+0xc>)
 800695c:	f7ff fb8a 	bl	8006074 <TimerStart>
}
 8006960:	bd10      	pop	{r4, pc}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	200003e8 	.word	0x200003e8

08006968 <OnTxDone>:
    Radio.Sleep( );
 8006968:	4b05      	ldr	r3, [pc, #20]	; (8006980 <OnTxDone+0x18>)
{
 800696a:	b510      	push	{r4, lr}
    Radio.Sleep( );
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	4798      	blx	r3
    State = TX;
 8006970:	2204      	movs	r2, #4
 8006972:	4b04      	ldr	r3, [pc, #16]	; (8006984 <OnTxDone+0x1c>)
    PRINTF("OnTxDone\n\r");
 8006974:	4804      	ldr	r0, [pc, #16]	; (8006988 <OnTxDone+0x20>)
    State = TX;
 8006976:	761a      	strb	r2, [r3, #24]
    PRINTF("OnTxDone\n\r");
 8006978:	f7ff fc82 	bl	8006280 <TraceSend>
}
 800697c:	bd10      	pop	{r4, pc}
 800697e:	46c0      	nop			; (mov r8, r8)
 8006980:	08007ea4 	.word	0x08007ea4
 8006984:	200003e8 	.word	0x200003e8
 8006988:	08007ffd 	.word	0x08007ffd

0800698c <OnTxTimeout>:
    Radio.Sleep( );
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <OnTxTimeout+0x18>)
{
 800698e:	b510      	push	{r4, lr}
    Radio.Sleep( );
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	4798      	blx	r3
    State = TX_TIMEOUT;
 8006994:	2205      	movs	r2, #5
 8006996:	4b04      	ldr	r3, [pc, #16]	; (80069a8 <OnTxTimeout+0x1c>)
    PRINTF("OnTxTimeout\n\r");
 8006998:	4804      	ldr	r0, [pc, #16]	; (80069ac <OnTxTimeout+0x20>)
    State = TX_TIMEOUT;
 800699a:	761a      	strb	r2, [r3, #24]
    PRINTF("OnTxTimeout\n\r");
 800699c:	f7ff fc70 	bl	8006280 <TraceSend>
}
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	08007ea4 	.word	0x08007ea4
 80069a8:	200003e8 	.word	0x200003e8
 80069ac:	08008008 	.word	0x08008008

080069b0 <OnRxTimeout>:
    Radio.Sleep( );
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <OnRxTimeout+0x18>)
{
 80069b2:	b510      	push	{r4, lr}
    Radio.Sleep( );
 80069b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b6:	4798      	blx	r3
    State = RX_TIMEOUT;
 80069b8:	2202      	movs	r2, #2
 80069ba:	4b04      	ldr	r3, [pc, #16]	; (80069cc <OnRxTimeout+0x1c>)
    PRINTF("OnRxTimeout\n\r");
 80069bc:	4804      	ldr	r0, [pc, #16]	; (80069d0 <OnRxTimeout+0x20>)
    State = RX_TIMEOUT;
 80069be:	761a      	strb	r2, [r3, #24]
    PRINTF("OnRxTimeout\n\r");
 80069c0:	f7ff fc5e 	bl	8006280 <TraceSend>
}
 80069c4:	bd10      	pop	{r4, pc}
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	08007ea4 	.word	0x08007ea4
 80069cc:	200003e8 	.word	0x200003e8
 80069d0:	08008016 	.word	0x08008016

080069d4 <OnRxError>:
    Radio.Sleep( );
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <OnRxError+0x18>)
{
 80069d6:	b510      	push	{r4, lr}
    Radio.Sleep( );
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069da:	4798      	blx	r3
    State = RX_ERROR;
 80069dc:	2203      	movs	r2, #3
 80069de:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <OnRxError+0x1c>)
    PRINTF("OnRxError\n\r");
 80069e0:	4804      	ldr	r0, [pc, #16]	; (80069f4 <OnRxError+0x20>)
    State = RX_ERROR;
 80069e2:	761a      	strb	r2, [r3, #24]
    PRINTF("OnRxError\n\r");
 80069e4:	f7ff fc4c 	bl	8006280 <TraceSend>
}
 80069e8:	bd10      	pop	{r4, pc}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	08007ea4 	.word	0x08007ea4
 80069f0:	200003e8 	.word	0x200003e8
 80069f4:	08008024 	.word	0x08008024

080069f8 <OnRxDone>:
{
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	000e      	movs	r6, r1
 80069fc:	0007      	movs	r7, r0
 80069fe:	001d      	movs	r5, r3
    Radio.Sleep( );
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <OnRxDone+0x3c>)
{
 8006a02:	0014      	movs	r4, r2
    Radio.Sleep( );
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	4798      	blx	r3
    BufferSize = size;
 8006a08:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <OnRxDone+0x40>)
    memcpy( Buffer, payload, BufferSize );
 8006a0a:	0039      	movs	r1, r7
 8006a0c:	0032      	movs	r2, r6
 8006a0e:	480b      	ldr	r0, [pc, #44]	; (8006a3c <OnRxDone+0x44>)
    BufferSize = size;
 8006a10:	801e      	strh	r6, [r3, #0]
    memcpy( Buffer, payload, BufferSize );
 8006a12:	f000 fc13 	bl	800723c <memcpy>
    State = RX;
 8006a16:	2201      	movs	r2, #1
    RssiValue = rssi;
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <OnRxDone+0x48>)
    PRINTF("OnRxDone\n\r");
 8006a1a:	480a      	ldr	r0, [pc, #40]	; (8006a44 <OnRxDone+0x4c>)
    SnrValue = snr;
 8006a1c:	769d      	strb	r5, [r3, #26]
    State = RX;
 8006a1e:	761a      	strb	r2, [r3, #24]
    RssiValue = rssi;
 8006a20:	765c      	strb	r4, [r3, #25]
    PRINTF("OnRxDone\n\r");
 8006a22:	f7ff fc2d 	bl	8006280 <TraceSend>
    PRINTF("RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);
 8006a26:	002a      	movs	r2, r5
 8006a28:	0021      	movs	r1, r4
 8006a2a:	4807      	ldr	r0, [pc, #28]	; (8006a48 <OnRxDone+0x50>)
 8006a2c:	f7ff fc28 	bl	8006280 <TraceSend>
}
 8006a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	08007ea4 	.word	0x08007ea4
 8006a38:	20000036 	.word	0x20000036
 8006a3c:	200005f8 	.word	0x200005f8
 8006a40:	200003e8 	.word	0x200003e8
 8006a44:	08008030 	.word	0x08008030
 8006a48:	0800803b 	.word	0x0800803b

08006a4c <main>:
{
 8006a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4e:	b08d      	sub	sp, #52	; 0x34
    HAL_Init( );
 8006a50:	f7fc fed2 	bl	80037f8 <HAL_Init>
    SystemClock_Config( );
 8006a54:	f000 f982 	bl	8006d5c <SystemClock_Config>
    HW_Init( );  
 8006a58:	f000 f9f6 	bl	8006e48 <HW_Init>
    LPM_SetOffMode(LPM_APPLI_Id , LPM_Disable );
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	0008      	movs	r0, r1
 8006a60:	f7ff f99c 	bl	8005d9c <LPM_SetOffMode>
    TimerInit(&timerLed, OnledEvent);   
 8006a64:	4c7b      	ldr	r4, [pc, #492]	; (8006c54 <main+0x208>)
 8006a66:	497c      	ldr	r1, [pc, #496]	; (8006c58 <main+0x20c>)
 8006a68:	0020      	movs	r0, r4
 8006a6a:	f7ff faf9 	bl	8006060 <TimerInit>
    TimerSetValue( &timerLed, LED_PERIOD_MS);
 8006a6e:	21c8      	movs	r1, #200	; 0xc8
 8006a70:	0020      	movs	r0, r4
 8006a72:	f7ff fba7 	bl	80061c4 <TimerSetValue>
    TimerStart(&timerLed );
 8006a76:	0020      	movs	r0, r4
 8006a78:	f7ff fafc 	bl	8006074 <TimerStart>
    Radio.Init( &RadioEvents );
 8006a7c:	0020      	movs	r0, r4
    RadioEvents.TxDone = OnTxDone;
 8006a7e:	4b77      	ldr	r3, [pc, #476]	; (8006c5c <main+0x210>)
    Radio.Init( &RadioEvents );
 8006a80:	4d77      	ldr	r5, [pc, #476]	; (8006c60 <main+0x214>)
    RadioEvents.TxDone = OnTxDone;
 8006a82:	61e3      	str	r3, [r4, #28]
    RadioEvents.RxDone = OnRxDone;
 8006a84:	4b77      	ldr	r3, [pc, #476]	; (8006c64 <main+0x218>)
    Radio.Init( &RadioEvents );
 8006a86:	301c      	adds	r0, #28
    RadioEvents.RxDone = OnRxDone;
 8006a88:	6263      	str	r3, [r4, #36]	; 0x24
    RadioEvents.TxTimeout = OnTxTimeout;
 8006a8a:	4b77      	ldr	r3, [pc, #476]	; (8006c68 <main+0x21c>)
    Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8006a8c:	2600      	movs	r6, #0
    RadioEvents.TxTimeout = OnTxTimeout;
 8006a8e:	6223      	str	r3, [r4, #32]
    RadioEvents.RxTimeout = OnRxTimeout;
 8006a90:	4b76      	ldr	r3, [pc, #472]	; (8006c6c <main+0x220>)
 8006a92:	62a3      	str	r3, [r4, #40]	; 0x28
    RadioEvents.RxError = OnRxError;
 8006a94:	4b76      	ldr	r3, [pc, #472]	; (8006c70 <main+0x224>)
 8006a96:	62e3      	str	r3, [r4, #44]	; 0x2c
    Radio.Init( &RadioEvents );
 8006a98:	68ab      	ldr	r3, [r5, #8]
 8006a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a9c:	4798      	blx	r3
    Radio.SetChannel( RF_FREQUENCY );
 8006a9e:	696b      	ldr	r3, [r5, #20]
 8006aa0:	4874      	ldr	r0, [pc, #464]	; (8006c74 <main+0x228>)
 8006aa2:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa4:	4798      	blx	r3
    Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8006aa6:	4b74      	ldr	r3, [pc, #464]	; (8006c78 <main+0x22c>)
 8006aa8:	0032      	movs	r2, r6
 8006aaa:	9308      	str	r3, [sp, #32]
 8006aac:	2301      	movs	r3, #1
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	3307      	adds	r3, #7
 8006ab2:	9302      	str	r3, [sp, #8]
 8006ab4:	3b07      	subs	r3, #7
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	3306      	adds	r3, #6
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006abe:	9607      	str	r6, [sp, #28]
 8006ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac2:	9606      	str	r6, [sp, #24]
 8006ac4:	0033      	movs	r3, r6
 8006ac6:	9605      	str	r6, [sp, #20]
 8006ac8:	9603      	str	r6, [sp, #12]
 8006aca:	210e      	movs	r1, #14
 8006acc:	2001      	movs	r0, #1
 8006ace:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006ad0:	47b8      	blx	r7
    Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad6:	9305      	str	r3, [sp, #20]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	9302      	str	r3, [sp, #8]
 8006adc:	3303      	adds	r3, #3
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	6a2b      	ldr	r3, [r5, #32]
 8006ae2:	0031      	movs	r1, r6
 8006ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	9608      	str	r6, [sp, #32]
 8006aea:	0018      	movs	r0, r3
 8006aec:	9607      	str	r6, [sp, #28]
 8006aee:	9606      	str	r6, [sp, #24]
 8006af0:	9604      	str	r6, [sp, #16]
 8006af2:	9603      	str	r6, [sp, #12]
 8006af4:	9600      	str	r6, [sp, #0]
 8006af6:	2207      	movs	r2, #7
 8006af8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006afa:	47b0      	blx	r6
    Radio.Rx( RX_TIMEOUT_VALUE );
 8006afc:	20fa      	movs	r0, #250	; 0xfa
 8006afe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006b00:	0080      	lsls	r0, r0, #2
 8006b02:	930a      	str	r3, [sp, #40]	; 0x28
            Radio.Rx( RX_TIMEOUT_VALUE );
 8006b04:	27fa      	movs	r7, #250	; 0xfa
    Radio.Rx( RX_TIMEOUT_VALUE );
 8006b06:	4798      	blx	r3
    bool isMaster = true;
 8006b08:	2301      	movs	r3, #1
            Radio.Rx( RX_TIMEOUT_VALUE );
 8006b0a:	00bf      	lsls	r7, r7, #2
    bool isMaster = true;
 8006b0c:	930a      	str	r3, [sp, #40]	; 0x28
        switch( State )
 8006b0e:	7e20      	ldrb	r0, [r4, #24]
 8006b10:	3801      	subs	r0, #1
 8006b12:	2804      	cmp	r0, #4
 8006b14:	d844      	bhi.n	8006ba0 <main+0x154>
 8006b16:	f7f9 faf7 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006b1a:	8103      	.short	0x8103
 8006b1c:	9781      	.short	0x9781
 8006b1e:	97          	.byte	0x97
 8006b1f:	00          	.byte	0x00
            if( isMaster == true )
 8006b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d044      	beq.n	8006bb0 <main+0x164>
                if( BufferSize > 0 )
 8006b26:	4b55      	ldr	r3, [pc, #340]	; (8006c7c <main+0x230>)
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d036      	beq.n	8006b9c <main+0x150>
                    if( strncmp( ( const char* )Buffer, ( const char* )PongMsg, 4 ) == 0 )
 8006b2e:	4e54      	ldr	r6, [pc, #336]	; (8006c80 <main+0x234>)
 8006b30:	2204      	movs	r2, #4
 8006b32:	4954      	ldr	r1, [pc, #336]	; (8006c84 <main+0x238>)
 8006b34:	0030      	movs	r0, r6
 8006b36:	f000 fb92 	bl	800725e <strncmp>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d121      	bne.n	8006b82 <main+0x136>
                        TimerStop(&timerLed );
 8006b3e:	0020      	movs	r0, r4
 8006b40:	f7ff fb14 	bl	800616c <TimerStop>
                        Buffer[0] = 'P';
 8006b44:	2350      	movs	r3, #80	; 0x50
 8006b46:	7033      	strb	r3, [r6, #0]
                        Buffer[1] = 'I';
 8006b48:	2349      	movs	r3, #73	; 0x49
 8006b4a:	7073      	strb	r3, [r6, #1]
                        Buffer[2] = 'N';
 8006b4c:	3305      	adds	r3, #5
 8006b4e:	70b3      	strb	r3, [r6, #2]
                        Buffer[3] = 'G';
 8006b50:	3b07      	subs	r3, #7
 8006b52:	70f3      	strb	r3, [r6, #3]
                        for( i = 4; i < BufferSize; i++ )
 8006b54:	4b49      	ldr	r3, [pc, #292]	; (8006c7c <main+0x230>)
 8006b56:	881a      	ldrh	r2, [r3, #0]
 8006b58:	2304      	movs	r3, #4
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d30c      	bcc.n	8006b78 <main+0x12c>
                        PRINTF("...PING\n\r");
 8006b5e:	484a      	ldr	r0, [pc, #296]	; (8006c88 <main+0x23c>)
 8006b60:	f7ff fb8e 	bl	8006280 <TraceSend>
                DelayMs( 1 );
 8006b64:	2001      	movs	r0, #1
 8006b66:	f000 f895 	bl	8006c94 <HAL_Delay>
                Radio.Send( Buffer, BufferSize );
 8006b6a:	4b44      	ldr	r3, [pc, #272]	; (8006c7c <main+0x230>)
 8006b6c:	0030      	movs	r0, r6
 8006b6e:	7819      	ldrb	r1, [r3, #0]
 8006b70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006b72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b74:	4798      	blx	r3
 8006b76:	e011      	b.n	8006b9c <main+0x150>
                            Buffer[i] = i - 4;
 8006b78:	1f19      	subs	r1, r3, #4
 8006b7a:	54f1      	strb	r1, [r6, r3]
                        for( i = 4; i < BufferSize; i++ )
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	e7eb      	b.n	8006b5a <main+0x10e>
                    else if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 8006b82:	4b40      	ldr	r3, [pc, #256]	; (8006c84 <main+0x238>)
 8006b84:	0030      	movs	r0, r6
 8006b86:	1d59      	adds	r1, r3, #5
 8006b88:	2204      	movs	r2, #4
 8006b8a:	f000 fb68 	bl	800725e <strncmp>
                        Radio.Rx( RX_TIMEOUT_VALUE );
 8006b8e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
                    else if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 8006b90:	1e06      	subs	r6, r0, #0
 8006b92:	d15a      	bne.n	8006c4a <main+0x1fe>
                        Radio.Rx( RX_TIMEOUT_VALUE );
 8006b94:	0038      	movs	r0, r7
 8006b96:	930a      	str	r3, [sp, #40]	; 0x28
 8006b98:	4798      	blx	r3
                        isMaster = false;
 8006b9a:	960a      	str	r6, [sp, #40]	; 0x28
            State = LOWPOWER;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	7623      	strb	r3, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ba0:	b672      	cpsid	i
        if (State == LOWPOWER)
 8006ba2:	7e23      	ldrb	r3, [r4, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <main+0x160>
          LPM_EnterLowPower( );
 8006ba8:	f7ff f93a 	bl	8005e20 <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 8006bac:	b662      	cpsie	i
 8006bae:	e7ae      	b.n	8006b0e <main+0xc2>
                if( BufferSize > 0 )
 8006bb0:	4b32      	ldr	r3, [pc, #200]	; (8006c7c <main+0x230>)
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0f1      	beq.n	8006b9c <main+0x150>
                    if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 8006bb8:	4e31      	ldr	r6, [pc, #196]	; (8006c80 <main+0x234>)
 8006bba:	4932      	ldr	r1, [pc, #200]	; (8006c84 <main+0x238>)
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	3105      	adds	r1, #5
 8006bc0:	0030      	movs	r0, r6
 8006bc2:	f000 fb4c 	bl	800725e <strncmp>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d121      	bne.n	8006c0e <main+0x1c2>
                        TimerStop(&timerLed );
 8006bca:	0020      	movs	r0, r4
 8006bcc:	f7ff face 	bl	800616c <TimerStop>
                        Buffer[0] = 'P';
 8006bd0:	2350      	movs	r3, #80	; 0x50
 8006bd2:	7033      	strb	r3, [r6, #0]
                        Buffer[1] = 'O';
 8006bd4:	234f      	movs	r3, #79	; 0x4f
 8006bd6:	7073      	strb	r3, [r6, #1]
                        Buffer[2] = 'N';
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	70b3      	strb	r3, [r6, #2]
                        Buffer[3] = 'G';
 8006bdc:	3b07      	subs	r3, #7
 8006bde:	70f3      	strb	r3, [r6, #3]
                        for( i = 4; i < BufferSize; i++ )
 8006be0:	4b26      	ldr	r3, [pc, #152]	; (8006c7c <main+0x230>)
 8006be2:	881a      	ldrh	r2, [r3, #0]
 8006be4:	2304      	movs	r3, #4
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d30c      	bcc.n	8006c04 <main+0x1b8>
                        DelayMs( 1 );
 8006bea:	2001      	movs	r0, #1
 8006bec:	f000 f852 	bl	8006c94 <HAL_Delay>
                        Radio.Send( Buffer, BufferSize );
 8006bf0:	4b22      	ldr	r3, [pc, #136]	; (8006c7c <main+0x230>)
 8006bf2:	0030      	movs	r0, r6
 8006bf4:	7819      	ldrb	r1, [r3, #0]
 8006bf6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bfa:	4798      	blx	r3
                        PRINTF("...PONG\n\r");
 8006bfc:	4823      	ldr	r0, [pc, #140]	; (8006c8c <main+0x240>)
 8006bfe:	f7ff fb3f 	bl	8006280 <TraceSend>
 8006c02:	e7cb      	b.n	8006b9c <main+0x150>
                            Buffer[i] = i - 4;
 8006c04:	1f19      	subs	r1, r3, #4
 8006c06:	54f1      	strb	r1, [r6, r3]
                        for( i = 4; i < BufferSize; i++ )
 8006c08:	3301      	adds	r3, #1
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	e7eb      	b.n	8006be6 <main+0x19a>
                        Radio.Rx( RX_TIMEOUT_VALUE );
 8006c0e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006c10:	0038      	movs	r0, r7
 8006c12:	930a      	str	r3, [sp, #40]	; 0x28
 8006c14:	4798      	blx	r3
                        isMaster = true;
 8006c16:	2301      	movs	r3, #1
 8006c18:	930a      	str	r3, [sp, #40]	; 0x28
 8006c1a:	e7bf      	b.n	8006b9c <main+0x150>
            if( isMaster == true )
 8006c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d012      	beq.n	8006c48 <main+0x1fc>
                Buffer[0] = 'P';
 8006c22:	2350      	movs	r3, #80	; 0x50
 8006c24:	4e16      	ldr	r6, [pc, #88]	; (8006c80 <main+0x234>)
 8006c26:	7033      	strb	r3, [r6, #0]
                Buffer[1] = 'I';
 8006c28:	2349      	movs	r3, #73	; 0x49
 8006c2a:	7073      	strb	r3, [r6, #1]
                Buffer[2] = 'N';
 8006c2c:	3305      	adds	r3, #5
 8006c2e:	70b3      	strb	r3, [r6, #2]
                Buffer[3] = 'G';
 8006c30:	3b07      	subs	r3, #7
 8006c32:	70f3      	strb	r3, [r6, #3]
                for( i = 4; i < BufferSize; i++ )
 8006c34:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <main+0x230>)
 8006c36:	881a      	ldrh	r2, [r3, #0]
 8006c38:	2304      	movs	r3, #4
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d292      	bcs.n	8006b64 <main+0x118>
                    Buffer[i] = i - 4;
 8006c3e:	1f19      	subs	r1, r3, #4
 8006c40:	54f1      	strb	r1, [r6, r3]
                for( i = 4; i < BufferSize; i++ )
 8006c42:	3301      	adds	r3, #1
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	e7f8      	b.n	8006c3a <main+0x1ee>
            Radio.Rx( RX_TIMEOUT_VALUE );
 8006c48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c4c:	0038      	movs	r0, r7
 8006c4e:	4798      	blx	r3
 8006c50:	e7a4      	b.n	8006b9c <main+0x150>
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	200003e8 	.word	0x200003e8
 8006c58:	08006959 	.word	0x08006959
 8006c5c:	08006969 	.word	0x08006969
 8006c60:	08007ea4 	.word	0x08007ea4
 8006c64:	080069f9 	.word	0x080069f9
 8006c68:	0800698d 	.word	0x0800698d
 8006c6c:	080069b1 	.word	0x080069b1
 8006c70:	080069d5 	.word	0x080069d5
 8006c74:	33bca100 	.word	0x33bca100
 8006c78:	00000bb8 	.word	0x00000bb8
 8006c7c:	20000036 	.word	0x20000036
 8006c80:	200005f8 	.word	0x200005f8
 8006c84:	08007f62 	.word	0x08007f62
 8006c88:	0800805b 	.word	0x0800805b
 8006c8c:	08008065 	.word	0x08008065

08006c90 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
   /* Return function status */
  return HAL_OK;
}
 8006c90:	2000      	movs	r0, #0
 8006c92:	4770      	bx	lr

08006c94 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8006c94:	b507      	push	{r0, r1, r2, lr}
 8006c96:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs( Delay ); /* based on RTC */
 8006c98:	9801      	ldr	r0, [sp, #4]
 8006c9a:	f7ff fd35 	bl	8006708 <HW_RTC_DelayMs>
}
 8006c9e:	bd07      	pop	{r0, r1, r2, pc}

08006ca0 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <HAL_MspInit+0x28>)
 8006ca4:	055b      	lsls	r3, r3, #21
 8006ca6:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8006ca8:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8006caa:	430b      	orrs	r3, r1
 8006cac:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 8006cae:	f7fd f97b 	bl	8003fa8 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 8006cb2:	f7fd f9bf 	bl	8004034 <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	4a04      	ldr	r2, [pc, #16]	; (8006ccc <HAL_MspInit+0x2c>)
 8006cba:	6811      	ldr	r1, [r2, #0]
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	6013      	str	r3, [r2, #0]
   */
  DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 8006cc0:	f7fd f9ae 	bl	8004020 <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif
}
 8006cc4:	bd10      	pop	{r4, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	40022000 	.word	0x40022000

08006cd0 <HAL_RTC_MspInit>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8006cd0:	2304      	movs	r3, #4
{
 8006cd2:	b500      	push	{lr}
 8006cd4:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8006cd6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006cdc:	3301      	adds	r3, #1
 8006cde:	33ff      	adds	r3, #255	; 0xff
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ce0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006ce2:	930c      	str	r3, [sp, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ce4:	f7fd f9ea 	bl	80040bc <HAL_RCC_OscConfig>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_RTC_MspInit+0x20>
  {
    Error_Handler();
 8006cec:	f7ff fb0e 	bl	800630c <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006cf4:	2380      	movs	r3, #128	; 0x80
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cf6:	4668      	mov	r0, sp
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006cf8:	025b      	lsls	r3, r3, #9
 8006cfa:	9301      	str	r3, [sp, #4]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cfc:	f7fd fd66 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d001      	beq.n	8006d08 <HAL_RTC_MspInit+0x38>
  { 
    Error_Handler();
 8006d04:	f7ff fb02 	bl	800630c <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8006d08:	2380      	movs	r3, #128	; 0x80
 8006d0a:	4a07      	ldr	r2, [pc, #28]	; (8006d28 <HAL_RTC_MspInit+0x58>)
 8006d0c:	02db      	lsls	r3, r3, #11
 8006d0e:	6d11      	ldr	r1, [r2, #80]	; 0x50
  
  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8006d10:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 8006d12:	430b      	orrs	r3, r1
 8006d14:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8006d16:	2200      	movs	r2, #0
 8006d18:	0011      	movs	r1, r2
 8006d1a:	f7fc fe61 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8006d1e:	2002      	movs	r0, #2
 8006d20:	f7fc fe8e 	bl	8003a40 <HAL_NVIC_EnableIRQ>
}
 8006d24:	b019      	add	sp, #100	; 0x64
 8006d26:	bd00      	pop	{pc}
 8006d28:	40021000 	.word	0x40021000

08006d2c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006d2c:	b510      	push	{r4, lr}
  TimerIrqHandler( );
 8006d2e:	f7ff f9db 	bl	80060e8 <TimerIrqHandler>
}
 8006d32:	bd10      	pop	{r4, pc}

08006d34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006d34:	b510      	push	{r4, lr}
  HW_GPIO_IrqHandler( GPIO_Pin );
 8006d36:	f7ff fb75 	bl	8006424 <HW_GPIO_IrqHandler>
}
 8006d3a:	bd10      	pop	{r4, pc}

08006d3c <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
  switch( GPIO_Pin )
 8006d3c:	3801      	subs	r0, #1
{
 8006d3e:	b500      	push	{lr}
  switch( GPIO_Pin )
 8006d40:	2807      	cmp	r0, #7
 8006d42:	d807      	bhi.n	8006d54 <MSP_GetIRQn+0x18>
 8006d44:	f7f9 f9e0 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006d48:	04060808 	.word	0x04060808
 8006d4c:	04060606 	.word	0x04060606
  {
    case GPIO_PIN_0:  
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
    case GPIO_PIN_2: 
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 8006d50:	2006      	movs	r0, #6
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15: 
    default: return EXTI4_15_IRQn;
  }
}
 8006d52:	bd00      	pop	{pc}
    default: return EXTI4_15_IRQn;
 8006d54:	2007      	movs	r0, #7
 8006d56:	e7fc      	b.n	8006d52 <MSP_GetIRQn+0x16>
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 8006d58:	2005      	movs	r0, #5
 8006d5a:	e7fa      	b.n	8006d52 <MSP_GetIRQn+0x16>

08006d5c <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config( void )
{
 8006d5c:	b500      	push	{lr}
 8006d5e:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d60:	2214      	movs	r2, #20
 8006d62:	2100      	movs	r1, #0
 8006d64:	a801      	add	r0, sp, #4
 8006d66:	f000 fa72 	bl	800724e <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d6a:	2238      	movs	r2, #56	; 0x38
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	a806      	add	r0, sp, #24
 8006d70:	f000 fa6d 	bl	800724e <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8006d74:	2302      	movs	r3, #2
 8006d76:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8006d78:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8006d7a:	2380      	movs	r3, #128	; 0x80
 8006d7c:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8006d7e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8006d80:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8006d82:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8006d84:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8006d86:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006d88:	320f      	adds	r2, #15

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d8a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006d8c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8006d8e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d90:	f7fd f994 	bl	80040bc <HAL_RCC_OscConfig>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d001      	beq.n	8006d9c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8006d98:	f7ff fab8 	bl	800630c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d9c:	2380      	movs	r3, #128	; 0x80
 8006d9e:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <SystemClock_Config+0x88>)
 8006da0:	055b      	lsls	r3, r3, #21
 8006da2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006da8:	4b0f      	ldr	r3, [pc, #60]	; (8006de8 <SystemClock_Config+0x8c>)
 8006daa:	4910      	ldr	r1, [pc, #64]	; (8006dec <SystemClock_Config+0x90>)
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4011      	ands	r1, r2
 8006db0:	2280      	movs	r2, #128	; 0x80
 8006db2:	0112      	lsls	r2, r2, #4
 8006db4:	430a      	orrs	r2, r1
 8006db6:	601a      	str	r2, [r3, #0]
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8006db8:	2110      	movs	r1, #16
 8006dba:	001a      	movs	r2, r3
 8006dbc:	6853      	ldr	r3, [r2, #4]
 8006dbe:	400b      	ands	r3, r1
 8006dc0:	d1fc      	bne.n	8006dbc <SystemClock_Config+0x60>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006dc2:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006dc4:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8006dc6:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006dc8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006dca:	3a0c      	subs	r2, #12
 8006dcc:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006dce:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006dd0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006dd2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006dd4:	f7fd fc22 	bl	800461c <HAL_RCC_ClockConfig>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d001      	beq.n	8006de0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8006ddc:	f7ff fa96 	bl	800630c <Error_Handler>
  }
}
 8006de0:	b015      	add	sp, #84	; 0x54
 8006de2:	bd00      	pop	{pc}
 8006de4:	40021000 	.word	0x40021000
 8006de8:	40007000 	.word	0x40007000
 8006dec:	ffffe7ff 	.word	0xffffe7ff

08006df0 <HW_AdcInit>:
  * @param none
  * @retval none
  */
void HW_AdcInit( void )
{
  if( AdcInitialized == false )
 8006df0:	4812      	ldr	r0, [pc, #72]	; (8006e3c <HW_AdcInit+0x4c>)
{
 8006df2:	b510      	push	{r4, lr}
  if( AdcInitialized == false )
 8006df4:	7843      	ldrb	r3, [r0, #1]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11e      	bne.n	8006e38 <HW_AdcInit+0x48>
  {
    AdcInitialized = true;

    
    hadc.Instance  = ADC1;
 8006dfa:	4911      	ldr	r1, [pc, #68]	; (8006e40 <HW_AdcInit+0x50>)
    AdcInitialized = true;
 8006dfc:	2201      	movs	r2, #1
    hadc.Instance  = ADC1;
 8006dfe:	6041      	str	r1, [r0, #4]
    
    hadc.Init.OversamplingMode      = DISABLE;
  
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006e00:	2180      	movs	r1, #128	; 0x80
 8006e02:	0609      	lsls	r1, r1, #24
 8006e04:	6081      	str	r1, [r0, #8]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
    hadc.Init.LowPowerFrequencyMode = ENABLE;
    hadc.Init.LowPowerAutoWait      = DISABLE;
    
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8006e06:	2107      	movs	r1, #7
    hadc.Init.OversamplingMode      = DISABLE;
 8006e08:	6443      	str	r3, [r0, #68]	; 0x44
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8006e0a:	6203      	str	r3, [r0, #32]
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8006e0c:	61c3      	str	r3, [r0, #28]
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8006e0e:	60c3      	str	r3, [r0, #12]
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8006e10:	6103      	str	r3, [r0, #16]
    hadc.Init.ContinuousConvMode    = DISABLE;
 8006e12:	6243      	str	r3, [r0, #36]	; 0x24
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8006e14:	6283      	str	r3, [r0, #40]	; 0x28
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006e16:	6303      	str	r3, [r0, #48]	; 0x30
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
    hadc.Init.DMAContinuousRequests = DISABLE;
 8006e18:	6343      	str	r3, [r0, #52]	; 0x34

    ADCCLK_ENABLE();
 8006e1a:	2380      	movs	r3, #128	; 0x80
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 8006e1c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8006e1e:	6142      	str	r2, [r0, #20]
    AdcInitialized = true;
 8006e20:	7042      	strb	r2, [r0, #1]
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8006e22:	3203      	adds	r2, #3
 8006e24:	6182      	str	r2, [r0, #24]
    ADCCLK_ENABLE();
 8006e26:	4a07      	ldr	r2, [pc, #28]	; (8006e44 <HW_AdcInit+0x54>)
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8006e28:	6401      	str	r1, [r0, #64]	; 0x40
    ADCCLK_ENABLE();
 8006e2a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	6353      	str	r3, [r2, #52]	; 0x34
    

    HAL_ADC_Init( &hadc );
 8006e32:	3004      	adds	r0, #4
 8006e34:	f7fc fd00 	bl	8003838 <HAL_ADC_Init>

  }
}
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	20000420 	.word	0x20000420
 8006e40:	40012400 	.word	0x40012400
 8006e44:	40021000 	.word	0x40021000

08006e48 <HW_Init>:
{
 8006e48:	b513      	push	{r0, r1, r4, lr}
  if( McuInitialized == false )
 8006e4a:	4c09      	ldr	r4, [pc, #36]	; (8006e70 <HW_Init+0x28>)
 8006e4c:	7823      	ldrb	r3, [r4, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10d      	bne.n	8006e6e <HW_Init+0x26>
    HW_AdcInit( );
 8006e52:	f7ff ffcd 	bl	8006df0 <HW_AdcInit>
    Radio.IoInit( );
 8006e56:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <HW_Init+0x2c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	4798      	blx	r3
    HW_SPI_Init( );
 8006e5e:	f7ff fce9 	bl	8006834 <HW_SPI_Init>
    HW_RTC_Init( );
 8006e62:	f7ff fc71 	bl	8006748 <HW_RTC_Init>
    TraceInit( );
 8006e66:	f7ff f9fb 	bl	8006260 <TraceInit>
    McuInitialized = true;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	7023      	strb	r3, [r4, #0]
}
 8006e6e:	bd13      	pop	{r0, r1, r4, pc}
 8006e70:	20000420 	.word	0x20000420
 8006e74:	08007ea4 	.word	0x08007ea4

08006e78 <LPM_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterStopMode( void)
{
 8006e78:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e7a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006e7e:	b672      	cpsid	i
  HW_SPI_IoDeInit( );
 8006e80:	f7ff fd18 	bl	80068b4 <HW_SPI_IoDeInit>
  Radio.IoDeInit( );
 8006e84:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <LPM_EnterStopMode+0x30>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	4798      	blx	r3
  vcom_IoDeInit( );
 8006e8a:	f000 f965 	bl	8007158 <vcom_IoDeInit>
  DISABLE_IRQ( );

  HW_IoDeInit( );
  
  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8006e8e:	2304      	movs	r3, #4
 8006e90:	4a06      	ldr	r2, [pc, #24]	; (8006eac <LPM_EnterStopMode+0x34>)
 8006e92:	6811      	ldr	r1, [r2, #0]
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e98:	f384 8810 	msr	PRIMASK, r4
  
  RESTORE_PRIMASK( );

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	0008      	movs	r0, r1
 8006ea0:	f7fd f8a2 	bl	8003fe8 <HAL_PWR_EnterSTOPMode>
}
 8006ea4:	bd10      	pop	{r4, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	08007ea4 	.word	0x08007ea4
 8006eac:	40007000 	.word	0x40007000

08006eb0 <LPM_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void LPM_ExitStopMode( void)
{
 8006eb0:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006eb2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006eb6:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <LPM_ExitStopMode+0x58>)
 8006ebc:	6819      	ldr	r1, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while( __HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET ) {}
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	6819      	ldr	r1, [r3, #0]
 8006ec6:	4211      	tst	r1, r2
 8006ec8:	d0fc      	beq.n	8006ec4 <LPM_ExitStopMode+0x14>
  
  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8006eca:	2280      	movs	r2, #128	; 0x80
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	0452      	lsls	r2, r2, #17
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET ) {}
 8006ed4:	2280      	movs	r2, #128	; 0x80
 8006ed6:	0492      	lsls	r2, r2, #18
 8006ed8:	6819      	ldr	r1, [r3, #0]
 8006eda:	4211      	tst	r1, r2
 8006edc:	d0fc      	beq.n	8006ed8 <LPM_ExitStopMode+0x28>
  
  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
 8006ede:	2203      	movs	r2, #3
 8006ee0:	68d9      	ldr	r1, [r3, #12]
 8006ee2:	430a      	orrs	r2, r1
  
  /* Wait till PLL is used as system clock source */ 
  while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK ) {}
 8006ee4:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
 8006ee6:	60da      	str	r2, [r3, #12]
  while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK ) {}
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	400a      	ands	r2, r1
 8006eec:	2a0c      	cmp	r2, #12
 8006eee:	d1fb      	bne.n	8006ee8 <LPM_ExitStopMode+0x38>
  HW_SPI_IoInit( );
 8006ef0:	f7ff fc70 	bl	80067d4 <HW_SPI_IoInit>
  Radio.IoInit( );
 8006ef4:	4b05      	ldr	r3, [pc, #20]	; (8006f0c <LPM_ExitStopMode+0x5c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	4798      	blx	r3
  vcom_IoInit( );
 8006efc:	f000 f8a0 	bl	8007040 <vcom_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f00:	f384 8810 	msr	PRIMASK, r4
    
  /*initilizes the peripherals*/
  HW_IoInit( );

  RESTORE_PRIMASK( );
}
 8006f04:	bd13      	pop	{r0, r1, r4, pc}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	08007ea4 	.word	0x08007ea4

08006f10 <LPM_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterSleepMode( void)
{
 8006f10:	b510      	push	{r4, lr}
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8006f12:	2101      	movs	r1, #1
 8006f14:	2000      	movs	r0, #0
 8006f16:	f7fd f84f 	bl	8003fb8 <HAL_PWR_EnterSLEEPMode>
}
 8006f1a:	bd10      	pop	{r4, pc}

08006f1c <NMI_Handler>:
 8006f1c:	4770      	bx	lr

08006f1e <HardFault_Handler>:

void HardFault_Handler(void)
{
  while(1)
  {
    __NOP();
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	e7fd      	b.n	8006f1e <HardFault_Handler>

08006f22 <SVC_Handler>:
 8006f22:	4770      	bx	lr

08006f24 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8006f24:	4770      	bx	lr

08006f26 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006f26:	b510      	push	{r4, lr}
  HAL_IncTick();
 8006f28:	f7fc fc76 	bl	8003818 <HAL_IncTick>
}
 8006f2c:	bd10      	pop	{r4, pc}

08006f2e <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler( void )
{
 8006f2e:	b510      	push	{r4, lr}
  vcom_IRQHandler();
 8006f30:	f000 f87e 	bl	8007030 <vcom_IRQHandler>
}
 8006f34:	bd10      	pop	{r4, pc}

08006f36 <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler( void )
{
 8006f36:	b510      	push	{r4, lr}
  vcom_DMA_TX_IRQHandler();
 8006f38:	f000 f872 	bl	8007020 <vcom_DMA_TX_IRQHandler>
}
 8006f3c:	bd10      	pop	{r4, pc}

08006f3e <RTC_IRQHandler>:

void RTC_IRQHandler( void )
{
 8006f3e:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler ( );
 8006f40:	f7ff fbc2 	bl	80066c8 <HW_RTC_IrqHandler>
}
 8006f44:	bd10      	pop	{r4, pc}

08006f46 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler( void )
{
 8006f46:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8006f48:	2001      	movs	r0, #1
 8006f4a:	f7fd f821 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8006f4e:	2002      	movs	r0, #2
 8006f50:	f7fd f81e 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
}
 8006f54:	bd10      	pop	{r4, pc}

08006f56 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler( void )
{
 8006f56:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8006f58:	2004      	movs	r0, #4
 8006f5a:	f7fd f819 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8006f5e:	2008      	movs	r0, #8
 8006f60:	f7fd f816 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
}
 8006f64:	bd10      	pop	{r4, pc}

08006f66 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler( void )
{
 8006f66:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8006f68:	2010      	movs	r0, #16
 8006f6a:	f7fd f811 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8006f6e:	2020      	movs	r0, #32
 8006f70:	f7fd f80e 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8006f74:	2040      	movs	r0, #64	; 0x40
 8006f76:	f7fd f80b 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8006f7a:	2080      	movs	r0, #128	; 0x80
 8006f7c:	f7fd f808 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8006f80:	2080      	movs	r0, #128	; 0x80
 8006f82:	0040      	lsls	r0, r0, #1
 8006f84:	f7fd f804 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8006f88:	2080      	movs	r0, #128	; 0x80
 8006f8a:	0080      	lsls	r0, r0, #2
 8006f8c:	f7fd f800 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8006f90:	2080      	movs	r0, #128	; 0x80
 8006f92:	00c0      	lsls	r0, r0, #3
 8006f94:	f7fc fffc 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8006f98:	2080      	movs	r0, #128	; 0x80
 8006f9a:	0100      	lsls	r0, r0, #4
 8006f9c:	f7fc fff8 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8006fa0:	2080      	movs	r0, #128	; 0x80
 8006fa2:	0140      	lsls	r0, r0, #5
 8006fa4:	f7fc fff4 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8006fa8:	2080      	movs	r0, #128	; 0x80
 8006faa:	0180      	lsls	r0, r0, #6
 8006fac:	f7fc fff0 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8006fb0:	2080      	movs	r0, #128	; 0x80
 8006fb2:	01c0      	lsls	r0, r0, #7
 8006fb4:	f7fc ffec 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8006fb8:	2080      	movs	r0, #128	; 0x80
 8006fba:	0200      	lsls	r0, r0, #8
 8006fbc:	f7fc ffe8 	bl	8003f90 <HAL_GPIO_EXTI_IRQHandler>
}
 8006fc0:	bd10      	pop	{r4, pc}
	...

08006fc4 <vcom_Init>:
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(  void (*TxCb)(void) )
{

  /*Record Tx complete for DMA*/
  TxCpltCallback=TxCb;
 8006fc4:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <vcom_Init+0x30>)
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8006fc6:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <vcom_Init+0x34>)
{
 8006fc8:	b510      	push	{r4, lr}
  UartHandle.Instance        = USARTx;
 8006fca:	605a      	str	r2, [r3, #4]
  
  UartHandle.Init.BaudRate   = 115200;
 8006fcc:	22e1      	movs	r2, #225	; 0xe1
 8006fce:	0252      	lsls	r2, r2, #9
 8006fd0:	609a      	str	r2, [r3, #8]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8006fd2:	2200      	movs	r2, #0
  TxCpltCallback=TxCb;
 8006fd4:	6018      	str	r0, [r3, #0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8006fd6:	60da      	str	r2, [r3, #12]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8006fd8:	611a      	str	r2, [r3, #16]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8006fda:	615a      	str	r2, [r3, #20]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8006fdc:	61da      	str	r2, [r3, #28]
  UartHandle.Init.Mode       = UART_MODE_TX;
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8006fde:	1d18      	adds	r0, r3, #4
  UartHandle.Init.Mode       = UART_MODE_TX;
 8006fe0:	3208      	adds	r2, #8
 8006fe2:	619a      	str	r2, [r3, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8006fe4:	f7fe fea2 	bl	8005d2c <HAL_UART_Init>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d001      	beq.n	8006ff0 <vcom_Init+0x2c>
  {
    /* Initialization Error */
    Error_Handler(); 
 8006fec:	f7ff f98e 	bl	800630c <Error_Handler>
  }
}
 8006ff0:	bd10      	pop	{r4, pc}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	20000484 	.word	0x20000484
 8006ff8:	40004400 	.word	0x40004400

08006ffc <vcom_Trace>:

void vcom_Trace(  uint8_t *p_data, uint16_t size )
{
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&UartHandle,p_data, size);
 8007000:	0001      	movs	r1, r0
 8007002:	4802      	ldr	r0, [pc, #8]	; (800700c <vcom_Trace+0x10>)
 8007004:	3004      	adds	r0, #4
 8007006:	f7fe faeb 	bl	80055e0 <HAL_UART_Transmit_DMA>
}
 800700a:	bd10      	pop	{r4, pc}
 800700c:	20000484 	.word	0x20000484

08007010 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8007010:	b510      	push	{r4, lr}
  /* buffer transmission complete*/
   TxCpltCallback(); 
 8007012:	4b02      	ldr	r3, [pc, #8]	; (800701c <HAL_UART_TxCpltCallback+0xc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4798      	blx	r3
}
 8007018:	bd10      	pop	{r4, pc}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	20000484 	.word	0x20000484

08007020 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 8007020:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8007022:	4b02      	ldr	r3, [pc, #8]	; (800702c <vcom_DMA_TX_IRQHandler+0xc>)
 8007024:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8007026:	f7fc fe29 	bl	8003c7c <HAL_DMA_IRQHandler>
}
 800702a:	bd10      	pop	{r4, pc}
 800702c:	20000484 	.word	0x20000484

08007030 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 8007030:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&UartHandle);
 8007032:	4802      	ldr	r0, [pc, #8]	; (800703c <vcom_IRQHandler+0xc>)
 8007034:	3004      	adds	r0, #4
 8007036:	f7fe fba5 	bl	8005784 <HAL_UART_IRQHandler>
}
 800703a:	bd10      	pop	{r4, pc}
 800703c:	20000484 	.word	0x20000484

08007040 <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 8007040:	b530      	push	{r4, r5, lr}
 8007042:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 8007044:	2214      	movs	r2, #20
 8007046:	2100      	movs	r1, #0
 8007048:	a803      	add	r0, sp, #12
 800704a:	f000 f900 	bl	800724e <memset>
    /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800704e:	2201      	movs	r2, #1
 8007050:	4b12      	ldr	r3, [pc, #72]	; (800709c <vcom_IoInit+0x5c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8007052:	25a0      	movs	r5, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 8007054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8007056:	2404      	movs	r4, #4
  USARTx_TX_GPIO_CLK_ENABLE();
 8007058:	4311      	orrs	r1, r2
 800705a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800705c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800705e:	05ed      	lsls	r5, r5, #23
  USARTx_TX_GPIO_CLK_ENABLE();
 8007060:	4011      	ands	r1, r2
 8007062:	9101      	str	r1, [sp, #4]
 8007064:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 8007066:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8007068:	0028      	movs	r0, r5
  USARTx_RX_GPIO_CLK_ENABLE();
 800706a:	4311      	orrs	r1, r2
 800706c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8007070:	a903      	add	r1, sp, #12
  USARTx_RX_GPIO_CLK_ENABLE();
 8007072:	401a      	ands	r2, r3
 8007074:	9202      	str	r2, [sp, #8]
 8007076:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007078:	2302      	movs	r3, #2
 800707a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800707c:	3301      	adds	r3, #1
 800707e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8007080:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8007082:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8007084:	f7fc fec2 	bl	8003e0c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8007088:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800708a:	a903      	add	r1, sp, #12
 800708c:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800708e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8007090:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8007092:	f7fc febb 	bl	8003e0c <HAL_GPIO_Init>
}
 8007096:	b009      	add	sp, #36	; 0x24
 8007098:	bd30      	pop	{r4, r5, pc}
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	40021000 	.word	0x40021000

080070a0 <HAL_UART_MspInit>:
{
 80070a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  USARTx_TX_GPIO_CLK_ENABLE();
 80070a2:	2501      	movs	r5, #1
 80070a4:	4b28      	ldr	r3, [pc, #160]	; (8007148 <HAL_UART_MspInit+0xa8>)
{
 80070a6:	b085      	sub	sp, #20
  USARTx_TX_GPIO_CLK_ENABLE();
 80070a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
{
 80070aa:	0007      	movs	r7, r0
  USARTx_TX_GPIO_CLK_ENABLE();
 80070ac:	432a      	orrs	r2, r5
 80070ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80070b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80070b2:	2600      	movs	r6, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 80070b4:	402a      	ands	r2, r5
 80070b6:	9201      	str	r2, [sp, #4]
 80070b8:	9a01      	ldr	r2, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	432a      	orrs	r2, r5
 80070be:	62da      	str	r2, [r3, #44]	; 0x2c
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	402a      	ands	r2, r5
 80070c4:	9202      	str	r2, [sp, #8]
 80070c6:	9a02      	ldr	r2, [sp, #8]
  USARTx_CLK_ENABLE();
 80070c8:	2280      	movs	r2, #128	; 0x80
 80070ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80070cc:	0292      	lsls	r2, r2, #10
 80070ce:	430a      	orrs	r2, r1
 80070d0:	639a      	str	r2, [r3, #56]	; 0x38
  DMAx_CLK_ENABLE();
 80070d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d4:	432a      	orrs	r2, r5
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
 80070d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070da:	402b      	ands	r3, r5
 80070dc:	9303      	str	r3, [sp, #12]
 80070de:	9b03      	ldr	r3, [sp, #12]
  vcom_IoInit();
 80070e0:	f7ff ffae 	bl	8007040 <vcom_IoInit>
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80070e4:	4c19      	ldr	r4, [pc, #100]	; (800714c <HAL_UART_MspInit+0xac>)
 80070e6:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <HAL_UART_MspInit+0xb0>)
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80070e8:	2280      	movs	r2, #128	; 0x80
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80070ea:	6763      	str	r3, [r4, #116]	; 0x74
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80070ec:	2310      	movs	r3, #16
 80070ee:	67e3      	str	r3, [r4, #124]	; 0x7c
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80070f0:	1d23      	adds	r3, r4, #4
 80070f2:	67de      	str	r6, [r3, #124]	; 0x7c
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80070f4:	0023      	movs	r3, r4
 80070f6:	3308      	adds	r3, #8
 80070f8:	67da      	str	r2, [r3, #124]	; 0x7c
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070fa:	0023      	movs	r3, r4
 80070fc:	3388      	adds	r3, #136	; 0x88
 80070fe:	601e      	str	r6, [r3, #0]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8007100:	0023      	movs	r3, r4
 8007102:	338c      	adds	r3, #140	; 0x8c
 8007104:	601e      	str	r6, [r3, #0]
  hdma_tx.Init.Mode                = DMA_NORMAL;
 8007106:	0023      	movs	r3, r4
 8007108:	3390      	adds	r3, #144	; 0x90
 800710a:	601e      	str	r6, [r3, #0]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800710c:	0023      	movs	r3, r4
 800710e:	3394      	adds	r3, #148	; 0x94
 8007110:	601e      	str	r6, [r3, #0]
  hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8007112:	2304      	movs	r3, #4
  HAL_DMA_Init(&hdma_tx);
 8007114:	480f      	ldr	r0, [pc, #60]	; (8007154 <HAL_UART_MspInit+0xb4>)
  hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8007116:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_DMA_Init(&hdma_tx);
 8007118:	f7fc fc9e 	bl	8003a58 <HAL_DMA_Init>
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <HAL_UART_MspInit+0xb4>)
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800711e:	002a      	movs	r2, r5
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8007120:	663b      	str	r3, [r7, #96]	; 0x60
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8007122:	0031      	movs	r1, r6
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8007124:	349c      	adds	r4, #156	; 0x9c
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8007126:	200b      	movs	r0, #11
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8007128:	6027      	str	r7, [r4, #0]
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800712a:	f7fc fc59 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800712e:	200b      	movs	r0, #11
 8007130:	f7fc fc86 	bl	8003a40 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8007134:	002a      	movs	r2, r5
 8007136:	0031      	movs	r1, r6
 8007138:	201c      	movs	r0, #28
 800713a:	f7fc fc51 	bl	80039e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800713e:	201c      	movs	r0, #28
 8007140:	f7fc fc7e 	bl	8003a40 <HAL_NVIC_EnableIRQ>
}
 8007144:	b005      	add	sp, #20
 8007146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007148:	40021000 	.word	0x40021000
 800714c:	20000484 	.word	0x20000484
 8007150:	40020080 	.word	0x40020080
 8007154:	200004f8 	.word	0x200004f8

08007158 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 8007158:	b510      	push	{r4, lr}
 800715a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure={0};
 800715c:	2214      	movs	r2, #20
 800715e:	2100      	movs	r1, #0
 8007160:	a801      	add	r0, sp, #4
 8007162:	f000 f874 	bl	800724e <memset>
  
  USARTx_TX_GPIO_CLK_ENABLE();
 8007166:	2001      	movs	r0, #1
 8007168:	4a0c      	ldr	r2, [pc, #48]	; (800719c <vcom_IoDeInit+0x44>)

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
  HAL_GPIO_Init(  USARTx_TX_GPIO_PORT, &GPIO_InitStructure );
 800716a:	24a0      	movs	r4, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 800716c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  HAL_GPIO_Init(  USARTx_TX_GPIO_PORT, &GPIO_InitStructure );
 800716e:	05e4      	lsls	r4, r4, #23
  USARTx_TX_GPIO_CLK_ENABLE();
 8007170:	4301      	orrs	r1, r0
 8007172:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007174:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  HAL_GPIO_Init(  USARTx_TX_GPIO_PORT, &GPIO_InitStructure );
 8007176:	a901      	add	r1, sp, #4
  USARTx_TX_GPIO_CLK_ENABLE();
 8007178:	4003      	ands	r3, r0
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800717e:	2303      	movs	r3, #3
 8007180:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 8007182:	181b      	adds	r3, r3, r0
  HAL_GPIO_Init(  USARTx_TX_GPIO_PORT, &GPIO_InitStructure );
 8007184:	0020      	movs	r0, r4
  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 8007186:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(  USARTx_TX_GPIO_PORT, &GPIO_InitStructure );
 8007188:	f7fc fe40 	bl	8003e0c <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 800718c:	2308      	movs	r3, #8
  HAL_GPIO_Init(  USARTx_RX_GPIO_PORT, &GPIO_InitStructure ); 
 800718e:	a901      	add	r1, sp, #4
 8007190:	0020      	movs	r0, r4
  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 8007192:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(  USARTx_RX_GPIO_PORT, &GPIO_InitStructure ); 
 8007194:	f7fc fe3a 	bl	8003e0c <HAL_GPIO_Init>
}
 8007198:	b006      	add	sp, #24
 800719a:	bd10      	pop	{r4, pc}
 800719c:	40021000 	.word	0x40021000

080071a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80071a0:	480d      	ldr	r0, [pc, #52]	; (80071d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80071a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80071a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80071a6:	e003      	b.n	80071b0 <LoopCopyDataInit>

080071a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80071a8:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80071aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80071ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80071ae:	3104      	adds	r1, #4

080071b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80071b0:	480b      	ldr	r0, [pc, #44]	; (80071e0 <LoopForever+0xa>)
  ldr  r3, =_edata
 80071b2:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <LoopForever+0xe>)
  adds  r2, r0, r1
 80071b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80071b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80071b8:	d3f6      	bcc.n	80071a8 <CopyDataInit>
  ldr  r2, =_sbss
 80071ba:	4a0b      	ldr	r2, [pc, #44]	; (80071e8 <LoopForever+0x12>)
  b  LoopFillZerobss
 80071bc:	e002      	b.n	80071c4 <LoopFillZerobss>

080071be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80071be:	2300      	movs	r3, #0
  str  r3, [r2]
 80071c0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80071c2:	3204      	adds	r2, #4

080071c4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80071c4:	4b09      	ldr	r3, [pc, #36]	; (80071ec <LoopForever+0x16>)
  cmp  r2, r3
 80071c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80071c8:	d3f9      	bcc.n	80071be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80071ca:	f7fc fae7 	bl	800379c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071ce:	f000 f811 	bl	80071f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071d2:	f7ff fc3b 	bl	8006a4c <main>

080071d6 <LoopForever>:

LoopForever:
    b LoopForever
 80071d6:	e7fe      	b.n	80071d6 <LoopForever>
   ldr   r0, =_estack
 80071d8:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80071dc:	080080b4 	.word	0x080080b4
  ldr  r0, =_sdata
 80071e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80071e4:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 80071e8:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 80071ec:	2000063c 	.word	0x2000063c

080071f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071f0:	e7fe      	b.n	80071f0 <ADC1_COMP_IRQHandler>
	...

080071f4 <__libc_init_array>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	2600      	movs	r6, #0
 80071f8:	4d0c      	ldr	r5, [pc, #48]	; (800722c <__libc_init_array+0x38>)
 80071fa:	4c0d      	ldr	r4, [pc, #52]	; (8007230 <__libc_init_array+0x3c>)
 80071fc:	1b64      	subs	r4, r4, r5
 80071fe:	10a4      	asrs	r4, r4, #2
 8007200:	42a6      	cmp	r6, r4
 8007202:	d109      	bne.n	8007218 <__libc_init_array+0x24>
 8007204:	2600      	movs	r6, #0
 8007206:	f000 fdc3 	bl	8007d90 <_init>
 800720a:	4d0a      	ldr	r5, [pc, #40]	; (8007234 <__libc_init_array+0x40>)
 800720c:	4c0a      	ldr	r4, [pc, #40]	; (8007238 <__libc_init_array+0x44>)
 800720e:	1b64      	subs	r4, r4, r5
 8007210:	10a4      	asrs	r4, r4, #2
 8007212:	42a6      	cmp	r6, r4
 8007214:	d105      	bne.n	8007222 <__libc_init_array+0x2e>
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	00b3      	lsls	r3, r6, #2
 800721a:	58eb      	ldr	r3, [r5, r3]
 800721c:	4798      	blx	r3
 800721e:	3601      	adds	r6, #1
 8007220:	e7ee      	b.n	8007200 <__libc_init_array+0xc>
 8007222:	00b3      	lsls	r3, r6, #2
 8007224:	58eb      	ldr	r3, [r5, r3]
 8007226:	4798      	blx	r3
 8007228:	3601      	adds	r6, #1
 800722a:	e7f2      	b.n	8007212 <__libc_init_array+0x1e>
 800722c:	080080ac 	.word	0x080080ac
 8007230:	080080ac 	.word	0x080080ac
 8007234:	080080ac 	.word	0x080080ac
 8007238:	080080b0 	.word	0x080080b0

0800723c <memcpy>:
 800723c:	2300      	movs	r3, #0
 800723e:	b510      	push	{r4, lr}
 8007240:	429a      	cmp	r2, r3
 8007242:	d100      	bne.n	8007246 <memcpy+0xa>
 8007244:	bd10      	pop	{r4, pc}
 8007246:	5ccc      	ldrb	r4, [r1, r3]
 8007248:	54c4      	strb	r4, [r0, r3]
 800724a:	3301      	adds	r3, #1
 800724c:	e7f8      	b.n	8007240 <memcpy+0x4>

0800724e <memset>:
 800724e:	0003      	movs	r3, r0
 8007250:	1882      	adds	r2, r0, r2
 8007252:	4293      	cmp	r3, r2
 8007254:	d100      	bne.n	8007258 <memset+0xa>
 8007256:	4770      	bx	lr
 8007258:	7019      	strb	r1, [r3, #0]
 800725a:	3301      	adds	r3, #1
 800725c:	e7f9      	b.n	8007252 <memset+0x4>

0800725e <strncmp>:
 800725e:	2300      	movs	r3, #0
 8007260:	b530      	push	{r4, r5, lr}
 8007262:	429a      	cmp	r2, r3
 8007264:	d00a      	beq.n	800727c <strncmp+0x1e>
 8007266:	3a01      	subs	r2, #1
 8007268:	5cc4      	ldrb	r4, [r0, r3]
 800726a:	5ccd      	ldrb	r5, [r1, r3]
 800726c:	42ac      	cmp	r4, r5
 800726e:	d104      	bne.n	800727a <strncmp+0x1c>
 8007270:	429a      	cmp	r2, r3
 8007272:	d002      	beq.n	800727a <strncmp+0x1c>
 8007274:	3301      	adds	r3, #1
 8007276:	2c00      	cmp	r4, #0
 8007278:	d1f6      	bne.n	8007268 <strncmp+0xa>
 800727a:	1b63      	subs	r3, r4, r5
 800727c:	0018      	movs	r0, r3
 800727e:	bd30      	pop	{r4, r5, pc}

08007280 <_vsniprintf_r>:
 8007280:	b530      	push	{r4, r5, lr}
 8007282:	0014      	movs	r4, r2
 8007284:	b09b      	sub	sp, #108	; 0x6c
 8007286:	0005      	movs	r5, r0
 8007288:	001a      	movs	r2, r3
 800728a:	2c00      	cmp	r4, #0
 800728c:	da05      	bge.n	800729a <_vsniprintf_r+0x1a>
 800728e:	238b      	movs	r3, #139	; 0x8b
 8007290:	6003      	str	r3, [r0, #0]
 8007292:	2001      	movs	r0, #1
 8007294:	4240      	negs	r0, r0
 8007296:	b01b      	add	sp, #108	; 0x6c
 8007298:	bd30      	pop	{r4, r5, pc}
 800729a:	2382      	movs	r3, #130	; 0x82
 800729c:	4668      	mov	r0, sp
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	8183      	strh	r3, [r0, #12]
 80072a2:	2300      	movs	r3, #0
 80072a4:	9100      	str	r1, [sp, #0]
 80072a6:	9104      	str	r1, [sp, #16]
 80072a8:	429c      	cmp	r4, r3
 80072aa:	d000      	beq.n	80072ae <_vsniprintf_r+0x2e>
 80072ac:	1e63      	subs	r3, r4, #1
 80072ae:	9302      	str	r3, [sp, #8]
 80072b0:	9305      	str	r3, [sp, #20]
 80072b2:	2301      	movs	r3, #1
 80072b4:	4669      	mov	r1, sp
 80072b6:	425b      	negs	r3, r3
 80072b8:	81cb      	strh	r3, [r1, #14]
 80072ba:	0028      	movs	r0, r5
 80072bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80072be:	f000 f879 	bl	80073b4 <_svfiprintf_r>
 80072c2:	1c43      	adds	r3, r0, #1
 80072c4:	da01      	bge.n	80072ca <_vsniprintf_r+0x4a>
 80072c6:	238b      	movs	r3, #139	; 0x8b
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	2c00      	cmp	r4, #0
 80072cc:	d0e3      	beq.n	8007296 <_vsniprintf_r+0x16>
 80072ce:	2300      	movs	r3, #0
 80072d0:	9a00      	ldr	r2, [sp, #0]
 80072d2:	7013      	strb	r3, [r2, #0]
 80072d4:	e7df      	b.n	8007296 <_vsniprintf_r+0x16>
	...

080072d8 <vsniprintf>:
 80072d8:	b507      	push	{r0, r1, r2, lr}
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	0013      	movs	r3, r2
 80072de:	000a      	movs	r2, r1
 80072e0:	0001      	movs	r1, r0
 80072e2:	4802      	ldr	r0, [pc, #8]	; (80072ec <vsniprintf+0x14>)
 80072e4:	6800      	ldr	r0, [r0, #0]
 80072e6:	f7ff ffcb 	bl	8007280 <_vsniprintf_r>
 80072ea:	bd0e      	pop	{r1, r2, r3, pc}
 80072ec:	20000038 	.word	0x20000038

080072f0 <__ssputs_r>:
 80072f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f2:	688e      	ldr	r6, [r1, #8]
 80072f4:	b085      	sub	sp, #20
 80072f6:	0007      	movs	r7, r0
 80072f8:	000c      	movs	r4, r1
 80072fa:	9203      	str	r2, [sp, #12]
 80072fc:	9301      	str	r3, [sp, #4]
 80072fe:	429e      	cmp	r6, r3
 8007300:	d839      	bhi.n	8007376 <__ssputs_r+0x86>
 8007302:	2390      	movs	r3, #144	; 0x90
 8007304:	898a      	ldrh	r2, [r1, #12]
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	421a      	tst	r2, r3
 800730a:	d034      	beq.n	8007376 <__ssputs_r+0x86>
 800730c:	2503      	movs	r5, #3
 800730e:	6909      	ldr	r1, [r1, #16]
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	1a5b      	subs	r3, r3, r1
 8007314:	9302      	str	r3, [sp, #8]
 8007316:	6963      	ldr	r3, [r4, #20]
 8007318:	9802      	ldr	r0, [sp, #8]
 800731a:	435d      	muls	r5, r3
 800731c:	0feb      	lsrs	r3, r5, #31
 800731e:	195d      	adds	r5, r3, r5
 8007320:	9b01      	ldr	r3, [sp, #4]
 8007322:	106d      	asrs	r5, r5, #1
 8007324:	3301      	adds	r3, #1
 8007326:	181b      	adds	r3, r3, r0
 8007328:	42ab      	cmp	r3, r5
 800732a:	d900      	bls.n	800732e <__ssputs_r+0x3e>
 800732c:	001d      	movs	r5, r3
 800732e:	0553      	lsls	r3, r2, #21
 8007330:	d532      	bpl.n	8007398 <__ssputs_r+0xa8>
 8007332:	0029      	movs	r1, r5
 8007334:	0038      	movs	r0, r7
 8007336:	f000 fb31 	bl	800799c <_malloc_r>
 800733a:	1e06      	subs	r6, r0, #0
 800733c:	d109      	bne.n	8007352 <__ssputs_r+0x62>
 800733e:	230c      	movs	r3, #12
 8007340:	603b      	str	r3, [r7, #0]
 8007342:	2340      	movs	r3, #64	; 0x40
 8007344:	2001      	movs	r0, #1
 8007346:	89a2      	ldrh	r2, [r4, #12]
 8007348:	4240      	negs	r0, r0
 800734a:	4313      	orrs	r3, r2
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	b005      	add	sp, #20
 8007350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007352:	9a02      	ldr	r2, [sp, #8]
 8007354:	6921      	ldr	r1, [r4, #16]
 8007356:	f7ff ff71 	bl	800723c <memcpy>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	4a14      	ldr	r2, [pc, #80]	; (80073b0 <__ssputs_r+0xc0>)
 800735e:	401a      	ands	r2, r3
 8007360:	2380      	movs	r3, #128	; 0x80
 8007362:	4313      	orrs	r3, r2
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	9b02      	ldr	r3, [sp, #8]
 8007368:	6126      	str	r6, [r4, #16]
 800736a:	18f6      	adds	r6, r6, r3
 800736c:	6026      	str	r6, [r4, #0]
 800736e:	6165      	str	r5, [r4, #20]
 8007370:	9e01      	ldr	r6, [sp, #4]
 8007372:	1aed      	subs	r5, r5, r3
 8007374:	60a5      	str	r5, [r4, #8]
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	42b3      	cmp	r3, r6
 800737a:	d200      	bcs.n	800737e <__ssputs_r+0x8e>
 800737c:	001e      	movs	r6, r3
 800737e:	0032      	movs	r2, r6
 8007380:	9903      	ldr	r1, [sp, #12]
 8007382:	6820      	ldr	r0, [r4, #0]
 8007384:	f000 faad 	bl	80078e2 <memmove>
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	2000      	movs	r0, #0
 800738c:	1b9b      	subs	r3, r3, r6
 800738e:	60a3      	str	r3, [r4, #8]
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	199e      	adds	r6, r3, r6
 8007394:	6026      	str	r6, [r4, #0]
 8007396:	e7da      	b.n	800734e <__ssputs_r+0x5e>
 8007398:	002a      	movs	r2, r5
 800739a:	0038      	movs	r0, r7
 800739c:	f000 fb5c 	bl	8007a58 <_realloc_r>
 80073a0:	1e06      	subs	r6, r0, #0
 80073a2:	d1e0      	bne.n	8007366 <__ssputs_r+0x76>
 80073a4:	6921      	ldr	r1, [r4, #16]
 80073a6:	0038      	movs	r0, r7
 80073a8:	f000 faae 	bl	8007908 <_free_r>
 80073ac:	e7c7      	b.n	800733e <__ssputs_r+0x4e>
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	fffffb7f 	.word	0xfffffb7f

080073b4 <_svfiprintf_r>:
 80073b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b6:	b09f      	sub	sp, #124	; 0x7c
 80073b8:	9002      	str	r0, [sp, #8]
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	898b      	ldrh	r3, [r1, #12]
 80073be:	000f      	movs	r7, r1
 80073c0:	0016      	movs	r6, r2
 80073c2:	061b      	lsls	r3, r3, #24
 80073c4:	d511      	bpl.n	80073ea <_svfiprintf_r+0x36>
 80073c6:	690b      	ldr	r3, [r1, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10e      	bne.n	80073ea <_svfiprintf_r+0x36>
 80073cc:	2140      	movs	r1, #64	; 0x40
 80073ce:	f000 fae5 	bl	800799c <_malloc_r>
 80073d2:	6038      	str	r0, [r7, #0]
 80073d4:	6138      	str	r0, [r7, #16]
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d105      	bne.n	80073e6 <_svfiprintf_r+0x32>
 80073da:	230c      	movs	r3, #12
 80073dc:	9a02      	ldr	r2, [sp, #8]
 80073de:	3801      	subs	r0, #1
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	b01f      	add	sp, #124	; 0x7c
 80073e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e6:	2340      	movs	r3, #64	; 0x40
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	2300      	movs	r3, #0
 80073ec:	ad06      	add	r5, sp, #24
 80073ee:	616b      	str	r3, [r5, #20]
 80073f0:	3320      	adds	r3, #32
 80073f2:	766b      	strb	r3, [r5, #25]
 80073f4:	3310      	adds	r3, #16
 80073f6:	76ab      	strb	r3, [r5, #26]
 80073f8:	0034      	movs	r4, r6
 80073fa:	7823      	ldrb	r3, [r4, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d147      	bne.n	8007490 <_svfiprintf_r+0xdc>
 8007400:	1ba3      	subs	r3, r4, r6
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	d00d      	beq.n	8007422 <_svfiprintf_r+0x6e>
 8007406:	1ba3      	subs	r3, r4, r6
 8007408:	0032      	movs	r2, r6
 800740a:	0039      	movs	r1, r7
 800740c:	9802      	ldr	r0, [sp, #8]
 800740e:	f7ff ff6f 	bl	80072f0 <__ssputs_r>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	d100      	bne.n	8007418 <_svfiprintf_r+0x64>
 8007416:	e0b5      	b.n	8007584 <_svfiprintf_r+0x1d0>
 8007418:	696a      	ldr	r2, [r5, #20]
 800741a:	9b04      	ldr	r3, [sp, #16]
 800741c:	4694      	mov	ip, r2
 800741e:	4463      	add	r3, ip
 8007420:	616b      	str	r3, [r5, #20]
 8007422:	7823      	ldrb	r3, [r4, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d100      	bne.n	800742a <_svfiprintf_r+0x76>
 8007428:	e0ac      	b.n	8007584 <_svfiprintf_r+0x1d0>
 800742a:	2201      	movs	r2, #1
 800742c:	2300      	movs	r3, #0
 800742e:	4252      	negs	r2, r2
 8007430:	606a      	str	r2, [r5, #4]
 8007432:	a902      	add	r1, sp, #8
 8007434:	3254      	adds	r2, #84	; 0x54
 8007436:	1852      	adds	r2, r2, r1
 8007438:	3401      	adds	r4, #1
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	60eb      	str	r3, [r5, #12]
 800743e:	60ab      	str	r3, [r5, #8]
 8007440:	7013      	strb	r3, [r2, #0]
 8007442:	65ab      	str	r3, [r5, #88]	; 0x58
 8007444:	4e58      	ldr	r6, [pc, #352]	; (80075a8 <_svfiprintf_r+0x1f4>)
 8007446:	2205      	movs	r2, #5
 8007448:	7821      	ldrb	r1, [r4, #0]
 800744a:	0030      	movs	r0, r6
 800744c:	f000 fa3e 	bl	80078cc <memchr>
 8007450:	1c62      	adds	r2, r4, #1
 8007452:	2800      	cmp	r0, #0
 8007454:	d120      	bne.n	8007498 <_svfiprintf_r+0xe4>
 8007456:	6829      	ldr	r1, [r5, #0]
 8007458:	06cb      	lsls	r3, r1, #27
 800745a:	d504      	bpl.n	8007466 <_svfiprintf_r+0xb2>
 800745c:	2353      	movs	r3, #83	; 0x53
 800745e:	ae02      	add	r6, sp, #8
 8007460:	3020      	adds	r0, #32
 8007462:	199b      	adds	r3, r3, r6
 8007464:	7018      	strb	r0, [r3, #0]
 8007466:	070b      	lsls	r3, r1, #28
 8007468:	d504      	bpl.n	8007474 <_svfiprintf_r+0xc0>
 800746a:	2353      	movs	r3, #83	; 0x53
 800746c:	202b      	movs	r0, #43	; 0x2b
 800746e:	ae02      	add	r6, sp, #8
 8007470:	199b      	adds	r3, r3, r6
 8007472:	7018      	strb	r0, [r3, #0]
 8007474:	7823      	ldrb	r3, [r4, #0]
 8007476:	2b2a      	cmp	r3, #42	; 0x2a
 8007478:	d016      	beq.n	80074a8 <_svfiprintf_r+0xf4>
 800747a:	2000      	movs	r0, #0
 800747c:	210a      	movs	r1, #10
 800747e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007480:	7822      	ldrb	r2, [r4, #0]
 8007482:	3a30      	subs	r2, #48	; 0x30
 8007484:	2a09      	cmp	r2, #9
 8007486:	d955      	bls.n	8007534 <_svfiprintf_r+0x180>
 8007488:	2800      	cmp	r0, #0
 800748a:	d015      	beq.n	80074b8 <_svfiprintf_r+0x104>
 800748c:	9309      	str	r3, [sp, #36]	; 0x24
 800748e:	e013      	b.n	80074b8 <_svfiprintf_r+0x104>
 8007490:	2b25      	cmp	r3, #37	; 0x25
 8007492:	d0b5      	beq.n	8007400 <_svfiprintf_r+0x4c>
 8007494:	3401      	adds	r4, #1
 8007496:	e7b0      	b.n	80073fa <_svfiprintf_r+0x46>
 8007498:	2301      	movs	r3, #1
 800749a:	1b80      	subs	r0, r0, r6
 800749c:	4083      	lsls	r3, r0
 800749e:	6829      	ldr	r1, [r5, #0]
 80074a0:	0014      	movs	r4, r2
 80074a2:	430b      	orrs	r3, r1
 80074a4:	602b      	str	r3, [r5, #0]
 80074a6:	e7cd      	b.n	8007444 <_svfiprintf_r+0x90>
 80074a8:	9b05      	ldr	r3, [sp, #20]
 80074aa:	1d18      	adds	r0, r3, #4
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	9005      	str	r0, [sp, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	db39      	blt.n	8007528 <_svfiprintf_r+0x174>
 80074b4:	9309      	str	r3, [sp, #36]	; 0x24
 80074b6:	0014      	movs	r4, r2
 80074b8:	7823      	ldrb	r3, [r4, #0]
 80074ba:	2b2e      	cmp	r3, #46	; 0x2e
 80074bc:	d10b      	bne.n	80074d6 <_svfiprintf_r+0x122>
 80074be:	7863      	ldrb	r3, [r4, #1]
 80074c0:	1c62      	adds	r2, r4, #1
 80074c2:	2b2a      	cmp	r3, #42	; 0x2a
 80074c4:	d13e      	bne.n	8007544 <_svfiprintf_r+0x190>
 80074c6:	9b05      	ldr	r3, [sp, #20]
 80074c8:	3402      	adds	r4, #2
 80074ca:	1d1a      	adds	r2, r3, #4
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	9205      	str	r2, [sp, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	db34      	blt.n	800753e <_svfiprintf_r+0x18a>
 80074d4:	9307      	str	r3, [sp, #28]
 80074d6:	4e35      	ldr	r6, [pc, #212]	; (80075ac <_svfiprintf_r+0x1f8>)
 80074d8:	7821      	ldrb	r1, [r4, #0]
 80074da:	2203      	movs	r2, #3
 80074dc:	0030      	movs	r0, r6
 80074de:	f000 f9f5 	bl	80078cc <memchr>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d006      	beq.n	80074f4 <_svfiprintf_r+0x140>
 80074e6:	2340      	movs	r3, #64	; 0x40
 80074e8:	1b80      	subs	r0, r0, r6
 80074ea:	4083      	lsls	r3, r0
 80074ec:	682a      	ldr	r2, [r5, #0]
 80074ee:	3401      	adds	r4, #1
 80074f0:	4313      	orrs	r3, r2
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	7821      	ldrb	r1, [r4, #0]
 80074f6:	2206      	movs	r2, #6
 80074f8:	482d      	ldr	r0, [pc, #180]	; (80075b0 <_svfiprintf_r+0x1fc>)
 80074fa:	1c66      	adds	r6, r4, #1
 80074fc:	7629      	strb	r1, [r5, #24]
 80074fe:	f000 f9e5 	bl	80078cc <memchr>
 8007502:	2800      	cmp	r0, #0
 8007504:	d046      	beq.n	8007594 <_svfiprintf_r+0x1e0>
 8007506:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <_svfiprintf_r+0x200>)
 8007508:	2b00      	cmp	r3, #0
 800750a:	d12f      	bne.n	800756c <_svfiprintf_r+0x1b8>
 800750c:	6829      	ldr	r1, [r5, #0]
 800750e:	9b05      	ldr	r3, [sp, #20]
 8007510:	2207      	movs	r2, #7
 8007512:	05c9      	lsls	r1, r1, #23
 8007514:	d528      	bpl.n	8007568 <_svfiprintf_r+0x1b4>
 8007516:	189b      	adds	r3, r3, r2
 8007518:	4393      	bics	r3, r2
 800751a:	3308      	adds	r3, #8
 800751c:	9305      	str	r3, [sp, #20]
 800751e:	696b      	ldr	r3, [r5, #20]
 8007520:	9a03      	ldr	r2, [sp, #12]
 8007522:	189b      	adds	r3, r3, r2
 8007524:	616b      	str	r3, [r5, #20]
 8007526:	e767      	b.n	80073f8 <_svfiprintf_r+0x44>
 8007528:	425b      	negs	r3, r3
 800752a:	60eb      	str	r3, [r5, #12]
 800752c:	2302      	movs	r3, #2
 800752e:	430b      	orrs	r3, r1
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	e7c0      	b.n	80074b6 <_svfiprintf_r+0x102>
 8007534:	434b      	muls	r3, r1
 8007536:	3401      	adds	r4, #1
 8007538:	189b      	adds	r3, r3, r2
 800753a:	2001      	movs	r0, #1
 800753c:	e7a0      	b.n	8007480 <_svfiprintf_r+0xcc>
 800753e:	2301      	movs	r3, #1
 8007540:	425b      	negs	r3, r3
 8007542:	e7c7      	b.n	80074d4 <_svfiprintf_r+0x120>
 8007544:	2300      	movs	r3, #0
 8007546:	0014      	movs	r4, r2
 8007548:	200a      	movs	r0, #10
 800754a:	001a      	movs	r2, r3
 800754c:	606b      	str	r3, [r5, #4]
 800754e:	7821      	ldrb	r1, [r4, #0]
 8007550:	3930      	subs	r1, #48	; 0x30
 8007552:	2909      	cmp	r1, #9
 8007554:	d903      	bls.n	800755e <_svfiprintf_r+0x1aa>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0bd      	beq.n	80074d6 <_svfiprintf_r+0x122>
 800755a:	9207      	str	r2, [sp, #28]
 800755c:	e7bb      	b.n	80074d6 <_svfiprintf_r+0x122>
 800755e:	4342      	muls	r2, r0
 8007560:	3401      	adds	r4, #1
 8007562:	1852      	adds	r2, r2, r1
 8007564:	2301      	movs	r3, #1
 8007566:	e7f2      	b.n	800754e <_svfiprintf_r+0x19a>
 8007568:	3307      	adds	r3, #7
 800756a:	e7d5      	b.n	8007518 <_svfiprintf_r+0x164>
 800756c:	ab05      	add	r3, sp, #20
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	003a      	movs	r2, r7
 8007572:	4b11      	ldr	r3, [pc, #68]	; (80075b8 <_svfiprintf_r+0x204>)
 8007574:	0029      	movs	r1, r5
 8007576:	9802      	ldr	r0, [sp, #8]
 8007578:	e000      	b.n	800757c <_svfiprintf_r+0x1c8>
 800757a:	bf00      	nop
 800757c:	9003      	str	r0, [sp, #12]
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	d1cc      	bne.n	800751e <_svfiprintf_r+0x16a>
 8007584:	89bb      	ldrh	r3, [r7, #12]
 8007586:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007588:	065b      	lsls	r3, r3, #25
 800758a:	d400      	bmi.n	800758e <_svfiprintf_r+0x1da>
 800758c:	e729      	b.n	80073e2 <_svfiprintf_r+0x2e>
 800758e:	2001      	movs	r0, #1
 8007590:	4240      	negs	r0, r0
 8007592:	e726      	b.n	80073e2 <_svfiprintf_r+0x2e>
 8007594:	ab05      	add	r3, sp, #20
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	003a      	movs	r2, r7
 800759a:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <_svfiprintf_r+0x204>)
 800759c:	0029      	movs	r1, r5
 800759e:	9802      	ldr	r0, [sp, #8]
 80075a0:	f000 f87a 	bl	8007698 <_printf_i>
 80075a4:	e7ea      	b.n	800757c <_svfiprintf_r+0x1c8>
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	0800806f 	.word	0x0800806f
 80075ac:	08008075 	.word	0x08008075
 80075b0:	08008079 	.word	0x08008079
 80075b4:	00000000 	.word	0x00000000
 80075b8:	080072f1 	.word	0x080072f1

080075bc <_printf_common>:
 80075bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075be:	0015      	movs	r5, r2
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	688a      	ldr	r2, [r1, #8]
 80075c4:	690b      	ldr	r3, [r1, #16]
 80075c6:	9000      	str	r0, [sp, #0]
 80075c8:	000c      	movs	r4, r1
 80075ca:	4293      	cmp	r3, r2
 80075cc:	da00      	bge.n	80075d0 <_printf_common+0x14>
 80075ce:	0013      	movs	r3, r2
 80075d0:	0022      	movs	r2, r4
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	3243      	adds	r2, #67	; 0x43
 80075d6:	7812      	ldrb	r2, [r2, #0]
 80075d8:	2a00      	cmp	r2, #0
 80075da:	d001      	beq.n	80075e0 <_printf_common+0x24>
 80075dc:	3301      	adds	r3, #1
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	069b      	lsls	r3, r3, #26
 80075e4:	d502      	bpl.n	80075ec <_printf_common+0x30>
 80075e6:	682b      	ldr	r3, [r5, #0]
 80075e8:	3302      	adds	r3, #2
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	2706      	movs	r7, #6
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	401f      	ands	r7, r3
 80075f2:	d027      	beq.n	8007644 <_printf_common+0x88>
 80075f4:	0023      	movs	r3, r4
 80075f6:	3343      	adds	r3, #67	; 0x43
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	1e5a      	subs	r2, r3, #1
 80075fc:	4193      	sbcs	r3, r2
 80075fe:	6822      	ldr	r2, [r4, #0]
 8007600:	0692      	lsls	r2, r2, #26
 8007602:	d430      	bmi.n	8007666 <_printf_common+0xaa>
 8007604:	0022      	movs	r2, r4
 8007606:	9901      	ldr	r1, [sp, #4]
 8007608:	3243      	adds	r2, #67	; 0x43
 800760a:	9800      	ldr	r0, [sp, #0]
 800760c:	9e08      	ldr	r6, [sp, #32]
 800760e:	47b0      	blx	r6
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d025      	beq.n	8007660 <_printf_common+0xa4>
 8007614:	2306      	movs	r3, #6
 8007616:	6820      	ldr	r0, [r4, #0]
 8007618:	682a      	ldr	r2, [r5, #0]
 800761a:	68e1      	ldr	r1, [r4, #12]
 800761c:	4003      	ands	r3, r0
 800761e:	2500      	movs	r5, #0
 8007620:	2b04      	cmp	r3, #4
 8007622:	d103      	bne.n	800762c <_printf_common+0x70>
 8007624:	1a8d      	subs	r5, r1, r2
 8007626:	43eb      	mvns	r3, r5
 8007628:	17db      	asrs	r3, r3, #31
 800762a:	401d      	ands	r5, r3
 800762c:	68a3      	ldr	r3, [r4, #8]
 800762e:	6922      	ldr	r2, [r4, #16]
 8007630:	4293      	cmp	r3, r2
 8007632:	dd01      	ble.n	8007638 <_printf_common+0x7c>
 8007634:	1a9b      	subs	r3, r3, r2
 8007636:	18ed      	adds	r5, r5, r3
 8007638:	2700      	movs	r7, #0
 800763a:	42bd      	cmp	r5, r7
 800763c:	d120      	bne.n	8007680 <_printf_common+0xc4>
 800763e:	2000      	movs	r0, #0
 8007640:	e010      	b.n	8007664 <_printf_common+0xa8>
 8007642:	3701      	adds	r7, #1
 8007644:	68e3      	ldr	r3, [r4, #12]
 8007646:	682a      	ldr	r2, [r5, #0]
 8007648:	1a9b      	subs	r3, r3, r2
 800764a:	429f      	cmp	r7, r3
 800764c:	dad2      	bge.n	80075f4 <_printf_common+0x38>
 800764e:	0022      	movs	r2, r4
 8007650:	2301      	movs	r3, #1
 8007652:	3219      	adds	r2, #25
 8007654:	9901      	ldr	r1, [sp, #4]
 8007656:	9800      	ldr	r0, [sp, #0]
 8007658:	9e08      	ldr	r6, [sp, #32]
 800765a:	47b0      	blx	r6
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d1f0      	bne.n	8007642 <_printf_common+0x86>
 8007660:	2001      	movs	r0, #1
 8007662:	4240      	negs	r0, r0
 8007664:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007666:	2030      	movs	r0, #48	; 0x30
 8007668:	18e1      	adds	r1, r4, r3
 800766a:	3143      	adds	r1, #67	; 0x43
 800766c:	7008      	strb	r0, [r1, #0]
 800766e:	0021      	movs	r1, r4
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	3145      	adds	r1, #69	; 0x45
 8007674:	7809      	ldrb	r1, [r1, #0]
 8007676:	18a2      	adds	r2, r4, r2
 8007678:	3243      	adds	r2, #67	; 0x43
 800767a:	3302      	adds	r3, #2
 800767c:	7011      	strb	r1, [r2, #0]
 800767e:	e7c1      	b.n	8007604 <_printf_common+0x48>
 8007680:	0022      	movs	r2, r4
 8007682:	2301      	movs	r3, #1
 8007684:	321a      	adds	r2, #26
 8007686:	9901      	ldr	r1, [sp, #4]
 8007688:	9800      	ldr	r0, [sp, #0]
 800768a:	9e08      	ldr	r6, [sp, #32]
 800768c:	47b0      	blx	r6
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d0e6      	beq.n	8007660 <_printf_common+0xa4>
 8007692:	3701      	adds	r7, #1
 8007694:	e7d1      	b.n	800763a <_printf_common+0x7e>
	...

08007698 <_printf_i>:
 8007698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769a:	b08b      	sub	sp, #44	; 0x2c
 800769c:	9206      	str	r2, [sp, #24]
 800769e:	000a      	movs	r2, r1
 80076a0:	3243      	adds	r2, #67	; 0x43
 80076a2:	9307      	str	r3, [sp, #28]
 80076a4:	9005      	str	r0, [sp, #20]
 80076a6:	9204      	str	r2, [sp, #16]
 80076a8:	7e0a      	ldrb	r2, [r1, #24]
 80076aa:	000c      	movs	r4, r1
 80076ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076ae:	2a6e      	cmp	r2, #110	; 0x6e
 80076b0:	d100      	bne.n	80076b4 <_printf_i+0x1c>
 80076b2:	e08f      	b.n	80077d4 <_printf_i+0x13c>
 80076b4:	d817      	bhi.n	80076e6 <_printf_i+0x4e>
 80076b6:	2a63      	cmp	r2, #99	; 0x63
 80076b8:	d02c      	beq.n	8007714 <_printf_i+0x7c>
 80076ba:	d808      	bhi.n	80076ce <_printf_i+0x36>
 80076bc:	2a00      	cmp	r2, #0
 80076be:	d100      	bne.n	80076c2 <_printf_i+0x2a>
 80076c0:	e099      	b.n	80077f6 <_printf_i+0x15e>
 80076c2:	2a58      	cmp	r2, #88	; 0x58
 80076c4:	d054      	beq.n	8007770 <_printf_i+0xd8>
 80076c6:	0026      	movs	r6, r4
 80076c8:	3642      	adds	r6, #66	; 0x42
 80076ca:	7032      	strb	r2, [r6, #0]
 80076cc:	e029      	b.n	8007722 <_printf_i+0x8a>
 80076ce:	2a64      	cmp	r2, #100	; 0x64
 80076d0:	d001      	beq.n	80076d6 <_printf_i+0x3e>
 80076d2:	2a69      	cmp	r2, #105	; 0x69
 80076d4:	d1f7      	bne.n	80076c6 <_printf_i+0x2e>
 80076d6:	6821      	ldr	r1, [r4, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	0608      	lsls	r0, r1, #24
 80076dc:	d523      	bpl.n	8007726 <_printf_i+0x8e>
 80076de:	1d11      	adds	r1, r2, #4
 80076e0:	6019      	str	r1, [r3, #0]
 80076e2:	6815      	ldr	r5, [r2, #0]
 80076e4:	e025      	b.n	8007732 <_printf_i+0x9a>
 80076e6:	2a73      	cmp	r2, #115	; 0x73
 80076e8:	d100      	bne.n	80076ec <_printf_i+0x54>
 80076ea:	e088      	b.n	80077fe <_printf_i+0x166>
 80076ec:	d808      	bhi.n	8007700 <_printf_i+0x68>
 80076ee:	2a6f      	cmp	r2, #111	; 0x6f
 80076f0:	d029      	beq.n	8007746 <_printf_i+0xae>
 80076f2:	2a70      	cmp	r2, #112	; 0x70
 80076f4:	d1e7      	bne.n	80076c6 <_printf_i+0x2e>
 80076f6:	2220      	movs	r2, #32
 80076f8:	6809      	ldr	r1, [r1, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	6022      	str	r2, [r4, #0]
 80076fe:	e003      	b.n	8007708 <_printf_i+0x70>
 8007700:	2a75      	cmp	r2, #117	; 0x75
 8007702:	d020      	beq.n	8007746 <_printf_i+0xae>
 8007704:	2a78      	cmp	r2, #120	; 0x78
 8007706:	d1de      	bne.n	80076c6 <_printf_i+0x2e>
 8007708:	0022      	movs	r2, r4
 800770a:	2178      	movs	r1, #120	; 0x78
 800770c:	3245      	adds	r2, #69	; 0x45
 800770e:	7011      	strb	r1, [r2, #0]
 8007710:	4a6c      	ldr	r2, [pc, #432]	; (80078c4 <_printf_i+0x22c>)
 8007712:	e030      	b.n	8007776 <_printf_i+0xde>
 8007714:	000e      	movs	r6, r1
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	3642      	adds	r6, #66	; 0x42
 800771a:	1d11      	adds	r1, r2, #4
 800771c:	6019      	str	r1, [r3, #0]
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	7033      	strb	r3, [r6, #0]
 8007722:	2301      	movs	r3, #1
 8007724:	e079      	b.n	800781a <_printf_i+0x182>
 8007726:	0649      	lsls	r1, r1, #25
 8007728:	d5d9      	bpl.n	80076de <_printf_i+0x46>
 800772a:	1d11      	adds	r1, r2, #4
 800772c:	6019      	str	r1, [r3, #0]
 800772e:	2300      	movs	r3, #0
 8007730:	5ed5      	ldrsh	r5, [r2, r3]
 8007732:	2d00      	cmp	r5, #0
 8007734:	da03      	bge.n	800773e <_printf_i+0xa6>
 8007736:	232d      	movs	r3, #45	; 0x2d
 8007738:	9a04      	ldr	r2, [sp, #16]
 800773a:	426d      	negs	r5, r5
 800773c:	7013      	strb	r3, [r2, #0]
 800773e:	4b62      	ldr	r3, [pc, #392]	; (80078c8 <_printf_i+0x230>)
 8007740:	270a      	movs	r7, #10
 8007742:	9303      	str	r3, [sp, #12]
 8007744:	e02f      	b.n	80077a6 <_printf_i+0x10e>
 8007746:	6820      	ldr	r0, [r4, #0]
 8007748:	6819      	ldr	r1, [r3, #0]
 800774a:	0605      	lsls	r5, r0, #24
 800774c:	d503      	bpl.n	8007756 <_printf_i+0xbe>
 800774e:	1d08      	adds	r0, r1, #4
 8007750:	6018      	str	r0, [r3, #0]
 8007752:	680d      	ldr	r5, [r1, #0]
 8007754:	e005      	b.n	8007762 <_printf_i+0xca>
 8007756:	0640      	lsls	r0, r0, #25
 8007758:	d5f9      	bpl.n	800774e <_printf_i+0xb6>
 800775a:	680d      	ldr	r5, [r1, #0]
 800775c:	1d08      	adds	r0, r1, #4
 800775e:	6018      	str	r0, [r3, #0]
 8007760:	b2ad      	uxth	r5, r5
 8007762:	4b59      	ldr	r3, [pc, #356]	; (80078c8 <_printf_i+0x230>)
 8007764:	2708      	movs	r7, #8
 8007766:	9303      	str	r3, [sp, #12]
 8007768:	2a6f      	cmp	r2, #111	; 0x6f
 800776a:	d018      	beq.n	800779e <_printf_i+0x106>
 800776c:	270a      	movs	r7, #10
 800776e:	e016      	b.n	800779e <_printf_i+0x106>
 8007770:	3145      	adds	r1, #69	; 0x45
 8007772:	700a      	strb	r2, [r1, #0]
 8007774:	4a54      	ldr	r2, [pc, #336]	; (80078c8 <_printf_i+0x230>)
 8007776:	9203      	str	r2, [sp, #12]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	6821      	ldr	r1, [r4, #0]
 800777c:	1d10      	adds	r0, r2, #4
 800777e:	6018      	str	r0, [r3, #0]
 8007780:	6815      	ldr	r5, [r2, #0]
 8007782:	0608      	lsls	r0, r1, #24
 8007784:	d522      	bpl.n	80077cc <_printf_i+0x134>
 8007786:	07cb      	lsls	r3, r1, #31
 8007788:	d502      	bpl.n	8007790 <_printf_i+0xf8>
 800778a:	2320      	movs	r3, #32
 800778c:	4319      	orrs	r1, r3
 800778e:	6021      	str	r1, [r4, #0]
 8007790:	2710      	movs	r7, #16
 8007792:	2d00      	cmp	r5, #0
 8007794:	d103      	bne.n	800779e <_printf_i+0x106>
 8007796:	2320      	movs	r3, #32
 8007798:	6822      	ldr	r2, [r4, #0]
 800779a:	439a      	bics	r2, r3
 800779c:	6022      	str	r2, [r4, #0]
 800779e:	0023      	movs	r3, r4
 80077a0:	2200      	movs	r2, #0
 80077a2:	3343      	adds	r3, #67	; 0x43
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	6863      	ldr	r3, [r4, #4]
 80077a8:	60a3      	str	r3, [r4, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	db5c      	blt.n	8007868 <_printf_i+0x1d0>
 80077ae:	2204      	movs	r2, #4
 80077b0:	6821      	ldr	r1, [r4, #0]
 80077b2:	4391      	bics	r1, r2
 80077b4:	6021      	str	r1, [r4, #0]
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	d158      	bne.n	800786c <_printf_i+0x1d4>
 80077ba:	9e04      	ldr	r6, [sp, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d064      	beq.n	800788a <_printf_i+0x1f2>
 80077c0:	0026      	movs	r6, r4
 80077c2:	9b03      	ldr	r3, [sp, #12]
 80077c4:	3642      	adds	r6, #66	; 0x42
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	7033      	strb	r3, [r6, #0]
 80077ca:	e05e      	b.n	800788a <_printf_i+0x1f2>
 80077cc:	0648      	lsls	r0, r1, #25
 80077ce:	d5da      	bpl.n	8007786 <_printf_i+0xee>
 80077d0:	b2ad      	uxth	r5, r5
 80077d2:	e7d8      	b.n	8007786 <_printf_i+0xee>
 80077d4:	6809      	ldr	r1, [r1, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	0608      	lsls	r0, r1, #24
 80077da:	d505      	bpl.n	80077e8 <_printf_i+0x150>
 80077dc:	1d11      	adds	r1, r2, #4
 80077de:	6019      	str	r1, [r3, #0]
 80077e0:	6813      	ldr	r3, [r2, #0]
 80077e2:	6962      	ldr	r2, [r4, #20]
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	e006      	b.n	80077f6 <_printf_i+0x15e>
 80077e8:	0649      	lsls	r1, r1, #25
 80077ea:	d5f7      	bpl.n	80077dc <_printf_i+0x144>
 80077ec:	1d11      	adds	r1, r2, #4
 80077ee:	6019      	str	r1, [r3, #0]
 80077f0:	6813      	ldr	r3, [r2, #0]
 80077f2:	8aa2      	ldrh	r2, [r4, #20]
 80077f4:	801a      	strh	r2, [r3, #0]
 80077f6:	2300      	movs	r3, #0
 80077f8:	9e04      	ldr	r6, [sp, #16]
 80077fa:	6123      	str	r3, [r4, #16]
 80077fc:	e054      	b.n	80078a8 <_printf_i+0x210>
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	1d11      	adds	r1, r2, #4
 8007802:	6019      	str	r1, [r3, #0]
 8007804:	6816      	ldr	r6, [r2, #0]
 8007806:	2100      	movs	r1, #0
 8007808:	6862      	ldr	r2, [r4, #4]
 800780a:	0030      	movs	r0, r6
 800780c:	f000 f85e 	bl	80078cc <memchr>
 8007810:	2800      	cmp	r0, #0
 8007812:	d001      	beq.n	8007818 <_printf_i+0x180>
 8007814:	1b80      	subs	r0, r0, r6
 8007816:	6060      	str	r0, [r4, #4]
 8007818:	6863      	ldr	r3, [r4, #4]
 800781a:	6123      	str	r3, [r4, #16]
 800781c:	2300      	movs	r3, #0
 800781e:	9a04      	ldr	r2, [sp, #16]
 8007820:	7013      	strb	r3, [r2, #0]
 8007822:	e041      	b.n	80078a8 <_printf_i+0x210>
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	0032      	movs	r2, r6
 8007828:	9906      	ldr	r1, [sp, #24]
 800782a:	9805      	ldr	r0, [sp, #20]
 800782c:	9d07      	ldr	r5, [sp, #28]
 800782e:	47a8      	blx	r5
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d043      	beq.n	80078bc <_printf_i+0x224>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	2500      	movs	r5, #0
 8007838:	079b      	lsls	r3, r3, #30
 800783a:	d40f      	bmi.n	800785c <_printf_i+0x1c4>
 800783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783e:	68e0      	ldr	r0, [r4, #12]
 8007840:	4298      	cmp	r0, r3
 8007842:	da3d      	bge.n	80078c0 <_printf_i+0x228>
 8007844:	0018      	movs	r0, r3
 8007846:	e03b      	b.n	80078c0 <_printf_i+0x228>
 8007848:	0022      	movs	r2, r4
 800784a:	2301      	movs	r3, #1
 800784c:	3219      	adds	r2, #25
 800784e:	9906      	ldr	r1, [sp, #24]
 8007850:	9805      	ldr	r0, [sp, #20]
 8007852:	9e07      	ldr	r6, [sp, #28]
 8007854:	47b0      	blx	r6
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	d030      	beq.n	80078bc <_printf_i+0x224>
 800785a:	3501      	adds	r5, #1
 800785c:	68e3      	ldr	r3, [r4, #12]
 800785e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	429d      	cmp	r5, r3
 8007864:	dbf0      	blt.n	8007848 <_printf_i+0x1b0>
 8007866:	e7e9      	b.n	800783c <_printf_i+0x1a4>
 8007868:	2d00      	cmp	r5, #0
 800786a:	d0a9      	beq.n	80077c0 <_printf_i+0x128>
 800786c:	9e04      	ldr	r6, [sp, #16]
 800786e:	0028      	movs	r0, r5
 8007870:	0039      	movs	r1, r7
 8007872:	f7f8 fcd9 	bl	8000228 <__aeabi_uidivmod>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	3e01      	subs	r6, #1
 800787a:	5c5b      	ldrb	r3, [r3, r1]
 800787c:	0028      	movs	r0, r5
 800787e:	7033      	strb	r3, [r6, #0]
 8007880:	0039      	movs	r1, r7
 8007882:	f7f8 fc4b 	bl	800011c <__udivsi3>
 8007886:	1e05      	subs	r5, r0, #0
 8007888:	d1f1      	bne.n	800786e <_printf_i+0x1d6>
 800788a:	2f08      	cmp	r7, #8
 800788c:	d109      	bne.n	80078a2 <_printf_i+0x20a>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	07db      	lsls	r3, r3, #31
 8007892:	d506      	bpl.n	80078a2 <_printf_i+0x20a>
 8007894:	6863      	ldr	r3, [r4, #4]
 8007896:	6922      	ldr	r2, [r4, #16]
 8007898:	4293      	cmp	r3, r2
 800789a:	dc02      	bgt.n	80078a2 <_printf_i+0x20a>
 800789c:	2330      	movs	r3, #48	; 0x30
 800789e:	3e01      	subs	r6, #1
 80078a0:	7033      	strb	r3, [r6, #0]
 80078a2:	9b04      	ldr	r3, [sp, #16]
 80078a4:	1b9b      	subs	r3, r3, r6
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	9b07      	ldr	r3, [sp, #28]
 80078aa:	aa09      	add	r2, sp, #36	; 0x24
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	0021      	movs	r1, r4
 80078b0:	9b06      	ldr	r3, [sp, #24]
 80078b2:	9805      	ldr	r0, [sp, #20]
 80078b4:	f7ff fe82 	bl	80075bc <_printf_common>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d1b3      	bne.n	8007824 <_printf_i+0x18c>
 80078bc:	2001      	movs	r0, #1
 80078be:	4240      	negs	r0, r0
 80078c0:	b00b      	add	sp, #44	; 0x2c
 80078c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c4:	08008091 	.word	0x08008091
 80078c8:	08008080 	.word	0x08008080

080078cc <memchr>:
 80078cc:	b2c9      	uxtb	r1, r1
 80078ce:	1882      	adds	r2, r0, r2
 80078d0:	4290      	cmp	r0, r2
 80078d2:	d101      	bne.n	80078d8 <memchr+0xc>
 80078d4:	2000      	movs	r0, #0
 80078d6:	4770      	bx	lr
 80078d8:	7803      	ldrb	r3, [r0, #0]
 80078da:	428b      	cmp	r3, r1
 80078dc:	d0fb      	beq.n	80078d6 <memchr+0xa>
 80078de:	3001      	adds	r0, #1
 80078e0:	e7f6      	b.n	80078d0 <memchr+0x4>

080078e2 <memmove>:
 80078e2:	b510      	push	{r4, lr}
 80078e4:	4288      	cmp	r0, r1
 80078e6:	d902      	bls.n	80078ee <memmove+0xc>
 80078e8:	188b      	adds	r3, r1, r2
 80078ea:	4298      	cmp	r0, r3
 80078ec:	d308      	bcc.n	8007900 <memmove+0x1e>
 80078ee:	2300      	movs	r3, #0
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d007      	beq.n	8007904 <memmove+0x22>
 80078f4:	5ccc      	ldrb	r4, [r1, r3]
 80078f6:	54c4      	strb	r4, [r0, r3]
 80078f8:	3301      	adds	r3, #1
 80078fa:	e7f9      	b.n	80078f0 <memmove+0xe>
 80078fc:	5c8b      	ldrb	r3, [r1, r2]
 80078fe:	5483      	strb	r3, [r0, r2]
 8007900:	3a01      	subs	r2, #1
 8007902:	d2fb      	bcs.n	80078fc <memmove+0x1a>
 8007904:	bd10      	pop	{r4, pc}
	...

08007908 <_free_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	0005      	movs	r5, r0
 800790c:	2900      	cmp	r1, #0
 800790e:	d010      	beq.n	8007932 <_free_r+0x2a>
 8007910:	1f0c      	subs	r4, r1, #4
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	da00      	bge.n	800791a <_free_r+0x12>
 8007918:	18e4      	adds	r4, r4, r3
 800791a:	0028      	movs	r0, r5
 800791c:	f000 f8d4 	bl	8007ac8 <__malloc_lock>
 8007920:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <_free_r+0x90>)
 8007922:	6813      	ldr	r3, [r2, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <_free_r+0x2c>
 8007928:	6063      	str	r3, [r4, #4]
 800792a:	6014      	str	r4, [r2, #0]
 800792c:	0028      	movs	r0, r5
 800792e:	f000 f8cc 	bl	8007aca <__malloc_unlock>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	42a3      	cmp	r3, r4
 8007936:	d909      	bls.n	800794c <_free_r+0x44>
 8007938:	6821      	ldr	r1, [r4, #0]
 800793a:	1860      	adds	r0, r4, r1
 800793c:	4283      	cmp	r3, r0
 800793e:	d1f3      	bne.n	8007928 <_free_r+0x20>
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	1841      	adds	r1, r0, r1
 8007946:	6021      	str	r1, [r4, #0]
 8007948:	e7ee      	b.n	8007928 <_free_r+0x20>
 800794a:	0013      	movs	r3, r2
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	2a00      	cmp	r2, #0
 8007950:	d001      	beq.n	8007956 <_free_r+0x4e>
 8007952:	42a2      	cmp	r2, r4
 8007954:	d9f9      	bls.n	800794a <_free_r+0x42>
 8007956:	6819      	ldr	r1, [r3, #0]
 8007958:	1858      	adds	r0, r3, r1
 800795a:	42a0      	cmp	r0, r4
 800795c:	d10b      	bne.n	8007976 <_free_r+0x6e>
 800795e:	6820      	ldr	r0, [r4, #0]
 8007960:	1809      	adds	r1, r1, r0
 8007962:	1858      	adds	r0, r3, r1
 8007964:	6019      	str	r1, [r3, #0]
 8007966:	4282      	cmp	r2, r0
 8007968:	d1e0      	bne.n	800792c <_free_r+0x24>
 800796a:	6810      	ldr	r0, [r2, #0]
 800796c:	6852      	ldr	r2, [r2, #4]
 800796e:	1841      	adds	r1, r0, r1
 8007970:	6019      	str	r1, [r3, #0]
 8007972:	605a      	str	r2, [r3, #4]
 8007974:	e7da      	b.n	800792c <_free_r+0x24>
 8007976:	42a0      	cmp	r0, r4
 8007978:	d902      	bls.n	8007980 <_free_r+0x78>
 800797a:	230c      	movs	r3, #12
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	e7d5      	b.n	800792c <_free_r+0x24>
 8007980:	6821      	ldr	r1, [r4, #0]
 8007982:	1860      	adds	r0, r4, r1
 8007984:	4282      	cmp	r2, r0
 8007986:	d103      	bne.n	8007990 <_free_r+0x88>
 8007988:	6810      	ldr	r0, [r2, #0]
 800798a:	6852      	ldr	r2, [r2, #4]
 800798c:	1841      	adds	r1, r0, r1
 800798e:	6021      	str	r1, [r4, #0]
 8007990:	6062      	str	r2, [r4, #4]
 8007992:	605c      	str	r4, [r3, #4]
 8007994:	e7ca      	b.n	800792c <_free_r+0x24>
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	20000538 	.word	0x20000538

0800799c <_malloc_r>:
 800799c:	2303      	movs	r3, #3
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	1ccd      	adds	r5, r1, #3
 80079a2:	439d      	bics	r5, r3
 80079a4:	3508      	adds	r5, #8
 80079a6:	0006      	movs	r6, r0
 80079a8:	2d0c      	cmp	r5, #12
 80079aa:	d21e      	bcs.n	80079ea <_malloc_r+0x4e>
 80079ac:	250c      	movs	r5, #12
 80079ae:	42a9      	cmp	r1, r5
 80079b0:	d81d      	bhi.n	80079ee <_malloc_r+0x52>
 80079b2:	0030      	movs	r0, r6
 80079b4:	f000 f888 	bl	8007ac8 <__malloc_lock>
 80079b8:	4a25      	ldr	r2, [pc, #148]	; (8007a50 <_malloc_r+0xb4>)
 80079ba:	6814      	ldr	r4, [r2, #0]
 80079bc:	0021      	movs	r1, r4
 80079be:	2900      	cmp	r1, #0
 80079c0:	d119      	bne.n	80079f6 <_malloc_r+0x5a>
 80079c2:	4c24      	ldr	r4, [pc, #144]	; (8007a54 <_malloc_r+0xb8>)
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d103      	bne.n	80079d2 <_malloc_r+0x36>
 80079ca:	0030      	movs	r0, r6
 80079cc:	f000 f86a 	bl	8007aa4 <_sbrk_r>
 80079d0:	6020      	str	r0, [r4, #0]
 80079d2:	0029      	movs	r1, r5
 80079d4:	0030      	movs	r0, r6
 80079d6:	f000 f865 	bl	8007aa4 <_sbrk_r>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	d12c      	bne.n	8007a38 <_malloc_r+0x9c>
 80079de:	230c      	movs	r3, #12
 80079e0:	0030      	movs	r0, r6
 80079e2:	6033      	str	r3, [r6, #0]
 80079e4:	f000 f871 	bl	8007aca <__malloc_unlock>
 80079e8:	e003      	b.n	80079f2 <_malloc_r+0x56>
 80079ea:	2d00      	cmp	r5, #0
 80079ec:	dadf      	bge.n	80079ae <_malloc_r+0x12>
 80079ee:	230c      	movs	r3, #12
 80079f0:	6033      	str	r3, [r6, #0]
 80079f2:	2000      	movs	r0, #0
 80079f4:	bd70      	pop	{r4, r5, r6, pc}
 80079f6:	680b      	ldr	r3, [r1, #0]
 80079f8:	1b5b      	subs	r3, r3, r5
 80079fa:	d41a      	bmi.n	8007a32 <_malloc_r+0x96>
 80079fc:	2b0b      	cmp	r3, #11
 80079fe:	d903      	bls.n	8007a08 <_malloc_r+0x6c>
 8007a00:	600b      	str	r3, [r1, #0]
 8007a02:	18cc      	adds	r4, r1, r3
 8007a04:	6025      	str	r5, [r4, #0]
 8007a06:	e003      	b.n	8007a10 <_malloc_r+0x74>
 8007a08:	428c      	cmp	r4, r1
 8007a0a:	d10e      	bne.n	8007a2a <_malloc_r+0x8e>
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	0030      	movs	r0, r6
 8007a12:	f000 f85a 	bl	8007aca <__malloc_unlock>
 8007a16:	0020      	movs	r0, r4
 8007a18:	2207      	movs	r2, #7
 8007a1a:	300b      	adds	r0, #11
 8007a1c:	1d23      	adds	r3, r4, #4
 8007a1e:	4390      	bics	r0, r2
 8007a20:	1ac3      	subs	r3, r0, r3
 8007a22:	d0e7      	beq.n	80079f4 <_malloc_r+0x58>
 8007a24:	425a      	negs	r2, r3
 8007a26:	50e2      	str	r2, [r4, r3]
 8007a28:	e7e4      	b.n	80079f4 <_malloc_r+0x58>
 8007a2a:	684b      	ldr	r3, [r1, #4]
 8007a2c:	6063      	str	r3, [r4, #4]
 8007a2e:	000c      	movs	r4, r1
 8007a30:	e7ee      	b.n	8007a10 <_malloc_r+0x74>
 8007a32:	000c      	movs	r4, r1
 8007a34:	6849      	ldr	r1, [r1, #4]
 8007a36:	e7c2      	b.n	80079be <_malloc_r+0x22>
 8007a38:	2303      	movs	r3, #3
 8007a3a:	1cc4      	adds	r4, r0, #3
 8007a3c:	439c      	bics	r4, r3
 8007a3e:	42a0      	cmp	r0, r4
 8007a40:	d0e0      	beq.n	8007a04 <_malloc_r+0x68>
 8007a42:	1a21      	subs	r1, r4, r0
 8007a44:	0030      	movs	r0, r6
 8007a46:	f000 f82d 	bl	8007aa4 <_sbrk_r>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d1da      	bne.n	8007a04 <_malloc_r+0x68>
 8007a4e:	e7c6      	b.n	80079de <_malloc_r+0x42>
 8007a50:	20000538 	.word	0x20000538
 8007a54:	2000053c 	.word	0x2000053c

08007a58 <_realloc_r>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	0007      	movs	r7, r0
 8007a5c:	000d      	movs	r5, r1
 8007a5e:	0016      	movs	r6, r2
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d105      	bne.n	8007a70 <_realloc_r+0x18>
 8007a64:	0011      	movs	r1, r2
 8007a66:	f7ff ff99 	bl	800799c <_malloc_r>
 8007a6a:	0004      	movs	r4, r0
 8007a6c:	0020      	movs	r0, r4
 8007a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a70:	2a00      	cmp	r2, #0
 8007a72:	d103      	bne.n	8007a7c <_realloc_r+0x24>
 8007a74:	f7ff ff48 	bl	8007908 <_free_r>
 8007a78:	0034      	movs	r4, r6
 8007a7a:	e7f7      	b.n	8007a6c <_realloc_r+0x14>
 8007a7c:	f000 f826 	bl	8007acc <_malloc_usable_size_r>
 8007a80:	002c      	movs	r4, r5
 8007a82:	4286      	cmp	r6, r0
 8007a84:	d9f2      	bls.n	8007a6c <_realloc_r+0x14>
 8007a86:	0031      	movs	r1, r6
 8007a88:	0038      	movs	r0, r7
 8007a8a:	f7ff ff87 	bl	800799c <_malloc_r>
 8007a8e:	1e04      	subs	r4, r0, #0
 8007a90:	d0ec      	beq.n	8007a6c <_realloc_r+0x14>
 8007a92:	0029      	movs	r1, r5
 8007a94:	0032      	movs	r2, r6
 8007a96:	f7ff fbd1 	bl	800723c <memcpy>
 8007a9a:	0029      	movs	r1, r5
 8007a9c:	0038      	movs	r0, r7
 8007a9e:	f7ff ff33 	bl	8007908 <_free_r>
 8007aa2:	e7e3      	b.n	8007a6c <_realloc_r+0x14>

08007aa4 <_sbrk_r>:
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	b570      	push	{r4, r5, r6, lr}
 8007aa8:	4c06      	ldr	r4, [pc, #24]	; (8007ac4 <_sbrk_r+0x20>)
 8007aaa:	0005      	movs	r5, r0
 8007aac:	0008      	movs	r0, r1
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	f000 f95e 	bl	8007d70 <_sbrk>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d103      	bne.n	8007ac0 <_sbrk_r+0x1c>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d000      	beq.n	8007ac0 <_sbrk_r+0x1c>
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	bd70      	pop	{r4, r5, r6, pc}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	20000638 	.word	0x20000638

08007ac8 <__malloc_lock>:
 8007ac8:	4770      	bx	lr

08007aca <__malloc_unlock>:
 8007aca:	4770      	bx	lr

08007acc <_malloc_usable_size_r>:
 8007acc:	1f0b      	subs	r3, r1, #4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	1f18      	subs	r0, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	da01      	bge.n	8007ada <_malloc_usable_size_r+0xe>
 8007ad6:	580b      	ldr	r3, [r1, r0]
 8007ad8:	18c0      	adds	r0, r0, r3
 8007ada:	4770      	bx	lr

08007adc <ceil>:
 8007adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ade:	004b      	lsls	r3, r1, #1
 8007ae0:	4a39      	ldr	r2, [pc, #228]	; (8007bc8 <ceil+0xec>)
 8007ae2:	0d5b      	lsrs	r3, r3, #21
 8007ae4:	b085      	sub	sp, #20
 8007ae6:	189e      	adds	r6, r3, r2
 8007ae8:	9003      	str	r0, [sp, #12]
 8007aea:	000c      	movs	r4, r1
 8007aec:	0005      	movs	r5, r0
 8007aee:	2e13      	cmp	r6, #19
 8007af0:	dc32      	bgt.n	8007b58 <ceil+0x7c>
 8007af2:	2e00      	cmp	r6, #0
 8007af4:	da13      	bge.n	8007b1e <ceil+0x42>
 8007af6:	4a35      	ldr	r2, [pc, #212]	; (8007bcc <ceil+0xf0>)
 8007af8:	4b35      	ldr	r3, [pc, #212]	; (8007bd0 <ceil+0xf4>)
 8007afa:	f7f8 fdc1 	bl	8000680 <__aeabi_dadd>
 8007afe:	2200      	movs	r2, #0
 8007b00:	2300      	movs	r3, #0
 8007b02:	f7f8 fcab 	bl	800045c <__aeabi_dcmpgt>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d006      	beq.n	8007b18 <ceil+0x3c>
 8007b0a:	2c00      	cmp	r4, #0
 8007b0c:	db57      	blt.n	8007bbe <ceil+0xe2>
 8007b0e:	432c      	orrs	r4, r5
 8007b10:	2500      	movs	r5, #0
 8007b12:	42ac      	cmp	r4, r5
 8007b14:	d000      	beq.n	8007b18 <ceil+0x3c>
 8007b16:	4c2f      	ldr	r4, [pc, #188]	; (8007bd4 <ceil+0xf8>)
 8007b18:	0028      	movs	r0, r5
 8007b1a:	0021      	movs	r1, r4
 8007b1c:	e026      	b.n	8007b6c <ceil+0x90>
 8007b1e:	4f2e      	ldr	r7, [pc, #184]	; (8007bd8 <ceil+0xfc>)
 8007b20:	4137      	asrs	r7, r6
 8007b22:	003b      	movs	r3, r7
 8007b24:	400b      	ands	r3, r1
 8007b26:	4303      	orrs	r3, r0
 8007b28:	d020      	beq.n	8007b6c <ceil+0x90>
 8007b2a:	9000      	str	r0, [sp, #0]
 8007b2c:	9101      	str	r1, [sp, #4]
 8007b2e:	4a27      	ldr	r2, [pc, #156]	; (8007bcc <ceil+0xf0>)
 8007b30:	4b27      	ldr	r3, [pc, #156]	; (8007bd0 <ceil+0xf4>)
 8007b32:	9800      	ldr	r0, [sp, #0]
 8007b34:	9901      	ldr	r1, [sp, #4]
 8007b36:	f7f8 fda3 	bl	8000680 <__aeabi_dadd>
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f7f8 fc8d 	bl	800045c <__aeabi_dcmpgt>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d0e8      	beq.n	8007b18 <ceil+0x3c>
 8007b46:	2c00      	cmp	r4, #0
 8007b48:	dd03      	ble.n	8007b52 <ceil+0x76>
 8007b4a:	2380      	movs	r3, #128	; 0x80
 8007b4c:	035b      	lsls	r3, r3, #13
 8007b4e:	4133      	asrs	r3, r6
 8007b50:	18e4      	adds	r4, r4, r3
 8007b52:	43bc      	bics	r4, r7
 8007b54:	2500      	movs	r5, #0
 8007b56:	e7df      	b.n	8007b18 <ceil+0x3c>
 8007b58:	2e33      	cmp	r6, #51	; 0x33
 8007b5a:	dd09      	ble.n	8007b70 <ceil+0x94>
 8007b5c:	2380      	movs	r3, #128	; 0x80
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	429e      	cmp	r6, r3
 8007b62:	d103      	bne.n	8007b6c <ceil+0x90>
 8007b64:	0002      	movs	r2, r0
 8007b66:	000b      	movs	r3, r1
 8007b68:	f7f8 fd8a 	bl	8000680 <__aeabi_dadd>
 8007b6c:	b005      	add	sp, #20
 8007b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b70:	2701      	movs	r7, #1
 8007b72:	4a1a      	ldr	r2, [pc, #104]	; (8007bdc <ceil+0x100>)
 8007b74:	427f      	negs	r7, r7
 8007b76:	189b      	adds	r3, r3, r2
 8007b78:	40df      	lsrs	r7, r3
 8007b7a:	4207      	tst	r7, r0
 8007b7c:	d0f6      	beq.n	8007b6c <ceil+0x90>
 8007b7e:	9000      	str	r0, [sp, #0]
 8007b80:	9101      	str	r1, [sp, #4]
 8007b82:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <ceil+0xf0>)
 8007b84:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <ceil+0xf4>)
 8007b86:	9800      	ldr	r0, [sp, #0]
 8007b88:	9901      	ldr	r1, [sp, #4]
 8007b8a:	f7f8 fd79 	bl	8000680 <__aeabi_dadd>
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2300      	movs	r3, #0
 8007b92:	f7f8 fc63 	bl	800045c <__aeabi_dcmpgt>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d0be      	beq.n	8007b18 <ceil+0x3c>
 8007b9a:	2c00      	cmp	r4, #0
 8007b9c:	dd02      	ble.n	8007ba4 <ceil+0xc8>
 8007b9e:	2e14      	cmp	r6, #20
 8007ba0:	d102      	bne.n	8007ba8 <ceil+0xcc>
 8007ba2:	3401      	adds	r4, #1
 8007ba4:	43bd      	bics	r5, r7
 8007ba6:	e7b7      	b.n	8007b18 <ceil+0x3c>
 8007ba8:	2334      	movs	r3, #52	; 0x34
 8007baa:	1b9e      	subs	r6, r3, r6
 8007bac:	3b33      	subs	r3, #51	; 0x33
 8007bae:	40b3      	lsls	r3, r6
 8007bb0:	18ed      	adds	r5, r5, r3
 8007bb2:	9b03      	ldr	r3, [sp, #12]
 8007bb4:	429d      	cmp	r5, r3
 8007bb6:	419b      	sbcs	r3, r3
 8007bb8:	425b      	negs	r3, r3
 8007bba:	18e4      	adds	r4, r4, r3
 8007bbc:	e7f2      	b.n	8007ba4 <ceil+0xc8>
 8007bbe:	2480      	movs	r4, #128	; 0x80
 8007bc0:	2500      	movs	r5, #0
 8007bc2:	0624      	lsls	r4, r4, #24
 8007bc4:	e7a8      	b.n	8007b18 <ceil+0x3c>
 8007bc6:	46c0      	nop			; (mov r8, r8)
 8007bc8:	fffffc01 	.word	0xfffffc01
 8007bcc:	8800759c 	.word	0x8800759c
 8007bd0:	7e37e43c 	.word	0x7e37e43c
 8007bd4:	3ff00000 	.word	0x3ff00000
 8007bd8:	000fffff 	.word	0x000fffff
 8007bdc:	fffffbed 	.word	0xfffffbed

08007be0 <floor>:
 8007be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007be2:	004b      	lsls	r3, r1, #1
 8007be4:	4a39      	ldr	r2, [pc, #228]	; (8007ccc <floor+0xec>)
 8007be6:	0d5b      	lsrs	r3, r3, #21
 8007be8:	b085      	sub	sp, #20
 8007bea:	189e      	adds	r6, r3, r2
 8007bec:	9003      	str	r0, [sp, #12]
 8007bee:	000c      	movs	r4, r1
 8007bf0:	0005      	movs	r5, r0
 8007bf2:	2e13      	cmp	r6, #19
 8007bf4:	dc34      	bgt.n	8007c60 <floor+0x80>
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	da15      	bge.n	8007c26 <floor+0x46>
 8007bfa:	4a35      	ldr	r2, [pc, #212]	; (8007cd0 <floor+0xf0>)
 8007bfc:	4b35      	ldr	r3, [pc, #212]	; (8007cd4 <floor+0xf4>)
 8007bfe:	f7f8 fd3f 	bl	8000680 <__aeabi_dadd>
 8007c02:	2200      	movs	r2, #0
 8007c04:	2300      	movs	r3, #0
 8007c06:	f7f8 fc29 	bl	800045c <__aeabi_dcmpgt>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	d008      	beq.n	8007c20 <floor+0x40>
 8007c0e:	2c00      	cmp	r4, #0
 8007c10:	da59      	bge.n	8007cc6 <floor+0xe6>
 8007c12:	0063      	lsls	r3, r4, #1
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	432b      	orrs	r3, r5
 8007c18:	2500      	movs	r5, #0
 8007c1a:	42ab      	cmp	r3, r5
 8007c1c:	d000      	beq.n	8007c20 <floor+0x40>
 8007c1e:	4c2e      	ldr	r4, [pc, #184]	; (8007cd8 <floor+0xf8>)
 8007c20:	0028      	movs	r0, r5
 8007c22:	0021      	movs	r1, r4
 8007c24:	e026      	b.n	8007c74 <floor+0x94>
 8007c26:	4f2d      	ldr	r7, [pc, #180]	; (8007cdc <floor+0xfc>)
 8007c28:	4137      	asrs	r7, r6
 8007c2a:	003b      	movs	r3, r7
 8007c2c:	400b      	ands	r3, r1
 8007c2e:	4303      	orrs	r3, r0
 8007c30:	d020      	beq.n	8007c74 <floor+0x94>
 8007c32:	9000      	str	r0, [sp, #0]
 8007c34:	9101      	str	r1, [sp, #4]
 8007c36:	4a26      	ldr	r2, [pc, #152]	; (8007cd0 <floor+0xf0>)
 8007c38:	4b26      	ldr	r3, [pc, #152]	; (8007cd4 <floor+0xf4>)
 8007c3a:	9800      	ldr	r0, [sp, #0]
 8007c3c:	9901      	ldr	r1, [sp, #4]
 8007c3e:	f7f8 fd1f 	bl	8000680 <__aeabi_dadd>
 8007c42:	2200      	movs	r2, #0
 8007c44:	2300      	movs	r3, #0
 8007c46:	f7f8 fc09 	bl	800045c <__aeabi_dcmpgt>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d0e8      	beq.n	8007c20 <floor+0x40>
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	da03      	bge.n	8007c5a <floor+0x7a>
 8007c52:	2380      	movs	r3, #128	; 0x80
 8007c54:	035b      	lsls	r3, r3, #13
 8007c56:	4133      	asrs	r3, r6
 8007c58:	18e4      	adds	r4, r4, r3
 8007c5a:	43bc      	bics	r4, r7
 8007c5c:	2500      	movs	r5, #0
 8007c5e:	e7df      	b.n	8007c20 <floor+0x40>
 8007c60:	2e33      	cmp	r6, #51	; 0x33
 8007c62:	dd09      	ble.n	8007c78 <floor+0x98>
 8007c64:	2380      	movs	r3, #128	; 0x80
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	429e      	cmp	r6, r3
 8007c6a:	d103      	bne.n	8007c74 <floor+0x94>
 8007c6c:	0002      	movs	r2, r0
 8007c6e:	000b      	movs	r3, r1
 8007c70:	f7f8 fd06 	bl	8000680 <__aeabi_dadd>
 8007c74:	b005      	add	sp, #20
 8007c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c78:	2701      	movs	r7, #1
 8007c7a:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <floor+0x100>)
 8007c7c:	427f      	negs	r7, r7
 8007c7e:	189b      	adds	r3, r3, r2
 8007c80:	40df      	lsrs	r7, r3
 8007c82:	4207      	tst	r7, r0
 8007c84:	d0f6      	beq.n	8007c74 <floor+0x94>
 8007c86:	9000      	str	r0, [sp, #0]
 8007c88:	9101      	str	r1, [sp, #4]
 8007c8a:	4a11      	ldr	r2, [pc, #68]	; (8007cd0 <floor+0xf0>)
 8007c8c:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <floor+0xf4>)
 8007c8e:	9800      	ldr	r0, [sp, #0]
 8007c90:	9901      	ldr	r1, [sp, #4]
 8007c92:	f7f8 fcf5 	bl	8000680 <__aeabi_dadd>
 8007c96:	2200      	movs	r2, #0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f7f8 fbdf 	bl	800045c <__aeabi_dcmpgt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d0be      	beq.n	8007c20 <floor+0x40>
 8007ca2:	2c00      	cmp	r4, #0
 8007ca4:	da02      	bge.n	8007cac <floor+0xcc>
 8007ca6:	2e14      	cmp	r6, #20
 8007ca8:	d102      	bne.n	8007cb0 <floor+0xd0>
 8007caa:	3401      	adds	r4, #1
 8007cac:	43bd      	bics	r5, r7
 8007cae:	e7b7      	b.n	8007c20 <floor+0x40>
 8007cb0:	2334      	movs	r3, #52	; 0x34
 8007cb2:	1b9e      	subs	r6, r3, r6
 8007cb4:	3b33      	subs	r3, #51	; 0x33
 8007cb6:	40b3      	lsls	r3, r6
 8007cb8:	18ed      	adds	r5, r5, r3
 8007cba:	9b03      	ldr	r3, [sp, #12]
 8007cbc:	429d      	cmp	r5, r3
 8007cbe:	419b      	sbcs	r3, r3
 8007cc0:	425b      	negs	r3, r3
 8007cc2:	18e4      	adds	r4, r4, r3
 8007cc4:	e7f2      	b.n	8007cac <floor+0xcc>
 8007cc6:	2500      	movs	r5, #0
 8007cc8:	002c      	movs	r4, r5
 8007cca:	e7a9      	b.n	8007c20 <floor+0x40>
 8007ccc:	fffffc01 	.word	0xfffffc01
 8007cd0:	8800759c 	.word	0x8800759c
 8007cd4:	7e37e43c 	.word	0x7e37e43c
 8007cd8:	bff00000 	.word	0xbff00000
 8007cdc:	000fffff 	.word	0x000fffff
 8007ce0:	fffffbed 	.word	0xfffffbed

08007ce4 <round>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	004a      	lsls	r2, r1, #1
 8007ce8:	4d1d      	ldr	r5, [pc, #116]	; (8007d60 <round+0x7c>)
 8007cea:	0d52      	lsrs	r2, r2, #21
 8007cec:	1955      	adds	r5, r2, r5
 8007cee:	000e      	movs	r6, r1
 8007cf0:	2d13      	cmp	r5, #19
 8007cf2:	dc18      	bgt.n	8007d26 <round+0x42>
 8007cf4:	2d00      	cmp	r5, #0
 8007cf6:	da09      	bge.n	8007d0c <round+0x28>
 8007cf8:	0fcb      	lsrs	r3, r1, #31
 8007cfa:	07db      	lsls	r3, r3, #31
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	1c69      	adds	r1, r5, #1
 8007d00:	d101      	bne.n	8007d06 <round+0x22>
 8007d02:	4918      	ldr	r1, [pc, #96]	; (8007d64 <round+0x80>)
 8007d04:	430b      	orrs	r3, r1
 8007d06:	0019      	movs	r1, r3
 8007d08:	0010      	movs	r0, r2
 8007d0a:	e016      	b.n	8007d3a <round+0x56>
 8007d0c:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <round+0x84>)
 8007d0e:	412a      	asrs	r2, r5
 8007d10:	420a      	tst	r2, r1
 8007d12:	d101      	bne.n	8007d18 <round+0x34>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d010      	beq.n	8007d3a <round+0x56>
 8007d18:	2380      	movs	r3, #128	; 0x80
 8007d1a:	031b      	lsls	r3, r3, #12
 8007d1c:	412b      	asrs	r3, r5
 8007d1e:	199b      	adds	r3, r3, r6
 8007d20:	4393      	bics	r3, r2
 8007d22:	2200      	movs	r2, #0
 8007d24:	e7ef      	b.n	8007d06 <round+0x22>
 8007d26:	2d33      	cmp	r5, #51	; 0x33
 8007d28:	dd08      	ble.n	8007d3c <round+0x58>
 8007d2a:	2380      	movs	r3, #128	; 0x80
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	429d      	cmp	r5, r3
 8007d30:	d103      	bne.n	8007d3a <round+0x56>
 8007d32:	0002      	movs	r2, r0
 8007d34:	000b      	movs	r3, r1
 8007d36:	f7f8 fca3 	bl	8000680 <__aeabi_dadd>
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	4e0b      	ldr	r6, [pc, #44]	; (8007d6c <round+0x88>)
 8007d3e:	1992      	adds	r2, r2, r6
 8007d40:	2601      	movs	r6, #1
 8007d42:	4276      	negs	r6, r6
 8007d44:	40d6      	lsrs	r6, r2
 8007d46:	4206      	tst	r6, r0
 8007d48:	d0f7      	beq.n	8007d3a <round+0x56>
 8007d4a:	2233      	movs	r2, #51	; 0x33
 8007d4c:	1b55      	subs	r5, r2, r5
 8007d4e:	3a32      	subs	r2, #50	; 0x32
 8007d50:	40aa      	lsls	r2, r5
 8007d52:	1812      	adds	r2, r2, r0
 8007d54:	4282      	cmp	r2, r0
 8007d56:	41a4      	sbcs	r4, r4
 8007d58:	4264      	negs	r4, r4
 8007d5a:	190b      	adds	r3, r1, r4
 8007d5c:	43b2      	bics	r2, r6
 8007d5e:	e7d2      	b.n	8007d06 <round+0x22>
 8007d60:	fffffc01 	.word	0xfffffc01
 8007d64:	3ff00000 	.word	0x3ff00000
 8007d68:	000fffff 	.word	0x000fffff
 8007d6c:	fffffbed 	.word	0xfffffbed

08007d70 <_sbrk>:
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <_sbrk+0x18>)
 8007d72:	0002      	movs	r2, r0
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	2900      	cmp	r1, #0
 8007d78:	d101      	bne.n	8007d7e <_sbrk+0xe>
 8007d7a:	4904      	ldr	r1, [pc, #16]	; (8007d8c <_sbrk+0x1c>)
 8007d7c:	6019      	str	r1, [r3, #0]
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	1882      	adds	r2, r0, r2
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	4770      	bx	lr
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	20000540 	.word	0x20000540
 8007d8c:	20000640 	.word	0x20000640

08007d90 <_init>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d96:	bc08      	pop	{r3}
 8007d98:	469e      	mov	lr, r3
 8007d9a:	4770      	bx	lr

08007d9c <_fini>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr
